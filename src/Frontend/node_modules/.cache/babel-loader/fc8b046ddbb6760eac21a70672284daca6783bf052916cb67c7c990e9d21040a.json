{"ast":null,"code":"\"use strict\";\n\n// Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JWTAccess = void 0;\nconst jws = require(\"jws\");\nconst LRU = require(\"lru-cache\");\nconst DEFAULT_HEADER = {\n  alg: 'RS256',\n  typ: 'JWT'\n};\nclass JWTAccess {\n  /**\n   * JWTAccess service account credentials.\n   *\n   * Create a new access token by using the credential to create a new JWT token\n   * that's recognized as the access token.\n   *\n   * @param email the service account email address.\n   * @param key the private key that will be used to sign the token.\n   * @param keyId the ID of the private key used to sign the token.\n   */\n  constructor(email, key, keyId, eagerRefreshThresholdMillis) {\n    this.cache = new LRU({\n      max: 500,\n      maxAge: 60 * 60 * 1000\n    });\n    this.email = email;\n    this.key = key;\n    this.keyId = keyId;\n    this.eagerRefreshThresholdMillis = eagerRefreshThresholdMillis !== null && eagerRefreshThresholdMillis !== void 0 ? eagerRefreshThresholdMillis : 5 * 60 * 1000;\n  }\n  /**\n   * Ensures that we're caching a key appropriately, giving precedence to scopes vs. url\n   *\n   * @param url The URI being authorized.\n   * @param scopes The scope or scopes being authorized\n   * @returns A string that returns the cached key.\n   */\n  getCachedKey(url, scopes) {\n    let cacheKey = url;\n    if (scopes && Array.isArray(scopes) && scopes.length) {\n      cacheKey = url ? `${url}_${scopes.join('_')}` : `${scopes.join('_')}`;\n    } else if (typeof scopes === 'string') {\n      cacheKey = url ? `${url}_${scopes}` : scopes;\n    }\n    if (!cacheKey) {\n      throw Error('Scopes or url must be provided');\n    }\n    return cacheKey;\n  }\n  /**\n   * Get a non-expired access token, after refreshing if necessary.\n   *\n   * @param url The URI being authorized.\n   * @param additionalClaims An object with a set of additional claims to\n   * include in the payload.\n   * @returns An object that includes the authorization header.\n   */\n  getRequestHeaders(url, additionalClaims, scopes) {\n    // Return cached authorization headers, unless we are within\n    // eagerRefreshThresholdMillis ms of them expiring:\n    const key = this.getCachedKey(url, scopes);\n    const cachedToken = this.cache.get(key);\n    const now = Date.now();\n    if (cachedToken && cachedToken.expiration - now > this.eagerRefreshThresholdMillis) {\n      return cachedToken.headers;\n    }\n    const iat = Math.floor(Date.now() / 1000);\n    const exp = JWTAccess.getExpirationTime(iat);\n    let defaultClaims;\n    // Turn scopes into space-separated string\n    if (Array.isArray(scopes)) {\n      scopes = scopes.join(' ');\n    }\n    // If scopes are specified, sign with scopes\n    if (scopes) {\n      defaultClaims = {\n        iss: this.email,\n        sub: this.email,\n        scope: scopes,\n        exp,\n        iat\n      };\n    } else {\n      defaultClaims = {\n        iss: this.email,\n        sub: this.email,\n        aud: url,\n        exp,\n        iat\n      };\n    }\n    // if additionalClaims are provided, ensure they do not collide with\n    // other required claims.\n    if (additionalClaims) {\n      for (const claim in defaultClaims) {\n        if (additionalClaims[claim]) {\n          throw new Error(`The '${claim}' property is not allowed when passing additionalClaims. This claim is included in the JWT by default.`);\n        }\n      }\n    }\n    const header = this.keyId ? {\n      ...DEFAULT_HEADER,\n      kid: this.keyId\n    } : DEFAULT_HEADER;\n    const payload = Object.assign(defaultClaims, additionalClaims);\n    // Sign the jwt and add it to the cache\n    const signedJWT = jws.sign({\n      header,\n      payload,\n      secret: this.key\n    });\n    const headers = {\n      Authorization: `Bearer ${signedJWT}`\n    };\n    this.cache.set(key, {\n      expiration: exp * 1000,\n      headers\n    });\n    return headers;\n  }\n  /**\n   * Returns an expiration time for the JWT token.\n   *\n   * @param iat The issued at time for the JWT.\n   * @returns An expiration time for the JWT.\n   */\n  static getExpirationTime(iat) {\n    const exp = iat + 3600; // 3600 seconds = 1 hour\n    return exp;\n  }\n  /**\n   * Create a JWTAccess credentials instance using the given input options.\n   * @param json The input object.\n   */\n  fromJSON(json) {\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the service account auth settings.');\n    }\n    if (!json.client_email) {\n      throw new Error('The incoming JSON object does not contain a client_email field');\n    }\n    if (!json.private_key) {\n      throw new Error('The incoming JSON object does not contain a private_key field');\n    }\n    // Extract the relevant information from the json key file.\n    this.email = json.client_email;\n    this.key = json.private_key;\n    this.keyId = json.private_key_id;\n    this.projectId = json.project_id;\n  }\n  fromStream(inputStream, callback) {\n    if (callback) {\n      this.fromStreamAsync(inputStream).then(() => callback(), callback);\n    } else {\n      return this.fromStreamAsync(inputStream);\n    }\n  }\n  fromStreamAsync(inputStream) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        reject(new Error('Must pass in a stream containing the service account auth settings.'));\n      }\n      let s = '';\n      inputStream.setEncoding('utf8').on('data', chunk => s += chunk).on('error', reject).on('end', () => {\n        try {\n          const data = JSON.parse(s);\n          this.fromJSON(data);\n          resolve();\n        } catch (err) {\n          reject(err);\n        }\n      });\n    });\n  }\n}\nexports.JWTAccess = JWTAccess;","map":{"version":3,"names":["Object","defineProperty","exports","value","JWTAccess","jws","require","LRU","DEFAULT_HEADER","alg","typ","constructor","email","key","keyId","eagerRefreshThresholdMillis","cache","max","maxAge","getCachedKey","url","scopes","cacheKey","Array","isArray","length","join","Error","getRequestHeaders","additionalClaims","cachedToken","get","now","Date","expiration","headers","iat","Math","floor","exp","getExpirationTime","defaultClaims","iss","sub","scope","aud","claim","header","kid","payload","assign","signedJWT","sign","secret","Authorization","set","fromJSON","json","client_email","private_key","private_key_id","projectId","project_id","fromStream","inputStream","callback","fromStreamAsync","then","Promise","resolve","reject","s","setEncoding","on","chunk","data","JSON","parse","err"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/google-auth-library/build/src/auth/jwtaccess.js"],"sourcesContent":["\"use strict\";\n// Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JWTAccess = void 0;\nconst jws = require(\"jws\");\nconst LRU = require(\"lru-cache\");\nconst DEFAULT_HEADER = {\n    alg: 'RS256',\n    typ: 'JWT',\n};\nclass JWTAccess {\n    /**\n     * JWTAccess service account credentials.\n     *\n     * Create a new access token by using the credential to create a new JWT token\n     * that's recognized as the access token.\n     *\n     * @param email the service account email address.\n     * @param key the private key that will be used to sign the token.\n     * @param keyId the ID of the private key used to sign the token.\n     */\n    constructor(email, key, keyId, eagerRefreshThresholdMillis) {\n        this.cache = new LRU({\n            max: 500,\n            maxAge: 60 * 60 * 1000,\n        });\n        this.email = email;\n        this.key = key;\n        this.keyId = keyId;\n        this.eagerRefreshThresholdMillis = eagerRefreshThresholdMillis !== null && eagerRefreshThresholdMillis !== void 0 ? eagerRefreshThresholdMillis : 5 * 60 * 1000;\n    }\n    /**\n     * Ensures that we're caching a key appropriately, giving precedence to scopes vs. url\n     *\n     * @param url The URI being authorized.\n     * @param scopes The scope or scopes being authorized\n     * @returns A string that returns the cached key.\n     */\n    getCachedKey(url, scopes) {\n        let cacheKey = url;\n        if (scopes && Array.isArray(scopes) && scopes.length) {\n            cacheKey = url ? `${url}_${scopes.join('_')}` : `${scopes.join('_')}`;\n        }\n        else if (typeof scopes === 'string') {\n            cacheKey = url ? `${url}_${scopes}` : scopes;\n        }\n        if (!cacheKey) {\n            throw Error('Scopes or url must be provided');\n        }\n        return cacheKey;\n    }\n    /**\n     * Get a non-expired access token, after refreshing if necessary.\n     *\n     * @param url The URI being authorized.\n     * @param additionalClaims An object with a set of additional claims to\n     * include in the payload.\n     * @returns An object that includes the authorization header.\n     */\n    getRequestHeaders(url, additionalClaims, scopes) {\n        // Return cached authorization headers, unless we are within\n        // eagerRefreshThresholdMillis ms of them expiring:\n        const key = this.getCachedKey(url, scopes);\n        const cachedToken = this.cache.get(key);\n        const now = Date.now();\n        if (cachedToken &&\n            cachedToken.expiration - now > this.eagerRefreshThresholdMillis) {\n            return cachedToken.headers;\n        }\n        const iat = Math.floor(Date.now() / 1000);\n        const exp = JWTAccess.getExpirationTime(iat);\n        let defaultClaims;\n        // Turn scopes into space-separated string\n        if (Array.isArray(scopes)) {\n            scopes = scopes.join(' ');\n        }\n        // If scopes are specified, sign with scopes\n        if (scopes) {\n            defaultClaims = {\n                iss: this.email,\n                sub: this.email,\n                scope: scopes,\n                exp,\n                iat,\n            };\n        }\n        else {\n            defaultClaims = {\n                iss: this.email,\n                sub: this.email,\n                aud: url,\n                exp,\n                iat,\n            };\n        }\n        // if additionalClaims are provided, ensure they do not collide with\n        // other required claims.\n        if (additionalClaims) {\n            for (const claim in defaultClaims) {\n                if (additionalClaims[claim]) {\n                    throw new Error(`The '${claim}' property is not allowed when passing additionalClaims. This claim is included in the JWT by default.`);\n                }\n            }\n        }\n        const header = this.keyId\n            ? { ...DEFAULT_HEADER, kid: this.keyId }\n            : DEFAULT_HEADER;\n        const payload = Object.assign(defaultClaims, additionalClaims);\n        // Sign the jwt and add it to the cache\n        const signedJWT = jws.sign({ header, payload, secret: this.key });\n        const headers = { Authorization: `Bearer ${signedJWT}` };\n        this.cache.set(key, {\n            expiration: exp * 1000,\n            headers,\n        });\n        return headers;\n    }\n    /**\n     * Returns an expiration time for the JWT token.\n     *\n     * @param iat The issued at time for the JWT.\n     * @returns An expiration time for the JWT.\n     */\n    static getExpirationTime(iat) {\n        const exp = iat + 3600; // 3600 seconds = 1 hour\n        return exp;\n    }\n    /**\n     * Create a JWTAccess credentials instance using the given input options.\n     * @param json The input object.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the service account auth settings.');\n        }\n        if (!json.client_email) {\n            throw new Error('The incoming JSON object does not contain a client_email field');\n        }\n        if (!json.private_key) {\n            throw new Error('The incoming JSON object does not contain a private_key field');\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(() => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                reject(new Error('Must pass in a stream containing the service account auth settings.'));\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('data', chunk => (s += chunk))\n                .on('error', reject)\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                }\n                catch (err) {\n                    reject(err);\n                }\n            });\n        });\n    }\n}\nexports.JWTAccess = JWTAccess;\n//# sourceMappingURL=jwtaccess.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}