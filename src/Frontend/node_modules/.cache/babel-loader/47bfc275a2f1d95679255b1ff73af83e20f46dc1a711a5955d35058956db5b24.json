{"ast":null,"code":"\"use strict\";\n\n/**\n * Various utility functions.\n * @namespace\n */\nvar util = module.exports = require(\"./util/minimal\");\nvar roots = require(\"./roots\");\nvar Type,\n  // cyclic\n  Enum;\nutil.codegen = require(\"@protobufjs/codegen\");\nutil.fetch = require(\"@protobufjs/fetch\");\nutil.path = require(\"@protobufjs/path\");\n\n/**\n * Node's fs module if available.\n * @type {Object.<string,*>}\n */\nutil.fs = util.inquire(\"fs\");\n\n/**\n * Converts an object's values to an array.\n * @param {Object.<string,*>} object Object to convert\n * @returns {Array.<*>} Converted array\n */\nutil.toArray = function toArray(object) {\n  if (object) {\n    var keys = Object.keys(object),\n      array = new Array(keys.length),\n      index = 0;\n    while (index < keys.length) array[index] = object[keys[index++]];\n    return array;\n  }\n  return [];\n};\n\n/**\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\n * @param {Array.<*>} array Array to convert\n * @returns {Object.<string,*>} Converted object\n */\nutil.toObject = function toObject(array) {\n  var object = {},\n    index = 0;\n  while (index < array.length) {\n    var key = array[index++],\n      val = array[index++];\n    if (val !== undefined) object[key] = val;\n  }\n  return object;\n};\nvar safePropBackslashRe = /\\\\/g,\n  safePropQuoteRe = /\"/g;\n\n/**\n * Tests whether the specified name is a reserved word in JS.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nutil.isReserved = function isReserved(name) {\n  return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\n};\n\n/**\n * Returns a safe property accessor for the specified property name.\n * @param {string} prop Property name\n * @returns {string} Safe accessor\n */\nutil.safeProp = function safeProp(prop) {\n  if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop)) return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\n  return \".\" + prop;\n};\n\n/**\n * Converts the first character of a string to upper case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.ucFirst = function ucFirst(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n};\nvar camelCaseRe = /_([a-z])/g;\n\n/**\n * Converts a string to camel case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.camelCase = function camelCase(str) {\n  return str.substring(0, 1) + str.substring(1).replace(camelCaseRe, function ($0, $1) {\n    return $1.toUpperCase();\n  });\n};\n\n/**\n * Compares reflected fields by id.\n * @param {Field} a First field\n * @param {Field} b Second field\n * @returns {number} Comparison value\n */\nutil.compareFieldsById = function compareFieldsById(a, b) {\n  return a.id - b.id;\n};\n\n/**\n * Decorator helper for types (TypeScript).\n * @param {Constructor<T>} ctor Constructor function\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {Type} Reflected type\n * @template T extends Message<T>\n * @property {Root} root Decorators root\n */\nutil.decorateType = function decorateType(ctor, typeName) {\n  /* istanbul ignore if */\n  if (ctor.$type) {\n    if (typeName && ctor.$type.name !== typeName) {\n      util.decorateRoot.remove(ctor.$type);\n      ctor.$type.name = typeName;\n      util.decorateRoot.add(ctor.$type);\n    }\n    return ctor.$type;\n  }\n\n  /* istanbul ignore next */\n  if (!Type) Type = require(\"./type\");\n  var type = new Type(typeName || ctor.name);\n  util.decorateRoot.add(type);\n  type.ctor = ctor; // sets up .encode, .decode etc.\n  Object.defineProperty(ctor, \"$type\", {\n    value: type,\n    enumerable: false\n  });\n  Object.defineProperty(ctor.prototype, \"$type\", {\n    value: type,\n    enumerable: false\n  });\n  return type;\n};\nvar decorateEnumIndex = 0;\n\n/**\n * Decorator helper for enums (TypeScript).\n * @param {Object} object Enum object\n * @returns {Enum} Reflected enum\n */\nutil.decorateEnum = function decorateEnum(object) {\n  /* istanbul ignore if */\n  if (object.$type) return object.$type;\n\n  /* istanbul ignore next */\n  if (!Enum) Enum = require(\"./enum\");\n  var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\n  util.decorateRoot.add(enm);\n  Object.defineProperty(object, \"$type\", {\n    value: enm,\n    enumerable: false\n  });\n  return enm;\n};\n\n/**\n * Sets the value of a property by property path. If a value already exists, it is turned to an array\n * @param {Object.<string,*>} dst Destination object\n * @param {string} path dot '.' delimited path of the property to set\n * @param {Object} value the value to set\n * @returns {Object.<string,*>} Destination object\n */\nutil.setProperty = function setProperty(dst, path, value) {\n  function setProp(dst, path, value) {\n    var part = path.shift();\n    if (part === \"__proto__\") {\n      return dst;\n    }\n    if (path.length > 0) {\n      dst[part] = setProp(dst[part] || {}, path, value);\n    } else {\n      var prevValue = dst[part];\n      if (prevValue) value = [].concat(prevValue).concat(value);\n      dst[part] = value;\n    }\n    return dst;\n  }\n  if (typeof dst !== \"object\") throw TypeError(\"dst must be an object\");\n  if (!path) throw TypeError(\"path must be specified\");\n  path = path.split(\".\");\n  return setProp(dst, path, value);\n};\n\n/**\n * Decorator root (TypeScript).\n * @name util.decorateRoot\n * @type {Root}\n * @readonly\n */\nObject.defineProperty(util, \"decorateRoot\", {\n  get: function () {\n    return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(\"./root\"))());\n  }\n});","map":{"version":3,"names":["util","module","exports","require","roots","Type","Enum","codegen","fetch","path","fs","inquire","toArray","object","keys","Object","array","Array","length","index","toObject","key","val","undefined","safePropBackslashRe","safePropQuoteRe","isReserved","name","test","safeProp","prop","replace","ucFirst","str","charAt","toUpperCase","substring","camelCaseRe","camelCase","$0","$1","compareFieldsById","a","b","id","decorateType","ctor","typeName","$type","decorateRoot","remove","add","type","defineProperty","value","enumerable","prototype","decorateEnumIndex","decorateEnum","enm","setProperty","dst","setProp","part","shift","prevValue","concat","TypeError","split","get"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/google-gax/node_modules/protobufjs/src/util.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Various utility functions.\n * @namespace\n */\nvar util = module.exports = require(\"./util/minimal\");\n\nvar roots = require(\"./roots\");\n\nvar Type, // cyclic\n    Enum;\n\nutil.codegen = require(\"@protobufjs/codegen\");\nutil.fetch   = require(\"@protobufjs/fetch\");\nutil.path    = require(\"@protobufjs/path\");\n\n/**\n * Node's fs module if available.\n * @type {Object.<string,*>}\n */\nutil.fs = util.inquire(\"fs\");\n\n/**\n * Converts an object's values to an array.\n * @param {Object.<string,*>} object Object to convert\n * @returns {Array.<*>} Converted array\n */\nutil.toArray = function toArray(object) {\n    if (object) {\n        var keys  = Object.keys(object),\n            array = new Array(keys.length),\n            index = 0;\n        while (index < keys.length)\n            array[index] = object[keys[index++]];\n        return array;\n    }\n    return [];\n};\n\n/**\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\n * @param {Array.<*>} array Array to convert\n * @returns {Object.<string,*>} Converted object\n */\nutil.toObject = function toObject(array) {\n    var object = {},\n        index  = 0;\n    while (index < array.length) {\n        var key = array[index++],\n            val = array[index++];\n        if (val !== undefined)\n            object[key] = val;\n    }\n    return object;\n};\n\nvar safePropBackslashRe = /\\\\/g,\n    safePropQuoteRe     = /\"/g;\n\n/**\n * Tests whether the specified name is a reserved word in JS.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nutil.isReserved = function isReserved(name) {\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\n};\n\n/**\n * Returns a safe property accessor for the specified property name.\n * @param {string} prop Property name\n * @returns {string} Safe accessor\n */\nutil.safeProp = function safeProp(prop) {\n    if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop))\n        return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\n    return \".\" + prop;\n};\n\n/**\n * Converts the first character of a string to upper case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.ucFirst = function ucFirst(str) {\n    return str.charAt(0).toUpperCase() + str.substring(1);\n};\n\nvar camelCaseRe = /_([a-z])/g;\n\n/**\n * Converts a string to camel case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.camelCase = function camelCase(str) {\n    return str.substring(0, 1)\n         + str.substring(1)\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\n};\n\n/**\n * Compares reflected fields by id.\n * @param {Field} a First field\n * @param {Field} b Second field\n * @returns {number} Comparison value\n */\nutil.compareFieldsById = function compareFieldsById(a, b) {\n    return a.id - b.id;\n};\n\n/**\n * Decorator helper for types (TypeScript).\n * @param {Constructor<T>} ctor Constructor function\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {Type} Reflected type\n * @template T extends Message<T>\n * @property {Root} root Decorators root\n */\nutil.decorateType = function decorateType(ctor, typeName) {\n\n    /* istanbul ignore if */\n    if (ctor.$type) {\n        if (typeName && ctor.$type.name !== typeName) {\n            util.decorateRoot.remove(ctor.$type);\n            ctor.$type.name = typeName;\n            util.decorateRoot.add(ctor.$type);\n        }\n        return ctor.$type;\n    }\n\n    /* istanbul ignore next */\n    if (!Type)\n        Type = require(\"./type\");\n\n    var type = new Type(typeName || ctor.name);\n    util.decorateRoot.add(type);\n    type.ctor = ctor; // sets up .encode, .decode etc.\n    Object.defineProperty(ctor, \"$type\", { value: type, enumerable: false });\n    Object.defineProperty(ctor.prototype, \"$type\", { value: type, enumerable: false });\n    return type;\n};\n\nvar decorateEnumIndex = 0;\n\n/**\n * Decorator helper for enums (TypeScript).\n * @param {Object} object Enum object\n * @returns {Enum} Reflected enum\n */\nutil.decorateEnum = function decorateEnum(object) {\n\n    /* istanbul ignore if */\n    if (object.$type)\n        return object.$type;\n\n    /* istanbul ignore next */\n    if (!Enum)\n        Enum = require(\"./enum\");\n\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\n    util.decorateRoot.add(enm);\n    Object.defineProperty(object, \"$type\", { value: enm, enumerable: false });\n    return enm;\n};\n\n\n/**\n * Sets the value of a property by property path. If a value already exists, it is turned to an array\n * @param {Object.<string,*>} dst Destination object\n * @param {string} path dot '.' delimited path of the property to set\n * @param {Object} value the value to set\n * @returns {Object.<string,*>} Destination object\n */\nutil.setProperty = function setProperty(dst, path, value) {\n    function setProp(dst, path, value) {\n        var part = path.shift();\n        if (part === \"__proto__\") {\n          return dst;\n        }\n        if (path.length > 0) {\n            dst[part] = setProp(dst[part] || {}, path, value);\n        } else {\n            var prevValue = dst[part];\n            if (prevValue)\n                value = [].concat(prevValue).concat(value);\n            dst[part] = value;\n        }\n        return dst;\n    }\n\n    if (typeof dst !== \"object\")\n        throw TypeError(\"dst must be an object\");\n    if (!path)\n        throw TypeError(\"path must be specified\");\n\n    path = path.split(\".\");\n    return setProp(dst, path, value);\n};\n\n/**\n * Decorator root (TypeScript).\n * @name util.decorateRoot\n * @type {Root}\n * @readonly\n */\nObject.defineProperty(util, \"decorateRoot\", {\n    get: function() {\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(\"./root\"))());\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}