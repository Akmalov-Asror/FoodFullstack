{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseExternalAccountClient = exports.CLOUD_RESOURCE_MANAGER = exports.EXTERNAL_ACCOUNT_TYPE = exports.EXPIRATION_TIME_OFFSET = void 0;\nconst stream = require(\"stream\");\nconst authclient_1 = require(\"./authclient\");\nconst sts = require(\"./stscredentials\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */\nconst STS_GRANT_TYPE = 'urn:ietf:params:oauth:grant-type:token-exchange';\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */\nconst STS_REQUEST_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/** The default OAuth scope to request when none is provided. */\nconst DEFAULT_OAUTH_SCOPE = 'https://www.googleapis.com/auth/cloud-platform';\n/** The google apis domain pattern. */\nconst GOOGLE_APIS_DOMAIN_PATTERN = '\\\\.googleapis\\\\.com$';\n/** The variable portion pattern in a Google APIs domain. */\nconst VARIABLE_PORTION_PATTERN = '[^\\\\.\\\\s\\\\/\\\\\\\\]+';\n/**\n * Offset to take into account network delays and server clock skews.\n */\nexports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n/**\n * The credentials JSON file type for external account clients.\n * There are 3 types of JSON configs:\n * 1. authorized_user => Google end user credential\n * 2. service_account => Google service account credential\n * 3. external_Account => non-GCP service (eg. AWS, Azure, K8s)\n */\nexports.EXTERNAL_ACCOUNT_TYPE = 'external_account';\n/** Cloud resource manager URL used to retrieve project information. */\nexports.CLOUD_RESOURCE_MANAGER = 'https://cloudresourcemanager.googleapis.com/v1/projects/';\n/** The workforce audience pattern. */\nconst WORKFORCE_AUDIENCE_PATTERN = '//iam.googleapis.com/locations/[^/]+/workforcePools/[^/]+/providers/.+';\n/**\n * Base external account client. This is used to instantiate AuthClients for\n * exchanging external account credentials for GCP access token and authorizing\n * requests to GCP APIs.\n * The base class implements common logic for exchanging various type of\n * external credentials for GCP access token. The logic of determining and\n * retrieving the external credential based on the environment and\n * credential_source will be left for the subclasses.\n */\nclass BaseExternalAccountClient extends authclient_1.AuthClient {\n  /**\n   * Instantiate a BaseExternalAccountClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * @param options The external account options object typically loaded\n   *   from the external account JSON credential file.\n   * @param additionalOptions Optional additional behavior customization\n   *   options. These currently customize expiration threshold time and\n   *   whether to retry on 401/403 API request errors.\n   */\n  constructor(options, additionalOptions) {\n    super();\n    if (options.type !== exports.EXTERNAL_ACCOUNT_TYPE) {\n      throw new Error(`Expected \"${exports.EXTERNAL_ACCOUNT_TYPE}\" type but ` + `received \"${options.type}\"`);\n    }\n    this.clientAuth = options.client_id ? {\n      confidentialClientType: 'basic',\n      clientId: options.client_id,\n      clientSecret: options.client_secret\n    } : undefined;\n    if (!this.validateGoogleAPIsUrl('sts', options.token_url)) {\n      throw new Error(`\"${options.token_url}\" is not a valid token url.`);\n    }\n    this.stsCredential = new sts.StsCredentials(options.token_url, this.clientAuth);\n    // Default OAuth scope. This could be overridden via public property.\n    this.scopes = [DEFAULT_OAUTH_SCOPE];\n    this.cachedAccessToken = null;\n    this.audience = options.audience;\n    this.subjectTokenType = options.subject_token_type;\n    this.quotaProjectId = options.quota_project_id;\n    this.workforcePoolUserProject = options.workforce_pool_user_project;\n    const workforceAudiencePattern = new RegExp(WORKFORCE_AUDIENCE_PATTERN);\n    if (this.workforcePoolUserProject && !this.audience.match(workforceAudiencePattern)) {\n      throw new Error('workforcePoolUserProject should not be set for non-workforce pool ' + 'credentials.');\n    }\n    if (typeof options.service_account_impersonation_url !== 'undefined' && !this.validateGoogleAPIsUrl('iamcredentials', options.service_account_impersonation_url)) {\n      throw new Error(`\"${options.service_account_impersonation_url}\" is ` + 'not a valid service account impersonation url.');\n    }\n    this.serviceAccountImpersonationUrl = options.service_account_impersonation_url;\n    // As threshold could be zero,\n    // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n    // zero value.\n    if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== 'number') {\n      this.eagerRefreshThresholdMillis = exports.EXPIRATION_TIME_OFFSET;\n    } else {\n      this.eagerRefreshThresholdMillis = additionalOptions.eagerRefreshThresholdMillis;\n    }\n    this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);\n    this.projectId = null;\n    this.projectNumber = this.getProjectNumber(this.audience);\n  }\n  /** The service account email to be impersonated, if available. */\n  getServiceAccountEmail() {\n    var _a;\n    if (this.serviceAccountImpersonationUrl) {\n      // Parse email from URL. The formal looks as follows:\n      // https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/name@project-id.iam.gserviceaccount.com:generateAccessToken\n      const re = /serviceAccounts\\/(?<email>[^:]+):generateAccessToken$/;\n      const result = re.exec(this.serviceAccountImpersonationUrl);\n      return ((_a = result === null || result === void 0 ? void 0 : result.groups) === null || _a === void 0 ? void 0 : _a.email) || null;\n    }\n    return null;\n  }\n  /**\n   * Provides a mechanism to inject GCP access tokens directly.\n   * When the provided credential expires, a new credential, using the\n   * external account options, is retrieved.\n   * @param credentials The Credentials object to set on the current client.\n   */\n  setCredentials(credentials) {\n    super.setCredentials(credentials);\n    this.cachedAccessToken = credentials;\n  }\n  /**\n   * @return A promise that resolves with the current GCP access token\n   *   response. If the current credential is expired, a new one is retrieved.\n   */\n  async getAccessToken() {\n    // If cached access token is unavailable or expired, force refresh.\n    if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n      await this.refreshAccessTokenAsync();\n    }\n    // Return GCP access token in GetAccessTokenResponse format.\n    return {\n      token: this.cachedAccessToken.access_token,\n      res: this.cachedAccessToken.res\n    };\n  }\n  /**\n   * The main authentication interface. It takes an optional url which when\n   * present is the endpoint being accessed, and returns a Promise which\n   * resolves with authorization header fields.\n   *\n   * The result has the form:\n   * { Authorization: 'Bearer <access_token_value>' }\n   */\n  async getRequestHeaders() {\n    const accessTokenResponse = await this.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessTokenResponse.token}`\n    };\n    return this.addSharedMetadataHeaders(headers);\n  }\n  request(opts, callback) {\n    if (callback) {\n      this.requestAsync(opts).then(r => callback(null, r), e => {\n        return callback(e, e.response);\n      });\n    } else {\n      return this.requestAsync(opts);\n    }\n  }\n  /**\n   * @return A promise that resolves with the project ID corresponding to the\n   *   current workload identity pool or current workforce pool if\n   *   determinable. For workforce pool credential, it returns the project ID\n   *   corresponding to the workforcePoolUserProject.\n   *   This is introduced to match the current pattern of using the Auth\n   *   library:\n   *   const projectId = await auth.getProjectId();\n   *   const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;\n   *   const res = await client.request({ url });\n   *   The resource may not have permission\n   *   (resourcemanager.projects.get) to call this API or the required\n   *   scopes may not be selected:\n   *   https://cloud.google.com/resource-manager/reference/rest/v1/projects/get#authorization-scopes\n   */\n  async getProjectId() {\n    const projectNumber = this.projectNumber || this.workforcePoolUserProject;\n    if (this.projectId) {\n      // Return previously determined project ID.\n      return this.projectId;\n    } else if (projectNumber) {\n      // Preferable not to use request() to avoid retrial policies.\n      const headers = await this.getRequestHeaders();\n      const response = await this.transporter.request({\n        headers,\n        url: `${exports.CLOUD_RESOURCE_MANAGER}${projectNumber}`,\n        responseType: 'json'\n      });\n      this.projectId = response.data.projectId;\n      return this.projectId;\n    }\n    return null;\n  }\n  /**\n   * Authenticates the provided HTTP request, processes it and resolves with the\n   * returned response.\n   * @param opts The HTTP request options.\n   * @param retry Whether the current attempt is a retry after a failed attempt.\n   * @return A promise that resolves with the successful response.\n   */\n  async requestAsync(opts, retry = false) {\n    let response;\n    try {\n      const requestHeaders = await this.getRequestHeaders();\n      opts.headers = opts.headers || {};\n      if (requestHeaders && requestHeaders['x-goog-user-project']) {\n        opts.headers['x-goog-user-project'] = requestHeaders['x-goog-user-project'];\n      }\n      if (requestHeaders && requestHeaders.Authorization) {\n        opts.headers.Authorization = requestHeaders.Authorization;\n      }\n      response = await this.transporter.request(opts);\n    } catch (e) {\n      const res = e.response;\n      if (res) {\n        const statusCode = res.status;\n        // Retry the request for metadata if the following criteria are true:\n        // - We haven't already retried.  It only makes sense to retry once.\n        // - The response was a 401 or a 403\n        // - The request didn't send a readableStream\n        // - forceRefreshOnFailure is true\n        const isReadableStream = res.config.data instanceof stream.Readable;\n        const isAuthErr = statusCode === 401 || statusCode === 403;\n        if (!retry && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {\n          await this.refreshAccessTokenAsync();\n          return await this.requestAsync(opts, true);\n        }\n      }\n      throw e;\n    }\n    return response;\n  }\n  /**\n   * Forces token refresh, even if unexpired tokens are currently cached.\n   * External credentials are exchanged for GCP access tokens via the token\n   * exchange endpoint and other settings provided in the client options\n   * object.\n   * If the service_account_impersonation_url is provided, an additional\n   * step to exchange the external account GCP access token for a service\n   * account impersonated token is performed.\n   * @return A promise that resolves with the fresh GCP access tokens.\n   */\n  async refreshAccessTokenAsync() {\n    // Retrieve the external credential.\n    const subjectToken = await this.retrieveSubjectToken();\n    // Construct the STS credentials options.\n    const stsCredentialsOptions = {\n      grantType: STS_GRANT_TYPE,\n      audience: this.audience,\n      requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n      subjectToken,\n      subjectTokenType: this.subjectTokenType,\n      // generateAccessToken requires the provided access token to have\n      // scopes:\n      // https://www.googleapis.com/auth/iam or\n      // https://www.googleapis.com/auth/cloud-platform\n      // The new service account access token scopes will match the user\n      // provided ones.\n      scope: this.serviceAccountImpersonationUrl ? [DEFAULT_OAUTH_SCOPE] : this.getScopesArray()\n    };\n    // Exchange the external credentials for a GCP access token.\n    // Client auth is prioritized over passing the workforcePoolUserProject\n    // parameter for STS token exchange.\n    const additionalOptions = !this.clientAuth && this.workforcePoolUserProject ? {\n      userProject: this.workforcePoolUserProject\n    } : undefined;\n    const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, undefined, additionalOptions);\n    if (this.serviceAccountImpersonationUrl) {\n      this.cachedAccessToken = await this.getImpersonatedAccessToken(stsResponse.access_token);\n    } else if (stsResponse.expires_in) {\n      // Save response in cached access token.\n      this.cachedAccessToken = {\n        access_token: stsResponse.access_token,\n        expiry_date: new Date().getTime() + stsResponse.expires_in * 1000,\n        res: stsResponse.res\n      };\n    } else {\n      // Save response in cached access token.\n      this.cachedAccessToken = {\n        access_token: stsResponse.access_token,\n        res: stsResponse.res\n      };\n    }\n    // Save credentials.\n    this.credentials = {};\n    Object.assign(this.credentials, this.cachedAccessToken);\n    delete this.credentials.res;\n    // Trigger tokens event to notify external listeners.\n    this.emit('tokens', {\n      refresh_token: null,\n      expiry_date: this.cachedAccessToken.expiry_date,\n      access_token: this.cachedAccessToken.access_token,\n      token_type: 'Bearer',\n      id_token: null\n    });\n    // Return the cached access token.\n    return this.cachedAccessToken;\n  }\n  /**\n   * Returns the workload identity pool project number if it is determinable\n   * from the audience resource name.\n   * @param audience The STS audience used to determine the project number.\n   * @return The project number associated with the workload identity pool, if\n   *   this can be determined from the STS audience field. Otherwise, null is\n   *   returned.\n   */\n  getProjectNumber(audience) {\n    // STS audience pattern:\n    // //iam.googleapis.com/projects/$PROJECT_NUMBER/locations/...\n    const match = audience.match(/\\/projects\\/([^/]+)/);\n    if (!match) {\n      return null;\n    }\n    return match[1];\n  }\n  /**\n   * Exchanges an external account GCP access token for a service\n   * account impersonated access token using iamcredentials\n   * GenerateAccessToken API.\n   * @param token The access token to exchange for a service account access\n   *   token.\n   * @return A promise that resolves with the service account impersonated\n   *   credentials response.\n   */\n  async getImpersonatedAccessToken(token) {\n    const opts = {\n      url: this.serviceAccountImpersonationUrl,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      data: {\n        scope: this.getScopesArray()\n      },\n      responseType: 'json'\n    };\n    const response = await this.transporter.request(opts);\n    const successResponse = response.data;\n    return {\n      access_token: successResponse.accessToken,\n      // Convert from ISO format to timestamp.\n      expiry_date: new Date(successResponse.expireTime).getTime(),\n      res: response\n    };\n  }\n  /**\n   * Returns whether the provided credentials are expired or not.\n   * If there is no expiry time, assumes the token is not expired or expiring.\n   * @param accessToken The credentials to check for expiration.\n   * @return Whether the credentials are expired or not.\n   */\n  isExpired(accessToken) {\n    const now = new Date().getTime();\n    return accessToken.expiry_date ? now >= accessToken.expiry_date - this.eagerRefreshThresholdMillis : false;\n  }\n  /**\n   * @return The list of scopes for the requested GCP access token.\n   */\n  getScopesArray() {\n    // Since scopes can be provided as string or array, the type should\n    // be normalized.\n    if (typeof this.scopes === 'string') {\n      return [this.scopes];\n    } else if (typeof this.scopes === 'undefined') {\n      return [DEFAULT_OAUTH_SCOPE];\n    } else {\n      return this.scopes;\n    }\n  }\n  /**\n   * Checks whether Google APIs URL is valid.\n   * @param apiName The apiName of url.\n   * @param url The Google API URL to validate.\n   * @return Whether the URL is valid or not.\n   */\n  validateGoogleAPIsUrl(apiName, url) {\n    let parsedUrl;\n    // Return false if error is thrown during parsing URL.\n    try {\n      parsedUrl = new URL(url);\n    } catch (e) {\n      return false;\n    }\n    const urlDomain = parsedUrl.hostname;\n    // Check the protocol is https.\n    if (parsedUrl.protocol !== 'https:') {\n      return false;\n    }\n    const googleAPIsDomainPatterns = [new RegExp('^' + VARIABLE_PORTION_PATTERN + '\\\\.' + apiName + GOOGLE_APIS_DOMAIN_PATTERN), new RegExp('^' + apiName + GOOGLE_APIS_DOMAIN_PATTERN), new RegExp('^' + apiName + '\\\\.' + VARIABLE_PORTION_PATTERN + GOOGLE_APIS_DOMAIN_PATTERN), new RegExp('^' + VARIABLE_PORTION_PATTERN + '\\\\-' + apiName + GOOGLE_APIS_DOMAIN_PATTERN)];\n    for (const googleAPIsDomainPattern of googleAPIsDomainPatterns) {\n      if (urlDomain.match(googleAPIsDomainPattern)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\nexports.BaseExternalAccountClient = BaseExternalAccountClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","BaseExternalAccountClient","CLOUD_RESOURCE_MANAGER","EXTERNAL_ACCOUNT_TYPE","EXPIRATION_TIME_OFFSET","stream","require","authclient_1","sts","STS_GRANT_TYPE","STS_REQUEST_TOKEN_TYPE","DEFAULT_OAUTH_SCOPE","GOOGLE_APIS_DOMAIN_PATTERN","VARIABLE_PORTION_PATTERN","WORKFORCE_AUDIENCE_PATTERN","AuthClient","constructor","options","additionalOptions","type","Error","clientAuth","client_id","confidentialClientType","clientId","clientSecret","client_secret","undefined","validateGoogleAPIsUrl","token_url","stsCredential","StsCredentials","scopes","cachedAccessToken","audience","subjectTokenType","subject_token_type","quotaProjectId","quota_project_id","workforcePoolUserProject","workforce_pool_user_project","workforceAudiencePattern","RegExp","match","service_account_impersonation_url","serviceAccountImpersonationUrl","eagerRefreshThresholdMillis","forceRefreshOnFailure","projectId","projectNumber","getProjectNumber","getServiceAccountEmail","_a","re","result","exec","groups","email","setCredentials","credentials","getAccessToken","isExpired","refreshAccessTokenAsync","token","access_token","res","getRequestHeaders","accessTokenResponse","headers","Authorization","addSharedMetadataHeaders","request","opts","callback","requestAsync","then","r","e","response","getProjectId","transporter","url","responseType","data","retry","requestHeaders","statusCode","status","isReadableStream","config","Readable","isAuthErr","subjectToken","retrieveSubjectToken","stsCredentialsOptions","grantType","requestedTokenType","scope","getScopesArray","userProject","stsResponse","exchangeToken","getImpersonatedAccessToken","expires_in","expiry_date","Date","getTime","assign","emit","refresh_token","token_type","id_token","method","successResponse","accessToken","expireTime","now","apiName","parsedUrl","URL","urlDomain","hostname","protocol","googleAPIsDomainPatterns","googleAPIsDomainPattern"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/google-auth-library/build/src/auth/baseexternalclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseExternalAccountClient = exports.CLOUD_RESOURCE_MANAGER = exports.EXTERNAL_ACCOUNT_TYPE = exports.EXPIRATION_TIME_OFFSET = void 0;\nconst stream = require(\"stream\");\nconst authclient_1 = require(\"./authclient\");\nconst sts = require(\"./stscredentials\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */\nconst STS_GRANT_TYPE = 'urn:ietf:params:oauth:grant-type:token-exchange';\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */\nconst STS_REQUEST_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/** The default OAuth scope to request when none is provided. */\nconst DEFAULT_OAUTH_SCOPE = 'https://www.googleapis.com/auth/cloud-platform';\n/** The google apis domain pattern. */\nconst GOOGLE_APIS_DOMAIN_PATTERN = '\\\\.googleapis\\\\.com$';\n/** The variable portion pattern in a Google APIs domain. */\nconst VARIABLE_PORTION_PATTERN = '[^\\\\.\\\\s\\\\/\\\\\\\\]+';\n/**\n * Offset to take into account network delays and server clock skews.\n */\nexports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n/**\n * The credentials JSON file type for external account clients.\n * There are 3 types of JSON configs:\n * 1. authorized_user => Google end user credential\n * 2. service_account => Google service account credential\n * 3. external_Account => non-GCP service (eg. AWS, Azure, K8s)\n */\nexports.EXTERNAL_ACCOUNT_TYPE = 'external_account';\n/** Cloud resource manager URL used to retrieve project information. */\nexports.CLOUD_RESOURCE_MANAGER = 'https://cloudresourcemanager.googleapis.com/v1/projects/';\n/** The workforce audience pattern. */\nconst WORKFORCE_AUDIENCE_PATTERN = '//iam.googleapis.com/locations/[^/]+/workforcePools/[^/]+/providers/.+';\n/**\n * Base external account client. This is used to instantiate AuthClients for\n * exchanging external account credentials for GCP access token and authorizing\n * requests to GCP APIs.\n * The base class implements common logic for exchanging various type of\n * external credentials for GCP access token. The logic of determining and\n * retrieving the external credential based on the environment and\n * credential_source will be left for the subclasses.\n */\nclass BaseExternalAccountClient extends authclient_1.AuthClient {\n    /**\n     * Instantiate a BaseExternalAccountClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file.\n     * @param additionalOptions Optional additional behavior customization\n     *   options. These currently customize expiration threshold time and\n     *   whether to retry on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        super();\n        if (options.type !== exports.EXTERNAL_ACCOUNT_TYPE) {\n            throw new Error(`Expected \"${exports.EXTERNAL_ACCOUNT_TYPE}\" type but ` +\n                `received \"${options.type}\"`);\n        }\n        this.clientAuth = options.client_id\n            ? {\n                confidentialClientType: 'basic',\n                clientId: options.client_id,\n                clientSecret: options.client_secret,\n            }\n            : undefined;\n        if (!this.validateGoogleAPIsUrl('sts', options.token_url)) {\n            throw new Error(`\"${options.token_url}\" is not a valid token url.`);\n        }\n        this.stsCredential = new sts.StsCredentials(options.token_url, this.clientAuth);\n        // Default OAuth scope. This could be overridden via public property.\n        this.scopes = [DEFAULT_OAUTH_SCOPE];\n        this.cachedAccessToken = null;\n        this.audience = options.audience;\n        this.subjectTokenType = options.subject_token_type;\n        this.quotaProjectId = options.quota_project_id;\n        this.workforcePoolUserProject = options.workforce_pool_user_project;\n        const workforceAudiencePattern = new RegExp(WORKFORCE_AUDIENCE_PATTERN);\n        if (this.workforcePoolUserProject &&\n            !this.audience.match(workforceAudiencePattern)) {\n            throw new Error('workforcePoolUserProject should not be set for non-workforce pool ' +\n                'credentials.');\n        }\n        if (typeof options.service_account_impersonation_url !== 'undefined' &&\n            !this.validateGoogleAPIsUrl('iamcredentials', options.service_account_impersonation_url)) {\n            throw new Error(`\"${options.service_account_impersonation_url}\" is ` +\n                'not a valid service account impersonation url.');\n        }\n        this.serviceAccountImpersonationUrl =\n            options.service_account_impersonation_url;\n        // As threshold could be zero,\n        // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n        // zero value.\n        if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== 'number') {\n            this.eagerRefreshThresholdMillis = exports.EXPIRATION_TIME_OFFSET;\n        }\n        else {\n            this.eagerRefreshThresholdMillis = additionalOptions\n                .eagerRefreshThresholdMillis;\n        }\n        this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);\n        this.projectId = null;\n        this.projectNumber = this.getProjectNumber(this.audience);\n    }\n    /** The service account email to be impersonated, if available. */\n    getServiceAccountEmail() {\n        var _a;\n        if (this.serviceAccountImpersonationUrl) {\n            // Parse email from URL. The formal looks as follows:\n            // https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/name@project-id.iam.gserviceaccount.com:generateAccessToken\n            const re = /serviceAccounts\\/(?<email>[^:]+):generateAccessToken$/;\n            const result = re.exec(this.serviceAccountImpersonationUrl);\n            return ((_a = result === null || result === void 0 ? void 0 : result.groups) === null || _a === void 0 ? void 0 : _a.email) || null;\n        }\n        return null;\n    }\n    /**\n     * Provides a mechanism to inject GCP access tokens directly.\n     * When the provided credential expires, a new credential, using the\n     * external account options, is retrieved.\n     * @param credentials The Credentials object to set on the current client.\n     */\n    setCredentials(credentials) {\n        super.setCredentials(credentials);\n        this.cachedAccessToken = credentials;\n    }\n    /**\n     * @return A promise that resolves with the current GCP access token\n     *   response. If the current credential is expired, a new one is retrieved.\n     */\n    async getAccessToken() {\n        // If cached access token is unavailable or expired, force refresh.\n        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return GCP access token in GetAccessTokenResponse format.\n        return {\n            token: this.cachedAccessToken.access_token,\n            res: this.cachedAccessToken.res,\n        };\n    }\n    /**\n     * The main authentication interface. It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * The result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     */\n    async getRequestHeaders() {\n        const accessTokenResponse = await this.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessTokenResponse.token}`,\n        };\n        return this.addSharedMetadataHeaders(headers);\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then(r => callback(null, r), e => {\n                return callback(e, e.response);\n            });\n        }\n        else {\n            return this.requestAsync(opts);\n        }\n    }\n    /**\n     * @return A promise that resolves with the project ID corresponding to the\n     *   current workload identity pool or current workforce pool if\n     *   determinable. For workforce pool credential, it returns the project ID\n     *   corresponding to the workforcePoolUserProject.\n     *   This is introduced to match the current pattern of using the Auth\n     *   library:\n     *   const projectId = await auth.getProjectId();\n     *   const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;\n     *   const res = await client.request({ url });\n     *   The resource may not have permission\n     *   (resourcemanager.projects.get) to call this API or the required\n     *   scopes may not be selected:\n     *   https://cloud.google.com/resource-manager/reference/rest/v1/projects/get#authorization-scopes\n     */\n    async getProjectId() {\n        const projectNumber = this.projectNumber || this.workforcePoolUserProject;\n        if (this.projectId) {\n            // Return previously determined project ID.\n            return this.projectId;\n        }\n        else if (projectNumber) {\n            // Preferable not to use request() to avoid retrial policies.\n            const headers = await this.getRequestHeaders();\n            const response = await this.transporter.request({\n                headers,\n                url: `${exports.CLOUD_RESOURCE_MANAGER}${projectNumber}`,\n                responseType: 'json',\n            });\n            this.projectId = response.data.projectId;\n            return this.projectId;\n        }\n        return null;\n    }\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param retry Whether the current attempt is a retry after a failed attempt.\n     * @return A promise that resolves with the successful response.\n     */\n    async requestAsync(opts, retry = false) {\n        let response;\n        try {\n            const requestHeaders = await this.getRequestHeaders();\n            opts.headers = opts.headers || {};\n            if (requestHeaders && requestHeaders['x-goog-user-project']) {\n                opts.headers['x-goog-user-project'] =\n                    requestHeaders['x-goog-user-project'];\n            }\n            if (requestHeaders && requestHeaders.Authorization) {\n                opts.headers.Authorization = requestHeaders.Authorization;\n            }\n            response = await this.transporter.request(opts);\n        }\n        catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!retry &&\n                    isAuthErr &&\n                    !isReadableStream &&\n                    this.forceRefreshOnFailure) {\n                    await this.refreshAccessTokenAsync();\n                    return await this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * External credentials are exchanged for GCP access tokens via the token\n     * exchange endpoint and other settings provided in the client options\n     * object.\n     * If the service_account_impersonation_url is provided, an additional\n     * step to exchange the external account GCP access token for a service\n     * account impersonated token is performed.\n     * @return A promise that resolves with the fresh GCP access tokens.\n     */\n    async refreshAccessTokenAsync() {\n        // Retrieve the external credential.\n        const subjectToken = await this.retrieveSubjectToken();\n        // Construct the STS credentials options.\n        const stsCredentialsOptions = {\n            grantType: STS_GRANT_TYPE,\n            audience: this.audience,\n            requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n            subjectToken,\n            subjectTokenType: this.subjectTokenType,\n            // generateAccessToken requires the provided access token to have\n            // scopes:\n            // https://www.googleapis.com/auth/iam or\n            // https://www.googleapis.com/auth/cloud-platform\n            // The new service account access token scopes will match the user\n            // provided ones.\n            scope: this.serviceAccountImpersonationUrl\n                ? [DEFAULT_OAUTH_SCOPE]\n                : this.getScopesArray(),\n        };\n        // Exchange the external credentials for a GCP access token.\n        // Client auth is prioritized over passing the workforcePoolUserProject\n        // parameter for STS token exchange.\n        const additionalOptions = !this.clientAuth && this.workforcePoolUserProject\n            ? { userProject: this.workforcePoolUserProject }\n            : undefined;\n        const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, undefined, additionalOptions);\n        if (this.serviceAccountImpersonationUrl) {\n            this.cachedAccessToken = await this.getImpersonatedAccessToken(stsResponse.access_token);\n        }\n        else if (stsResponse.expires_in) {\n            // Save response in cached access token.\n            this.cachedAccessToken = {\n                access_token: stsResponse.access_token,\n                expiry_date: new Date().getTime() + stsResponse.expires_in * 1000,\n                res: stsResponse.res,\n            };\n        }\n        else {\n            // Save response in cached access token.\n            this.cachedAccessToken = {\n                access_token: stsResponse.access_token,\n                res: stsResponse.res,\n            };\n        }\n        // Save credentials.\n        this.credentials = {};\n        Object.assign(this.credentials, this.cachedAccessToken);\n        delete this.credentials.res;\n        // Trigger tokens event to notify external listeners.\n        this.emit('tokens', {\n            refresh_token: null,\n            expiry_date: this.cachedAccessToken.expiry_date,\n            access_token: this.cachedAccessToken.access_token,\n            token_type: 'Bearer',\n            id_token: null,\n        });\n        // Return the cached access token.\n        return this.cachedAccessToken;\n    }\n    /**\n     * Returns the workload identity pool project number if it is determinable\n     * from the audience resource name.\n     * @param audience The STS audience used to determine the project number.\n     * @return The project number associated with the workload identity pool, if\n     *   this can be determined from the STS audience field. Otherwise, null is\n     *   returned.\n     */\n    getProjectNumber(audience) {\n        // STS audience pattern:\n        // //iam.googleapis.com/projects/$PROJECT_NUMBER/locations/...\n        const match = audience.match(/\\/projects\\/([^/]+)/);\n        if (!match) {\n            return null;\n        }\n        return match[1];\n    }\n    /**\n     * Exchanges an external account GCP access token for a service\n     * account impersonated access token using iamcredentials\n     * GenerateAccessToken API.\n     * @param token The access token to exchange for a service account access\n     *   token.\n     * @return A promise that resolves with the service account impersonated\n     *   credentials response.\n     */\n    async getImpersonatedAccessToken(token) {\n        const opts = {\n            url: this.serviceAccountImpersonationUrl,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`,\n            },\n            data: {\n                scope: this.getScopesArray(),\n            },\n            responseType: 'json',\n        };\n        const response = await this.transporter.request(opts);\n        const successResponse = response.data;\n        return {\n            access_token: successResponse.accessToken,\n            // Convert from ISO format to timestamp.\n            expiry_date: new Date(successResponse.expireTime).getTime(),\n            res: response,\n        };\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param accessToken The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */\n    isExpired(accessToken) {\n        const now = new Date().getTime();\n        return accessToken.expiry_date\n            ? now >= accessToken.expiry_date - this.eagerRefreshThresholdMillis\n            : false;\n    }\n    /**\n     * @return The list of scopes for the requested GCP access token.\n     */\n    getScopesArray() {\n        // Since scopes can be provided as string or array, the type should\n        // be normalized.\n        if (typeof this.scopes === 'string') {\n            return [this.scopes];\n        }\n        else if (typeof this.scopes === 'undefined') {\n            return [DEFAULT_OAUTH_SCOPE];\n        }\n        else {\n            return this.scopes;\n        }\n    }\n    /**\n     * Checks whether Google APIs URL is valid.\n     * @param apiName The apiName of url.\n     * @param url The Google API URL to validate.\n     * @return Whether the URL is valid or not.\n     */\n    validateGoogleAPIsUrl(apiName, url) {\n        let parsedUrl;\n        // Return false if error is thrown during parsing URL.\n        try {\n            parsedUrl = new URL(url);\n        }\n        catch (e) {\n            return false;\n        }\n        const urlDomain = parsedUrl.hostname;\n        // Check the protocol is https.\n        if (parsedUrl.protocol !== 'https:') {\n            return false;\n        }\n        const googleAPIsDomainPatterns = [\n            new RegExp('^' +\n                VARIABLE_PORTION_PATTERN +\n                '\\\\.' +\n                apiName +\n                GOOGLE_APIS_DOMAIN_PATTERN),\n            new RegExp('^' + apiName + GOOGLE_APIS_DOMAIN_PATTERN),\n            new RegExp('^' +\n                apiName +\n                '\\\\.' +\n                VARIABLE_PORTION_PATTERN +\n                GOOGLE_APIS_DOMAIN_PATTERN),\n            new RegExp('^' +\n                VARIABLE_PORTION_PATTERN +\n                '\\\\-' +\n                apiName +\n                GOOGLE_APIS_DOMAIN_PATTERN),\n        ];\n        for (const googleAPIsDomainPattern of googleAPIsDomainPatterns) {\n            if (urlDomain.match(googleAPIsDomainPattern)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nexports.BaseExternalAccountClient = BaseExternalAccountClient;\n//# sourceMappingURL=baseexternalclient.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}