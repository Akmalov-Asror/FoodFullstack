{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OperationsClientBuilder = exports.OperationsClient = exports.ALL_SCOPES = exports.SERVICE_ADDRESS = void 0;\nconst createApiCall_1 = require(\"./createApiCall\");\nconst descriptor_1 = require(\"./descriptor\");\nconst gax = require(\"./gax\");\nconst configData = require(\"./operations_client_config.json\");\nconst protoJson = require(\"../protos/operations.json\");\nexports.SERVICE_ADDRESS = 'longrunning.googleapis.com';\nconst version = require('../../package.json').version;\nconst DEFAULT_SERVICE_PORT = 443;\nconst CODE_GEN_NAME_VERSION = 'gapic/0.7.1';\n/**\n * The scopes needed to make gRPC calls to all of the methods defined in\n * this service.\n */\nexports.ALL_SCOPES = [];\n/**\n * Manages long-running operations with an API service.\n *\n * When an API method normally takes long time to complete, it can be designed\n * to return {@link Operation} to the client, and the client can use this\n * interface to receive the real response asynchronously by polling the\n * operation resource, or pass the operation resource to another API (such as\n * Google Cloud Pub/Sub API) to receive the response.  Any API service that\n * returns long-running operations should implement the `Operations` interface\n * so developers can have a consistent client experience.\n *\n * This will be created through a builder function which can be obtained by the\n * module. See the following example of how to initialize the module and how to\n * access to the builder.\n * @see {@link operationsClient}\n *\n * @class\n */\nclass OperationsClient {\n  constructor(gaxGrpc,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  operationsProtos, options) {\n    const opts = Object.assign({\n      servicePath: exports.SERVICE_ADDRESS,\n      port: DEFAULT_SERVICE_PORT,\n      clientConfig: {}\n    }, options);\n    const googleApiClient = ['gl-node/' + process.versions.node];\n    if (opts.libName && opts.libVersion) {\n      googleApiClient.push(opts.libName + '/' + opts.libVersion);\n    }\n    googleApiClient.push(CODE_GEN_NAME_VERSION, 'gax/' + version);\n    if (opts.fallback) {\n      googleApiClient.push('gl-web/' + version);\n    } else {\n      googleApiClient.push('grpc/' + gaxGrpc.grpcVersion);\n    }\n    const defaults = gaxGrpc.constructSettings('google.longrunning.Operations', configData, opts.clientConfig || {}, {\n      'x-goog-api-client': googleApiClient.join(' ')\n    });\n    this.auth = gaxGrpc.auth;\n    // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n    this.innerApiCalls = {};\n    this.descriptor = {\n      listOperations: new descriptor_1.PageDescriptor('pageToken', 'nextPageToken', 'operations')\n    };\n    // Put together the \"service stub\" for\n    // google.longrunning.Operations.\n    this.operationsStub = gaxGrpc.createStub(opts.fallback ? operationsProtos.lookupService('google.longrunning.Operations') : operationsProtos.google.longrunning.Operations, opts);\n    const operationsStubMethods = ['getOperation', 'listOperations', 'cancelOperation', 'deleteOperation'];\n    for (const methodName of operationsStubMethods) {\n      const innerCallPromise = this.operationsStub.then(stub => (...args) => {\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      this.innerApiCalls[methodName] = createApiCall_1.createApiCall(innerCallPromise, defaults[methodName], this.descriptor[methodName]);\n    }\n  }\n  /** Closes this operations client. */\n  close() {\n    this.operationsStub.then(stub => stub.close());\n  }\n  getProjectId(callback) {\n    if (this.auth && 'getProjectId' in this.auth) {\n      return this.auth.getProjectId(callback);\n    }\n    if (callback) {\n      callback(new Error('Cannot determine project ID.'));\n    } else {\n      return Promise.reject('Cannot determine project ID.');\n    }\n  }\n  // Service calls\n  getOperationInternal(request, options, callback) {\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.getOperation(request, options, callback);\n  }\n  /**\n   * Gets the latest state of a long-running operation.  Clients can use this\n   * method to poll the operation result at intervals as recommended by the API\n   * service.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   *   details.\n   * @param {function(?Error, ?Object)=} callback\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   * @return {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}. The promise has a method named\n   * \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const name = '';\n   * const [response] = await client.getOperation({name});\n   * // doThingsWith(response)\n   */\n  getOperation(request, optionsOrCallback, callback) {\n    let options;\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.getOperation(request, options, callback);\n  }\n  /**\n   * Lists operations that match the specified filter in the request. If the\n   * server doesn't support this method, it returns `UNIMPLEMENTED`.\n   *\n   * NOTE: the `name` binding below allows API services to override the binding\n   * to use different resource name schemes.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error, ?Array, ?Object, ?Object)=} callback\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   *\n   *   When autoPaginate: false is specified through options, it contains the\n   * result in a single response. If the response indicates the next page\n   * exists, the third parameter is set to be used for the next request object.\n   * The fourth parameter keeps the raw response object of an object\n   * representing [google.longrunning.ListOperationsResponse]{@link\n   * external:\"google.longrunning.ListOperationsResponse\"}.\n   * @return {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   *\n   *   When autoPaginate: false is specified through options, the array has\n   * three elements. The first element is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"} in a single response. The second\n   * element is the next request object if the response indicates the next page\n   * exists, or null. The third element is an object representing\n   * [google.longrunning.ListOperationsResponse]{@link\n   * external:\"google.longrunning.ListOperationsResponse\"}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const request = {\n   *     name: '',\n   *     filter: ''\n   * };\n   * // Iterate over all elements.\n   * const [resources] = await client.listOperations(request);\n   * for (const resource of resources) {\n   *   console.log(resources);\n   * }\n   *\n   * // Or obtain the paged response.\n   * const options = {autoPaginate: false};\n   * let nextRequest = request;\n   * while(nextRequest) {\n   *   const response = await client.listOperations(nextRequest, options);\n   *   const resources = response[0];\n   *   nextRequest = response[1];\n   *   const rawResponse = response[2];\n   *   for (const resource of resources) {\n   *     // doThingsWith(resource);\n   *   }\n   * };\n   */\n  listOperations(request, optionsOrCallback, callback) {\n    let options;\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.listOperations(request, options, callback);\n  }\n  /**\n   * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listOperations} continuously\n   * and invokes the callback registered for 'data' event for each element in\n   * the responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize -\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   *   details.\n   * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:\"google.longrunning.Operation\"} on 'data' event.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const request = {\n   *   name: '',\n   *   filter: ''\n   * };\n   * client.listOperationsStream(request)\n   *   .on('data', element => {\n   *     // doThingsWith(element)\n   *   })\n   *   .on('error', err => {\n   *     console.error(err);\n   *   });\n   */\n  listOperationsStream(request, options) {\n    const callSettings = new gax.CallSettings(options);\n    return this.descriptor.listOperations.createStream(this.innerApiCalls.listOperations, request, callSettings);\n  }\n  /**\n   * Equivalent to {@link listOperations}, but returns an iterable object.\n   *\n   * for-await-of syntax is used with the iterable to recursively get response element on-demand.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize -\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   *   details.\n   * @returns {Object}\n   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.\n   */\n  listOperationsAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    const callSettings = new gax.CallSettings(options);\n    return this.descriptor.listOperations.asyncIterate(this.innerApiCalls.listOperations, request, callSettings);\n  }\n  /**\n   * Starts asynchronous cancellation on a long-running operation.  The server\n   * makes a best effort to cancel the operation, but success is not\n   * guaranteed.  If the server doesn't support this method, it returns\n   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n   * {@link Operations.GetOperation} or\n   * other methods to check whether the cancellation succeeded or whether the\n   * operation completed despite cancellation. On successful cancellation,\n   * the operation is not deleted; instead, it becomes an operation with\n   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n   * 1, corresponding to `Code.CANCELLED`.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource to be cancelled.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error)=} callback\n   *   The function which will be called with the result of the API call.\n   * @return {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * await client.cancelOperation({name: ''});\n   */\n  cancelOperation(request, optionsOrCallback, callback) {\n    let options;\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.cancelOperation(request, options, callback);\n  }\n  /**\n   * Deletes a long-running operation. This method indicates that the client is\n   * no longer interested in the operation result. It does not cancel the\n   * operation. If the server doesn't support this method, it returns\n   * `google.rpc.Code.UNIMPLEMENTED`.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource to be deleted.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error)=} callback\n   *   The function which will be called with the result of the API call.\n   * @return {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * await client.deleteOperation({name: ''});\n   */\n  deleteOperation(request, optionsOrCallback, callback) {\n    let options;\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    request = request || {};\n    options = options || {};\n    return this.innerApiCalls.deleteOperation(request, options, callback);\n  }\n}\nexports.OperationsClient = OperationsClient;\nclass OperationsClientBuilder {\n  /**\n   * Builds a new Operations Client\n   * @param gaxGrpc {GrpcClient}\n   */\n  constructor(gaxGrpc) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const operationsProtos = gaxGrpc.loadProtoJSON(protoJson);\n    /**\n     * Build a new instance of {@link OperationsClient}.\n     *\n     * @param {Object=} opts - The optional parameters.\n     * @param {String=} opts.servicePath - Domain name of the API remote host.\n     * @param {number=} opts.port - The port on which to connect to the remote host.\n     * @param {grpc.ClientCredentials=} opts.sslCreds - A ClientCredentials for use with an SSL-enabled channel.\n     * @param {Object=} opts.clientConfig - The customized config to build the call settings. See {@link gax.constructSettings} for the format.\n     */\n    this.operationsClient = opts => {\n      if (gaxGrpc.fallback) {\n        opts.fallback = true;\n      }\n      return new OperationsClient(gaxGrpc, operationsProtos, opts);\n    };\n    Object.assign(this.operationsClient, OperationsClient);\n  }\n}\nexports.OperationsClientBuilder = OperationsClientBuilder;","map":{"version":3,"names":["createApiCall_1","require","descriptor_1","gax","configData","protoJson","exports","SERVICE_ADDRESS","version","DEFAULT_SERVICE_PORT","CODE_GEN_NAME_VERSION","ALL_SCOPES","OperationsClient","constructor","gaxGrpc","operationsProtos","options","opts","Object","assign","servicePath","port","clientConfig","googleApiClient","process","versions","node","libName","libVersion","push","fallback","grpcVersion","defaults","constructSettings","join","auth","innerApiCalls","descriptor","listOperations","PageDescriptor","operationsStub","createStub","lookupService","google","longrunning","Operations","operationsStubMethods","methodName","innerCallPromise","then","stub","args","func","apply","err","createApiCall","close","getProjectId","callback","Error","Promise","reject","getOperationInternal","request","getOperation","optionsOrCallback","Function","undefined","listOperationsStream","callSettings","CallSettings","createStream","listOperationsAsync","asyncIterate","cancelOperation","deleteOperation","OperationsClientBuilder","loadProtoJSON","operationsClient"],"sources":["../../src/operationsClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}