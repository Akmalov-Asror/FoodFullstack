{"ast":null,"code":"\"use strict\";\n\n/**\n * Runtime message from/to plain object converters.\n * @namespace\n */\nvar converter = exports;\nvar Enum = require(\"./enum\"),\n  util = require(\"./util\");\n\n/**\n * Generates a partial value fromObject conveter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  if (field.resolvedType) {\n    if (field.resolvedType instanceof Enum) {\n      gen(\"switch(d%s){\", prop);\n      for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\n        if (field.repeated && values[keys[i]] === field.typeDefault) gen(\"default:\");\n        gen(\"case%j:\", keys[i])(\"case %i:\", values[keys[i]])(\"m%s=%j\", prop, values[keys[i]])(\"break\");\n      }\n      gen(\"}\");\n    } else gen(\"if(typeof d%s!==\\\"object\\\")\", prop)(\"throw TypeError(%j)\", field.fullName + \": object expected\")(\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\n  } else {\n    var isUnsigned = false;\n    switch (field.type) {\n      case \"double\":\n      case \"float\":\n        gen(\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\n        break;\n      case \"uint32\":\n      case \"fixed32\":\n        gen(\"m%s=d%s>>>0\", prop, prop);\n        break;\n      case \"int32\":\n      case \"sint32\":\n      case \"sfixed32\":\n        gen(\"m%s=d%s|0\", prop, prop);\n        break;\n      case \"uint64\":\n        isUnsigned = true;\n      // eslint-disable-line no-fallthrough\n      case \"int64\":\n      case \"sint64\":\n      case \"fixed64\":\n      case \"sfixed64\":\n        gen(\"if(util.Long)\")(\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)(\"else if(typeof d%s===\\\"string\\\")\", prop)(\"m%s=parseInt(d%s,10)\", prop, prop)(\"else if(typeof d%s===\\\"number\\\")\", prop)(\"m%s=d%s\", prop, prop)(\"else if(typeof d%s===\\\"object\\\")\", prop)(\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\n        break;\n      case \"bytes\":\n        gen(\"if(typeof d%s===\\\"string\\\")\", prop)(\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)(\"else if(d%s.length)\", prop)(\"m%s=d%s\", prop, prop);\n        break;\n      case \"string\":\n        gen(\"m%s=String(d%s)\", prop, prop);\n        break;\n      case \"bool\":\n        gen(\"m%s=Boolean(d%s)\", prop, prop);\n        break;\n      /* default: gen\n          (\"m%s=d%s\", prop, prop);\n          break; */\n    }\n  }\n\n  return gen;\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a plain object to runtime message converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.fromObject = function fromObject(mtype) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  var fields = mtype.fieldsArray;\n  var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")(\"if(d instanceof this.ctor)\")(\"return d\");\n  if (!fields.length) return gen(\"return new this.ctor\");\n  gen(\"var m=new this.ctor\");\n  for (var i = 0; i < fields.length; ++i) {\n    var field = fields[i].resolve(),\n      prop = util.safeProp(field.name);\n\n    // Map fields\n    if (field.map) {\n      gen(\"if(d%s){\", prop)(\"if(typeof d%s!==\\\"object\\\")\", prop)(\"throw TypeError(%j)\", field.fullName + \": object expected\")(\"m%s={}\", prop)(\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\n      genValuePartial_fromObject(gen, field, /* not sorted */i, prop + \"[ks[i]]\")(\"}\")(\"}\");\n\n      // Repeated fields\n    } else if (field.repeated) {\n      gen(\"if(d%s){\", prop)(\"if(!Array.isArray(d%s))\", prop)(\"throw TypeError(%j)\", field.fullName + \": array expected\")(\"m%s=[]\", prop)(\"for(var i=0;i<d%s.length;++i){\", prop);\n      genValuePartial_fromObject(gen, field, /* not sorted */i, prop + \"[i]\")(\"}\")(\"}\");\n\n      // Non-repeated fields\n    } else {\n      if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\n      (\"if(d%s!=null){\", prop); // !== undefined && !== null\n      genValuePartial_fromObject(gen, field, /* not sorted */i, prop);\n      if (!(field.resolvedType instanceof Enum)) gen(\"}\");\n    }\n  }\n  return gen(\"return m\");\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n\n/**\n * Generates a partial value toObject converter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  if (field.resolvedType) {\n    if (field.resolvedType instanceof Enum) gen(\"d%s=o.enums===String?types[%i].values[m%s]:m%s\", prop, fieldIndex, prop, prop);else gen(\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\n  } else {\n    var isUnsigned = false;\n    switch (field.type) {\n      case \"double\":\n      case \"float\":\n        gen(\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\n        break;\n      case \"uint64\":\n        isUnsigned = true;\n      // eslint-disable-line no-fallthrough\n      case \"int64\":\n      case \"sint64\":\n      case \"fixed64\":\n      case \"sfixed64\":\n        gen(\"if(typeof m%s===\\\"number\\\")\", prop)(\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)(\"else\") // Long-like\n        (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\" : \"\", prop);\n        break;\n      case \"bytes\":\n        gen(\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\n        break;\n      default:\n        gen(\"d%s=m%s\", prop, prop);\n        break;\n    }\n  }\n  return gen;\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a runtime message to plain object converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.toObject = function toObject(mtype) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\n  if (!fields.length) return util.codegen()(\"return {}\");\n  var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")(\"if(!o)\")(\"o={}\")(\"var d={}\");\n  var repeatedFields = [],\n    mapFields = [],\n    normalFields = [],\n    i = 0;\n  for (; i < fields.length; ++i) if (!fields[i].partOf) (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);\n  if (repeatedFields.length) {\n    gen(\"if(o.arrays||o.defaults){\");\n    for (i = 0; i < repeatedFields.length; ++i) gen(\"d%s=[]\", util.safeProp(repeatedFields[i].name));\n    gen(\"}\");\n  }\n  if (mapFields.length) {\n    gen(\"if(o.objects||o.defaults){\");\n    for (i = 0; i < mapFields.length; ++i) gen(\"d%s={}\", util.safeProp(mapFields[i].name));\n    gen(\"}\");\n  }\n  if (normalFields.length) {\n    gen(\"if(o.defaults){\");\n    for (i = 0; i < normalFields.length; ++i) {\n      var field = normalFields[i],\n        prop = util.safeProp(field.name);\n      if (field.resolvedType instanceof Enum) gen(\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);else if (field.long) gen(\"if(util.Long){\")(\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)(\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)(\"}else\")(\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());else if (field.bytes) {\n        var arrayDefault = \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\";\n        gen(\"if(o.bytes===String)d%s=%j\", prop, String.fromCharCode.apply(String, field.typeDefault))(\"else{\")(\"d%s=%s\", prop, arrayDefault)(\"if(o.bytes!==Array)d%s=util.newBuffer(d%s)\", prop, prop)(\"}\");\n      } else gen(\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\n    }\n    gen(\"}\");\n  }\n  var hasKs2 = false;\n  for (i = 0; i < fields.length; ++i) {\n    var field = fields[i],\n      index = mtype._fieldsArray.indexOf(field),\n      prop = util.safeProp(field.name);\n    if (field.map) {\n      if (!hasKs2) {\n        hasKs2 = true;\n        gen(\"var ks2\");\n      }\n      gen(\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)(\"d%s={}\", prop)(\"for(var j=0;j<ks2.length;++j){\");\n      genValuePartial_toObject(gen, field, /* sorted */index, prop + \"[ks2[j]]\")(\"}\");\n    } else if (field.repeated) {\n      gen(\"if(m%s&&m%s.length){\", prop, prop)(\"d%s=[]\", prop)(\"for(var j=0;j<m%s.length;++j){\", prop);\n      genValuePartial_toObject(gen, field, /* sorted */index, prop + \"[j]\")(\"}\");\n    } else {\n      gen(\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\n      genValuePartial_toObject(gen, field, /* sorted */index, prop);\n      if (field.partOf) gen(\"if(o.oneofs)\")(\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\n    }\n    gen(\"}\");\n  }\n  return gen(\"return d\");\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};","map":{"version":3,"names":["converter","exports","Enum","require","util","genValuePartial_fromObject","gen","field","fieldIndex","prop","resolvedType","values","keys","Object","i","length","repeated","typeDefault","fullName","isUnsigned","type","fromObject","mtype","fields","fieldsArray","codegen","name","resolve","safeProp","map","genValuePartial_toObject","toObject","slice","sort","compareFieldsById","repeatedFields","mapFields","normalFields","partOf","push","valuesById","long","low","high","unsigned","toString","toNumber","bytes","arrayDefault","Array","prototype","call","join","String","fromCharCode","apply","hasKs2","index","_fieldsArray","indexOf"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/google-gax/node_modules/protobufjs/src/converter.js"],"sourcesContent":["\"use strict\";\n/**\n * Runtime message from/to plain object converters.\n * @namespace\n */\nvar converter = exports;\n\nvar Enum = require(\"./enum\"),\n    util = require(\"./util\");\n\n/**\n * Generates a partial value fromObject conveter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) { gen\n            (\"switch(d%s){\", prop);\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\n                (\"default:\");\n                gen\n                (\"case%j:\", keys[i])\n                (\"case %i:\", values[keys[i]])\n                    (\"m%s=%j\", prop, values[keys[i]])\n                    (\"break\");\n            } gen\n            (\"}\");\n        } else gen\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\n            (\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch (field.type) {\n            case \"double\":\n            case \"float\": gen\n                (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\n                break;\n            case \"uint32\":\n            case \"fixed32\": gen\n                (\"m%s=d%s>>>0\", prop, prop);\n                break;\n            case \"int32\":\n            case \"sint32\":\n            case \"sfixed32\": gen\n                (\"m%s=d%s|0\", prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n                // eslint-disable-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"if(util.Long)\")\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\n                    (\"m%s=d%s\", prop, prop)\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\n                break;\n            case \"bytes\": gen\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\n                (\"else if(d%s.length)\", prop)\n                    (\"m%s=d%s\", prop, prop);\n                break;\n            case \"string\": gen\n                (\"m%s=String(d%s)\", prop, prop);\n                break;\n            case \"bool\": gen\n                (\"m%s=Boolean(d%s)\", prop, prop);\n                break;\n            /* default: gen\n                (\"m%s=d%s\", prop, prop);\n                break; */\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a plain object to runtime message converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.fromObject = function fromObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var fields = mtype.fieldsArray;\n    var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")\n    (\"if(d instanceof this.ctor)\")\n        (\"return d\");\n    if (!fields.length) return gen\n    (\"return new this.ctor\");\n    gen\n    (\"var m=new this.ctor\");\n    for (var i = 0; i < fields.length; ++i) {\n        var field  = fields[i].resolve(),\n            prop   = util.safeProp(field.name);\n\n        // Map fields\n        if (field.map) { gen\n    (\"if(d%s){\", prop)\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\n        (\"m%s={}\", prop)\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\n        (\"}\")\n    (\"}\");\n\n        // Repeated fields\n        } else if (field.repeated) { gen\n    (\"if(d%s){\", prop)\n        (\"if(!Array.isArray(d%s))\", prop)\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\n        (\"m%s=[]\", prop)\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\n        (\"}\")\n    (\"}\");\n\n        // Non-repeated fields\n        } else {\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\n    (\"if(d%s!=null){\", prop); // !== undefined && !== null\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\n            if (!(field.resolvedType instanceof Enum)) gen\n    (\"}\");\n        }\n    } return gen\n    (\"return m\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n\n/**\n * Generates a partial value toObject converter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) gen\n            (\"d%s=o.enums===String?types[%i].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\n        else gen\n            (\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch (field.type) {\n            case \"double\":\n            case \"float\": gen\n            (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n                // eslint-disable-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\n            (\"else\") // Long-like\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\n                break;\n            case \"bytes\": gen\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\n                break;\n            default: gen\n            (\"d%s=m%s\", prop, prop);\n                break;\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a runtime message to plain object converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.toObject = function toObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\n    if (!fields.length)\n        return util.codegen()(\"return {}\");\n    var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")\n    (\"if(!o)\")\n        (\"o={}\")\n    (\"var d={}\");\n\n    var repeatedFields = [],\n        mapFields = [],\n        normalFields = [],\n        i = 0;\n    for (; i < fields.length; ++i)\n        if (!fields[i].partOf)\n            ( fields[i].resolve().repeated ? repeatedFields\n            : fields[i].map ? mapFields\n            : normalFields).push(fields[i]);\n\n    if (repeatedFields.length) { gen\n    (\"if(o.arrays||o.defaults){\");\n        for (i = 0; i < repeatedFields.length; ++i) gen\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\n        gen\n    (\"}\");\n    }\n\n    if (mapFields.length) { gen\n    (\"if(o.objects||o.defaults){\");\n        for (i = 0; i < mapFields.length; ++i) gen\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\n        gen\n    (\"}\");\n    }\n\n    if (normalFields.length) { gen\n    (\"if(o.defaults){\");\n        for (i = 0; i < normalFields.length; ++i) {\n            var field = normalFields[i],\n                prop  = util.safeProp(field.name);\n            if (field.resolvedType instanceof Enum) gen\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\n            else if (field.long) gen\n        (\"if(util.Long){\")\n            (\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\n        (\"}else\")\n            (\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\n            else if (field.bytes) {\n                var arrayDefault = \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\";\n                gen\n        (\"if(o.bytes===String)d%s=%j\", prop, String.fromCharCode.apply(String, field.typeDefault))\n        (\"else{\")\n            (\"d%s=%s\", prop, arrayDefault)\n            (\"if(o.bytes!==Array)d%s=util.newBuffer(d%s)\", prop, prop)\n        (\"}\");\n            } else gen\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\n        } gen\n    (\"}\");\n    }\n    var hasKs2 = false;\n    for (i = 0; i < fields.length; ++i) {\n        var field = fields[i],\n            index = mtype._fieldsArray.indexOf(field),\n            prop  = util.safeProp(field.name);\n        if (field.map) {\n            if (!hasKs2) { hasKs2 = true; gen\n    (\"var ks2\");\n            } gen\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\n        (\"d%s={}\", prop)\n        (\"for(var j=0;j<ks2.length;++j){\");\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\n        (\"}\");\n        } else if (field.repeated) { gen\n    (\"if(m%s&&m%s.length){\", prop, prop)\n        (\"d%s=[]\", prop)\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\n        (\"}\");\n        } else { gen\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\n        if (field.partOf) gen\n        (\"if(o.oneofs)\")\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\n        }\n        gen\n    (\"}\");\n    }\n    return gen\n    (\"return d\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}