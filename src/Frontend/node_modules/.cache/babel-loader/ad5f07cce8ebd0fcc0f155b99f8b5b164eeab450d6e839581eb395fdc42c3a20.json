{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AwsRequestSigner = void 0;\nconst crypto_1 = require(\"../crypto/crypto\");\n/** AWS Signature Version 4 signing algorithm identifier.  */\nconst AWS_ALGORITHM = 'AWS4-HMAC-SHA256';\n/**\n * The termination string for the AWS credential scope value as defined in\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n */\nconst AWS_REQUEST_TYPE = 'aws4_request';\n/**\n * Implements an AWS API request signer based on the AWS Signature Version 4\n * signing process.\n * https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nclass AwsRequestSigner {\n  /**\n   * Instantiates an AWS API request signer used to send authenticated signed\n   * requests to AWS APIs based on the AWS Signature Version 4 signing process.\n   * This also provides a mechanism to generate the signed request without\n   * sending it.\n   * @param getCredentials A mechanism to retrieve AWS security credentials\n   *   when needed.\n   * @param region The AWS region to use.\n   */\n  constructor(getCredentials, region) {\n    this.getCredentials = getCredentials;\n    this.region = region;\n    this.crypto = crypto_1.createCrypto();\n  }\n  /**\n   * Generates the signed request for the provided HTTP request for calling\n   * an AWS API. This follows the steps described at:\n   * https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html\n   * @param amzOptions The AWS request options that need to be signed.\n   * @return A promise that resolves with the GaxiosOptions containing the\n   *   signed HTTP request parameters.\n   */\n  async getRequestOptions(amzOptions) {\n    if (!amzOptions.url) {\n      throw new Error('\"url\" is required in \"amzOptions\"');\n    }\n    // Stringify JSON requests. This will be set in the request body of the\n    // generated signed request.\n    const requestPayloadData = typeof amzOptions.data === 'object' ? JSON.stringify(amzOptions.data) : amzOptions.data;\n    const url = amzOptions.url;\n    const method = amzOptions.method || 'GET';\n    const requestPayload = amzOptions.body || requestPayloadData;\n    const additionalAmzHeaders = amzOptions.headers;\n    const awsSecurityCredentials = await this.getCredentials();\n    const uri = new URL(url);\n    const headerMap = await generateAuthenticationHeaderMap({\n      crypto: this.crypto,\n      host: uri.host,\n      canonicalUri: uri.pathname,\n      canonicalQuerystring: uri.search.substr(1),\n      method,\n      region: this.region,\n      securityCredentials: awsSecurityCredentials,\n      requestPayload,\n      additionalAmzHeaders\n    });\n    // Append additional optional headers, eg. X-Amz-Target, Content-Type, etc.\n    const headers = Object.assign(\n    // Add x-amz-date if available.\n    headerMap.amzDate ? {\n      'x-amz-date': headerMap.amzDate\n    } : {}, {\n      Authorization: headerMap.authorizationHeader,\n      host: uri.host\n    }, additionalAmzHeaders || {});\n    if (awsSecurityCredentials.token) {\n      Object.assign(headers, {\n        'x-amz-security-token': awsSecurityCredentials.token\n      });\n    }\n    const awsSignedReq = {\n      url,\n      method: method,\n      headers\n    };\n    if (typeof requestPayload !== 'undefined') {\n      awsSignedReq.body = requestPayload;\n    }\n    return awsSignedReq;\n  }\n}\nexports.AwsRequestSigner = AwsRequestSigner;\n/**\n * Creates the HMAC-SHA256 hash of the provided message using the\n * provided key.\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The HMAC-SHA256 key to use.\n * @param msg The message to hash.\n * @return The computed hash bytes.\n */\nasync function sign(crypto, key, msg) {\n  return await crypto.signWithHmacSha256(key, msg);\n}\n/**\n * Calculates the signing key used to calculate the signature for\n * AWS Signature Version 4 based on:\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The AWS secret access key.\n * @param dateStamp The '%Y%m%d' date format.\n * @param region The AWS region.\n * @param serviceName The AWS service name, eg. sts.\n * @return The signing key bytes.\n */\nasync function getSigningKey(crypto, key, dateStamp, region, serviceName) {\n  const kDate = await sign(crypto, `AWS4${key}`, dateStamp);\n  const kRegion = await sign(crypto, kDate, region);\n  const kService = await sign(crypto, kRegion, serviceName);\n  const kSigning = await sign(crypto, kService, 'aws4_request');\n  return kSigning;\n}\n/**\n * Generates the authentication header map needed for generating the AWS\n * Signature Version 4 signed request.\n *\n * @param option The options needed to compute the authentication header map.\n * @return The AWS authentication header map which constitutes of the following\n *   components: amz-date, authorization header and canonical query string.\n */\nasync function generateAuthenticationHeaderMap(options) {\n  const additionalAmzHeaders = options.additionalAmzHeaders || {};\n  const requestPayload = options.requestPayload || '';\n  // iam.amazonaws.com host => iam service.\n  // sts.us-east-2.amazonaws.com => sts service.\n  const serviceName = options.host.split('.')[0];\n  const now = new Date();\n  // Format: '%Y%m%dT%H%M%SZ'.\n  const amzDate = now.toISOString().replace(/[-:]/g, '').replace(/\\.[0-9]+/, '');\n  // Format: '%Y%m%d'.\n  const dateStamp = now.toISOString().replace(/[-]/g, '').replace(/T.*/, '');\n  // Change all additional headers to be lower case.\n  const reformattedAdditionalAmzHeaders = {};\n  Object.keys(additionalAmzHeaders).forEach(key => {\n    reformattedAdditionalAmzHeaders[key.toLowerCase()] = additionalAmzHeaders[key];\n  });\n  // Add AWS token if available.\n  if (options.securityCredentials.token) {\n    reformattedAdditionalAmzHeaders['x-amz-security-token'] = options.securityCredentials.token;\n  }\n  // Header keys need to be sorted alphabetically.\n  const amzHeaders = Object.assign({\n    host: options.host\n  },\n  // Previously the date was not fixed with x-amz- and could be provided manually.\n  // https://github.com/boto/botocore/blob/879f8440a4e9ace5d3cf145ce8b3d5e5ffb892ef/tests/unit/auth/aws4_testsuite/get-header-value-trim.req\n  reformattedAdditionalAmzHeaders.date ? {} : {\n    'x-amz-date': amzDate\n  }, reformattedAdditionalAmzHeaders);\n  let canonicalHeaders = '';\n  const signedHeadersList = Object.keys(amzHeaders).sort();\n  signedHeadersList.forEach(key => {\n    canonicalHeaders += `${key}:${amzHeaders[key]}\\n`;\n  });\n  const signedHeaders = signedHeadersList.join(';');\n  const payloadHash = await options.crypto.sha256DigestHex(requestPayload);\n  // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n  const canonicalRequest = `${options.method}\\n` + `${options.canonicalUri}\\n` + `${options.canonicalQuerystring}\\n` + `${canonicalHeaders}\\n` + `${signedHeaders}\\n` + `${payloadHash}`;\n  const credentialScope = `${dateStamp}/${options.region}/${serviceName}/${AWS_REQUEST_TYPE}`;\n  // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n  const stringToSign = `${AWS_ALGORITHM}\\n` + `${amzDate}\\n` + `${credentialScope}\\n` + (await options.crypto.sha256DigestHex(canonicalRequest));\n  // https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n  const signingKey = await getSigningKey(options.crypto, options.securityCredentials.secretAccessKey, dateStamp, options.region, serviceName);\n  const signature = await sign(options.crypto, signingKey, stringToSign);\n  // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n  const authorizationHeader = `${AWS_ALGORITHM} Credential=${options.securityCredentials.accessKeyId}/` + `${credentialScope}, SignedHeaders=${signedHeaders}, ` + `Signature=${crypto_1.fromArrayBufferToHex(signature)}`;\n  return {\n    // Do not return x-amz-date if date is available.\n    amzDate: reformattedAdditionalAmzHeaders.date ? undefined : amzDate,\n    authorizationHeader,\n    canonicalQuerystring: options.canonicalQuerystring\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","AwsRequestSigner","crypto_1","require","AWS_ALGORITHM","AWS_REQUEST_TYPE","constructor","getCredentials","region","crypto","createCrypto","getRequestOptions","amzOptions","url","Error","requestPayloadData","data","JSON","stringify","method","requestPayload","body","additionalAmzHeaders","headers","awsSecurityCredentials","uri","URL","headerMap","generateAuthenticationHeaderMap","host","canonicalUri","pathname","canonicalQuerystring","search","substr","securityCredentials","assign","amzDate","Authorization","authorizationHeader","token","awsSignedReq","sign","key","msg","signWithHmacSha256","getSigningKey","dateStamp","serviceName","kDate","kRegion","kService","kSigning","options","split","now","Date","toISOString","replace","reformattedAdditionalAmzHeaders","keys","forEach","toLowerCase","amzHeaders","date","canonicalHeaders","signedHeadersList","sort","signedHeaders","join","payloadHash","sha256DigestHex","canonicalRequest","credentialScope","stringToSign","signingKey","secretAccessKey","signature","accessKeyId","fromArrayBufferToHex","undefined"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/google-auth-library/build/src/auth/awsrequestsigner.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AwsRequestSigner = void 0;\nconst crypto_1 = require(\"../crypto/crypto\");\n/** AWS Signature Version 4 signing algorithm identifier.  */\nconst AWS_ALGORITHM = 'AWS4-HMAC-SHA256';\n/**\n * The termination string for the AWS credential scope value as defined in\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n */\nconst AWS_REQUEST_TYPE = 'aws4_request';\n/**\n * Implements an AWS API request signer based on the AWS Signature Version 4\n * signing process.\n * https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nclass AwsRequestSigner {\n    /**\n     * Instantiates an AWS API request signer used to send authenticated signed\n     * requests to AWS APIs based on the AWS Signature Version 4 signing process.\n     * This also provides a mechanism to generate the signed request without\n     * sending it.\n     * @param getCredentials A mechanism to retrieve AWS security credentials\n     *   when needed.\n     * @param region The AWS region to use.\n     */\n    constructor(getCredentials, region) {\n        this.getCredentials = getCredentials;\n        this.region = region;\n        this.crypto = crypto_1.createCrypto();\n    }\n    /**\n     * Generates the signed request for the provided HTTP request for calling\n     * an AWS API. This follows the steps described at:\n     * https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html\n     * @param amzOptions The AWS request options that need to be signed.\n     * @return A promise that resolves with the GaxiosOptions containing the\n     *   signed HTTP request parameters.\n     */\n    async getRequestOptions(amzOptions) {\n        if (!amzOptions.url) {\n            throw new Error('\"url\" is required in \"amzOptions\"');\n        }\n        // Stringify JSON requests. This will be set in the request body of the\n        // generated signed request.\n        const requestPayloadData = typeof amzOptions.data === 'object'\n            ? JSON.stringify(amzOptions.data)\n            : amzOptions.data;\n        const url = amzOptions.url;\n        const method = amzOptions.method || 'GET';\n        const requestPayload = amzOptions.body || requestPayloadData;\n        const additionalAmzHeaders = amzOptions.headers;\n        const awsSecurityCredentials = await this.getCredentials();\n        const uri = new URL(url);\n        const headerMap = await generateAuthenticationHeaderMap({\n            crypto: this.crypto,\n            host: uri.host,\n            canonicalUri: uri.pathname,\n            canonicalQuerystring: uri.search.substr(1),\n            method,\n            region: this.region,\n            securityCredentials: awsSecurityCredentials,\n            requestPayload,\n            additionalAmzHeaders,\n        });\n        // Append additional optional headers, eg. X-Amz-Target, Content-Type, etc.\n        const headers = Object.assign(\n        // Add x-amz-date if available.\n        headerMap.amzDate ? { 'x-amz-date': headerMap.amzDate } : {}, {\n            Authorization: headerMap.authorizationHeader,\n            host: uri.host,\n        }, additionalAmzHeaders || {});\n        if (awsSecurityCredentials.token) {\n            Object.assign(headers, {\n                'x-amz-security-token': awsSecurityCredentials.token,\n            });\n        }\n        const awsSignedReq = {\n            url,\n            method: method,\n            headers,\n        };\n        if (typeof requestPayload !== 'undefined') {\n            awsSignedReq.body = requestPayload;\n        }\n        return awsSignedReq;\n    }\n}\nexports.AwsRequestSigner = AwsRequestSigner;\n/**\n * Creates the HMAC-SHA256 hash of the provided message using the\n * provided key.\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The HMAC-SHA256 key to use.\n * @param msg The message to hash.\n * @return The computed hash bytes.\n */\nasync function sign(crypto, key, msg) {\n    return await crypto.signWithHmacSha256(key, msg);\n}\n/**\n * Calculates the signing key used to calculate the signature for\n * AWS Signature Version 4 based on:\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The AWS secret access key.\n * @param dateStamp The '%Y%m%d' date format.\n * @param region The AWS region.\n * @param serviceName The AWS service name, eg. sts.\n * @return The signing key bytes.\n */\nasync function getSigningKey(crypto, key, dateStamp, region, serviceName) {\n    const kDate = await sign(crypto, `AWS4${key}`, dateStamp);\n    const kRegion = await sign(crypto, kDate, region);\n    const kService = await sign(crypto, kRegion, serviceName);\n    const kSigning = await sign(crypto, kService, 'aws4_request');\n    return kSigning;\n}\n/**\n * Generates the authentication header map needed for generating the AWS\n * Signature Version 4 signed request.\n *\n * @param option The options needed to compute the authentication header map.\n * @return The AWS authentication header map which constitutes of the following\n *   components: amz-date, authorization header and canonical query string.\n */\nasync function generateAuthenticationHeaderMap(options) {\n    const additionalAmzHeaders = options.additionalAmzHeaders || {};\n    const requestPayload = options.requestPayload || '';\n    // iam.amazonaws.com host => iam service.\n    // sts.us-east-2.amazonaws.com => sts service.\n    const serviceName = options.host.split('.')[0];\n    const now = new Date();\n    // Format: '%Y%m%dT%H%M%SZ'.\n    const amzDate = now\n        .toISOString()\n        .replace(/[-:]/g, '')\n        .replace(/\\.[0-9]+/, '');\n    // Format: '%Y%m%d'.\n    const dateStamp = now.toISOString().replace(/[-]/g, '').replace(/T.*/, '');\n    // Change all additional headers to be lower case.\n    const reformattedAdditionalAmzHeaders = {};\n    Object.keys(additionalAmzHeaders).forEach(key => {\n        reformattedAdditionalAmzHeaders[key.toLowerCase()] =\n            additionalAmzHeaders[key];\n    });\n    // Add AWS token if available.\n    if (options.securityCredentials.token) {\n        reformattedAdditionalAmzHeaders['x-amz-security-token'] =\n            options.securityCredentials.token;\n    }\n    // Header keys need to be sorted alphabetically.\n    const amzHeaders = Object.assign({\n        host: options.host,\n    }, \n    // Previously the date was not fixed with x-amz- and could be provided manually.\n    // https://github.com/boto/botocore/blob/879f8440a4e9ace5d3cf145ce8b3d5e5ffb892ef/tests/unit/auth/aws4_testsuite/get-header-value-trim.req\n    reformattedAdditionalAmzHeaders.date ? {} : { 'x-amz-date': amzDate }, reformattedAdditionalAmzHeaders);\n    let canonicalHeaders = '';\n    const signedHeadersList = Object.keys(amzHeaders).sort();\n    signedHeadersList.forEach(key => {\n        canonicalHeaders += `${key}:${amzHeaders[key]}\\n`;\n    });\n    const signedHeaders = signedHeadersList.join(';');\n    const payloadHash = await options.crypto.sha256DigestHex(requestPayload);\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n    const canonicalRequest = `${options.method}\\n` +\n        `${options.canonicalUri}\\n` +\n        `${options.canonicalQuerystring}\\n` +\n        `${canonicalHeaders}\\n` +\n        `${signedHeaders}\\n` +\n        `${payloadHash}`;\n    const credentialScope = `${dateStamp}/${options.region}/${serviceName}/${AWS_REQUEST_TYPE}`;\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n    const stringToSign = `${AWS_ALGORITHM}\\n` +\n        `${amzDate}\\n` +\n        `${credentialScope}\\n` +\n        (await options.crypto.sha256DigestHex(canonicalRequest));\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n    const signingKey = await getSigningKey(options.crypto, options.securityCredentials.secretAccessKey, dateStamp, options.region, serviceName);\n    const signature = await sign(options.crypto, signingKey, stringToSign);\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n    const authorizationHeader = `${AWS_ALGORITHM} Credential=${options.securityCredentials.accessKeyId}/` +\n        `${credentialScope}, SignedHeaders=${signedHeaders}, ` +\n        `Signature=${crypto_1.fromArrayBufferToHex(signature)}`;\n    return {\n        // Do not return x-amz-date if date is available.\n        amzDate: reformattedAdditionalAmzHeaders.date ? undefined : amzDate,\n        authorizationHeader,\n        canonicalQuerystring: options.canonicalQuerystring,\n    };\n}\n//# sourceMappingURL=awsrequestsigner.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}