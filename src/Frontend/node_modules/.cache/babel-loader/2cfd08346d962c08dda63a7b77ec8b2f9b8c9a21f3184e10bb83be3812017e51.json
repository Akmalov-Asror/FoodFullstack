{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Type;\n\n// extends Namespace\nvar Namespace = require(\"./namespace\");\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\nvar Enum = require(\"./enum\"),\n  OneOf = require(\"./oneof\"),\n  Field = require(\"./field\"),\n  MapField = require(\"./mapfield\"),\n  Service = require(\"./service\"),\n  Message = require(\"./message\"),\n  Reader = require(\"./reader\"),\n  Writer = require(\"./writer\"),\n  util = require(\"./util\"),\n  encoder = require(\"./encoder\"),\n  decoder = require(\"./decoder\"),\n  verifier = require(\"./verifier\"),\n  converter = require(\"./converter\"),\n  wrappers = require(\"./wrappers\");\n\n/**\n * Constructs a new reflected message type instance.\n * @classdesc Reflected message type.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Message name\n * @param {Object.<string,*>} [options] Declared options\n */\nfunction Type(name, options) {\n  Namespace.call(this, name, options);\n\n  /**\n   * Message fields.\n   * @type {Object.<string,Field>}\n   */\n  this.fields = {}; // toJSON, marker\n\n  /**\n   * Oneofs declared within this namespace, if any.\n   * @type {Object.<string,OneOf>}\n   */\n  this.oneofs = undefined; // toJSON\n\n  /**\n   * Extension ranges, if any.\n   * @type {number[][]}\n   */\n  this.extensions = undefined; // toJSON\n\n  /**\n   * Reserved ranges, if any.\n   * @type {Array.<number[]|string>}\n   */\n  this.reserved = undefined; // toJSON\n\n  /*?\n   * Whether this type is a legacy group.\n   * @type {boolean|undefined}\n   */\n  this.group = undefined; // toJSON\n\n  /**\n   * Cached fields by id.\n   * @type {Object.<number,Field>|null}\n   * @private\n   */\n  this._fieldsById = null;\n\n  /**\n   * Cached fields as an array.\n   * @type {Field[]|null}\n   * @private\n   */\n  this._fieldsArray = null;\n\n  /**\n   * Cached oneofs as an array.\n   * @type {OneOf[]|null}\n   * @private\n   */\n  this._oneofsArray = null;\n\n  /**\n   * Cached constructor.\n   * @type {Constructor<{}>}\n   * @private\n   */\n  this._ctor = null;\n}\nObject.defineProperties(Type.prototype, {\n  /**\n   * Message fields by id.\n   * @name Type#fieldsById\n   * @type {Object.<number,Field>}\n   * @readonly\n   */\n  fieldsById: {\n    get: function () {\n      /* istanbul ignore if */\n      if (this._fieldsById) return this._fieldsById;\n      this._fieldsById = {};\n      for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\n        var field = this.fields[names[i]],\n          id = field.id;\n\n        /* istanbul ignore if */\n        if (this._fieldsById[id]) throw Error(\"duplicate id \" + id + \" in \" + this);\n        this._fieldsById[id] = field;\n      }\n      return this._fieldsById;\n    }\n  },\n  /**\n   * Fields of this message as an array for iteration.\n   * @name Type#fieldsArray\n   * @type {Field[]}\n   * @readonly\n   */\n  fieldsArray: {\n    get: function () {\n      return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\n    }\n  },\n  /**\n   * Oneofs of this message as an array for iteration.\n   * @name Type#oneofsArray\n   * @type {OneOf[]}\n   * @readonly\n   */\n  oneofsArray: {\n    get: function () {\n      return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\n    }\n  },\n  /**\n   * The registered constructor, if any registered, otherwise a generic constructor.\n   * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\n   * @name Type#ctor\n   * @type {Constructor<{}>}\n   */\n  ctor: {\n    get: function () {\n      return this._ctor || (this.ctor = Type.generateConstructor(this)());\n    },\n    set: function (ctor) {\n      // Ensure proper prototype\n      var prototype = ctor.prototype;\n      if (!(prototype instanceof Message)) {\n        (ctor.prototype = new Message()).constructor = ctor;\n        util.merge(ctor.prototype, prototype);\n      }\n\n      // Classes and messages reference their reflected type\n      ctor.$type = ctor.prototype.$type = this;\n\n      // Mix in static methods\n      util.merge(ctor, Message, true);\n      this._ctor = ctor;\n\n      // Messages have non-enumerable default values on their prototype\n      var i = 0;\n      for (; i < /* initializes */this.fieldsArray.length; ++i) this._fieldsArray[i].resolve(); // ensures a proper value\n\n      // Messages have non-enumerable getters and setters for each virtual oneof field\n      var ctorProperties = {};\n      for (i = 0; i < /* initializes */this.oneofsArray.length; ++i) ctorProperties[this._oneofsArray[i].resolve().name] = {\n        get: util.oneOfGetter(this._oneofsArray[i].oneof),\n        set: util.oneOfSetter(this._oneofsArray[i].oneof)\n      };\n      if (i) Object.defineProperties(ctor.prototype, ctorProperties);\n    }\n  }\n});\n\n/**\n * Generates a constructor function for the specified type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nType.generateConstructor = function generateConstructor(mtype) {\n  /* eslint-disable no-unexpected-multiline */\n  var gen = util.codegen([\"p\"], mtype.name);\n  // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\n  for (var i = 0, field; i < mtype.fieldsArray.length; ++i) if ((field = mtype._fieldsArray[i]).map) gen(\"this%s={}\", util.safeProp(field.name));else if (field.repeated) gen(\"this%s=[]\", util.safeProp(field.name));\n  return gen(\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\n  (\"this[ks[i]]=p[ks[i]]\");\n  /* eslint-enable no-unexpected-multiline */\n};\n\nfunction clearCache(type) {\n  type._fieldsById = type._fieldsArray = type._oneofsArray = null;\n  delete type.encode;\n  delete type.decode;\n  delete type.verify;\n  return type;\n}\n\n/**\n * Message type descriptor.\n * @interface IType\n * @extends INamespace\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\n * @property {Object.<string,IField>} fields Field descriptors\n * @property {number[][]} [extensions] Extension ranges\n * @property {number[][]} [reserved] Reserved ranges\n * @property {boolean} [group=false] Whether a legacy group or not\n */\n\n/**\n * Creates a message type from a message type descriptor.\n * @param {string} name Message name\n * @param {IType} json Message type descriptor\n * @returns {Type} Created message type\n */\nType.fromJSON = function fromJSON(name, json) {\n  var type = new Type(name, json.options);\n  type.extensions = json.extensions;\n  type.reserved = json.reserved;\n  var names = Object.keys(json.fields),\n    i = 0;\n  for (; i < names.length; ++i) type.add((typeof json.fields[names[i]].keyType !== \"undefined\" ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]]));\n  if (json.oneofs) for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i) type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\n  if (json.nested) for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\n    var nested = json.nested[names[i]];\n    type.add(\n    // most to least likely\n    (nested.id !== undefined ? Field.fromJSON : nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : Namespace.fromJSON)(names[i], nested));\n  }\n  if (json.extensions && json.extensions.length) type.extensions = json.extensions;\n  if (json.reserved && json.reserved.length) type.reserved = json.reserved;\n  if (json.group) type.group = true;\n  if (json.comment) type.comment = json.comment;\n  return type;\n};\n\n/**\n * Converts this message type to a message type descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IType} Message type descriptor\n */\nType.prototype.toJSON = function toJSON(toJSONOptions) {\n  var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", inherited && inherited.options || undefined, \"oneofs\", Namespace.arrayToJSON(this.oneofsArray, toJSONOptions), \"fields\", Namespace.arrayToJSON(this.fieldsArray.filter(function (obj) {\n    return !obj.declaringField;\n  }), toJSONOptions) || {}, \"extensions\", this.extensions && this.extensions.length ? this.extensions : undefined, \"reserved\", this.reserved && this.reserved.length ? this.reserved : undefined, \"group\", this.group || undefined, \"nested\", inherited && inherited.nested || undefined, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\n * @override\n */\nType.prototype.resolveAll = function resolveAll() {\n  var fields = this.fieldsArray,\n    i = 0;\n  while (i < fields.length) fields[i++].resolve();\n  var oneofs = this.oneofsArray;\n  i = 0;\n  while (i < oneofs.length) oneofs[i++].resolve();\n  return Namespace.prototype.resolveAll.call(this);\n};\n\n/**\n * @override\n */\nType.prototype.get = function get(name) {\n  return this.fields[name] || this.oneofs && this.oneofs[name] || this.nested && this.nested[name] || null;\n};\n\n/**\n * Adds a nested object to this type.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\n */\nType.prototype.add = function add(object) {\n  if (this.get(object.name)) throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n  if (object instanceof Field && object.extend === undefined) {\n    // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\n    // The root object takes care of adding distinct sister-fields to the respective extended\n    // type instead.\n\n    // avoids calling the getter if not absolutely necessary because it's called quite frequently\n    if (this._fieldsById ? /* istanbul ignore next */this._fieldsById[object.id] : this.fieldsById[object.id]) throw Error(\"duplicate id \" + object.id + \" in \" + this);\n    if (this.isReservedId(object.id)) throw Error(\"id \" + object.id + \" is reserved in \" + this);\n    if (this.isReservedName(object.name)) throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\n    if (object.parent) object.parent.remove(object);\n    this.fields[object.name] = object;\n    object.message = this;\n    object.onAdd(this);\n    return clearCache(this);\n  }\n  if (object instanceof OneOf) {\n    if (!this.oneofs) this.oneofs = {};\n    this.oneofs[object.name] = object;\n    object.onAdd(this);\n    return clearCache(this);\n  }\n  return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * Removes a nested object from this type.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this type\n */\nType.prototype.remove = function remove(object) {\n  if (object instanceof Field && object.extend === undefined) {\n    // See Type#add for the reason why extension fields are excluded here.\n\n    /* istanbul ignore if */\n    if (!this.fields || this.fields[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n    delete this.fields[object.name];\n    object.parent = null;\n    object.onRemove(this);\n    return clearCache(this);\n  }\n  if (object instanceof OneOf) {\n    /* istanbul ignore if */\n    if (!this.oneofs || this.oneofs[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n    delete this.oneofs[object.name];\n    object.parent = null;\n    object.onRemove(this);\n    return clearCache(this);\n  }\n  return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedId = function isReservedId(id) {\n  return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedName = function isReservedName(name) {\n  return Namespace.isReservedName(this.reserved, name);\n};\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<{}>} Message instance\n */\nType.prototype.create = function create(properties) {\n  return new this.ctor(properties);\n};\n\n/**\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\n * @returns {Type} `this`\n */\nType.prototype.setup = function setup() {\n  // Sets up everything at once so that the prototype chain does not have to be re-evaluated\n  // multiple times (V8, soft-deopt prototype-check).\n\n  var fullName = this.fullName,\n    types = [];\n  for (var i = 0; i < /* initializes */this.fieldsArray.length; ++i) types.push(this._fieldsArray[i].resolve().resolvedType);\n\n  // Replace setup methods with type-specific generated functions\n  this.encode = encoder(this)({\n    Writer: Writer,\n    types: types,\n    util: util\n  });\n  this.decode = decoder(this)({\n    Reader: Reader,\n    types: types,\n    util: util\n  });\n  this.verify = verifier(this)({\n    types: types,\n    util: util\n  });\n  this.fromObject = converter.fromObject(this)({\n    types: types,\n    util: util\n  });\n  this.toObject = converter.toObject(this)({\n    types: types,\n    util: util\n  });\n\n  // Inject custom wrappers for common types\n  var wrapper = wrappers[fullName];\n  if (wrapper) {\n    var originalThis = Object.create(this);\n    // if (wrapper.fromObject) {\n    originalThis.fromObject = this.fromObject;\n    this.fromObject = wrapper.fromObject.bind(originalThis);\n    // }\n    // if (wrapper.toObject) {\n    originalThis.toObject = this.toObject;\n    this.toObject = wrapper.toObject.bind(originalThis);\n    // }\n  }\n\n  return this;\n};\n\n/**\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encode = function encode_setup(message, writer) {\n  return this.setup().encode(message, writer); // overrides this method\n};\n\n/**\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\n  return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\n};\n\n/**\n * Decodes a message of this type.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @param {number} [length] Length of the message, if known beforehand\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError<{}>} If required fields are missing\n */\nType.prototype.decode = function decode_setup(reader, length) {\n  return this.setup().decode(reader, length); // overrides this method\n};\n\n/**\n * Decodes a message of this type preceeded by its byte length as a varint.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError} If required fields are missing\n */\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\n  if (!(reader instanceof Reader)) reader = Reader.create(reader);\n  return this.decode(reader, reader.uint32());\n};\n\n/**\n * Verifies that field values are valid and that required fields are present.\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\n */\nType.prototype.verify = function verify_setup(message) {\n  return this.setup().verify(message); // overrides this method\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object to convert\n * @returns {Message<{}>} Message instance\n */\nType.prototype.fromObject = function fromObject(object) {\n  return this.setup().fromObject(object);\n};\n\n/**\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\n * @interface IConversionOptions\n * @property {Function} [longs] Long conversion type.\n * Valid values are `String` and `Number` (the global types).\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\n * @property {Function} [enums] Enum value conversion type.\n * Only valid value is `String` (the global type).\n * Defaults to copy the present value, which is the numeric id.\n * @property {Function} [bytes] Bytes value conversion type.\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\n */\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n */\nType.prototype.toObject = function toObject(message, options) {\n  return this.setup().toObject(message, options);\n};\n\n/**\n * Decorator function as returned by {@link Type.d} (TypeScript).\n * @typedef TypeDecorator\n * @type {function}\n * @param {Constructor<T>} target Target constructor\n * @returns {undefined}\n * @template T extends Message<T>\n */\n\n/**\n * Type decorator (TypeScript).\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {TypeDecorator<T>} Decorator function\n * @template T extends Message<T>\n */\nType.d = function decorateType(typeName) {\n  return function typeDecorator(target) {\n    util.decorateType(target, typeName);\n  };\n};","map":{"version":3,"names":["module","exports","Type","Namespace","require","prototype","Object","create","constructor","className","Enum","OneOf","Field","MapField","Service","Message","Reader","Writer","util","encoder","decoder","verifier","converter","wrappers","name","options","call","fields","oneofs","undefined","extensions","reserved","group","_fieldsById","_fieldsArray","_oneofsArray","_ctor","defineProperties","fieldsById","get","names","keys","i","length","field","id","Error","fieldsArray","toArray","oneofsArray","ctor","generateConstructor","set","merge","$type","resolve","ctorProperties","oneOfGetter","oneof","oneOfSetter","mtype","gen","codegen","map","safeProp","repeated","clearCache","type","encode","decode","verify","fromJSON","json","add","keyType","nested","values","methods","comment","toJSON","toJSONOptions","inherited","keepComments","Boolean","toObject","arrayToJSON","filter","obj","declaringField","resolveAll","object","extend","isReservedId","isReservedName","parent","remove","message","onAdd","onRemove","properties","setup","fullName","types","push","resolvedType","fromObject","wrapper","originalThis","bind","encode_setup","writer","encodeDelimited","len","fork","ldelim","decode_setup","reader","decodeDelimited","uint32","verify_setup","d","decorateType","typeName","typeDecorator","target"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/google-gax/node_modules/protobufjs/src/type.js"],"sourcesContent":["\"use strict\";\nmodule.exports = Type;\n\n// extends Namespace\nvar Namespace = require(\"./namespace\");\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\n\nvar Enum      = require(\"./enum\"),\n    OneOf     = require(\"./oneof\"),\n    Field     = require(\"./field\"),\n    MapField  = require(\"./mapfield\"),\n    Service   = require(\"./service\"),\n    Message   = require(\"./message\"),\n    Reader    = require(\"./reader\"),\n    Writer    = require(\"./writer\"),\n    util      = require(\"./util\"),\n    encoder   = require(\"./encoder\"),\n    decoder   = require(\"./decoder\"),\n    verifier  = require(\"./verifier\"),\n    converter = require(\"./converter\"),\n    wrappers  = require(\"./wrappers\");\n\n/**\n * Constructs a new reflected message type instance.\n * @classdesc Reflected message type.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Message name\n * @param {Object.<string,*>} [options] Declared options\n */\nfunction Type(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Message fields.\n     * @type {Object.<string,Field>}\n     */\n    this.fields = {};  // toJSON, marker\n\n    /**\n     * Oneofs declared within this namespace, if any.\n     * @type {Object.<string,OneOf>}\n     */\n    this.oneofs = undefined; // toJSON\n\n    /**\n     * Extension ranges, if any.\n     * @type {number[][]}\n     */\n    this.extensions = undefined; // toJSON\n\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */\n    this.reserved = undefined; // toJSON\n\n    /*?\n     * Whether this type is a legacy group.\n     * @type {boolean|undefined}\n     */\n    this.group = undefined; // toJSON\n\n    /**\n     * Cached fields by id.\n     * @type {Object.<number,Field>|null}\n     * @private\n     */\n    this._fieldsById = null;\n\n    /**\n     * Cached fields as an array.\n     * @type {Field[]|null}\n     * @private\n     */\n    this._fieldsArray = null;\n\n    /**\n     * Cached oneofs as an array.\n     * @type {OneOf[]|null}\n     * @private\n     */\n    this._oneofsArray = null;\n\n    /**\n     * Cached constructor.\n     * @type {Constructor<{}>}\n     * @private\n     */\n    this._ctor = null;\n}\n\nObject.defineProperties(Type.prototype, {\n\n    /**\n     * Message fields by id.\n     * @name Type#fieldsById\n     * @type {Object.<number,Field>}\n     * @readonly\n     */\n    fieldsById: {\n        get: function() {\n\n            /* istanbul ignore if */\n            if (this._fieldsById)\n                return this._fieldsById;\n\n            this._fieldsById = {};\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\n                var field = this.fields[names[i]],\n                    id = field.id;\n\n                /* istanbul ignore if */\n                if (this._fieldsById[id])\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\n\n                this._fieldsById[id] = field;\n            }\n            return this._fieldsById;\n        }\n    },\n\n    /**\n     * Fields of this message as an array for iteration.\n     * @name Type#fieldsArray\n     * @type {Field[]}\n     * @readonly\n     */\n    fieldsArray: {\n        get: function() {\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\n        }\n    },\n\n    /**\n     * Oneofs of this message as an array for iteration.\n     * @name Type#oneofsArray\n     * @type {OneOf[]}\n     * @readonly\n     */\n    oneofsArray: {\n        get: function() {\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\n        }\n    },\n\n    /**\n     * The registered constructor, if any registered, otherwise a generic constructor.\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\n     * @name Type#ctor\n     * @type {Constructor<{}>}\n     */\n    ctor: {\n        get: function() {\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\n        },\n        set: function(ctor) {\n\n            // Ensure proper prototype\n            var prototype = ctor.prototype;\n            if (!(prototype instanceof Message)) {\n                (ctor.prototype = new Message()).constructor = ctor;\n                util.merge(ctor.prototype, prototype);\n            }\n\n            // Classes and messages reference their reflected type\n            ctor.$type = ctor.prototype.$type = this;\n\n            // Mix in static methods\n            util.merge(ctor, Message, true);\n\n            this._ctor = ctor;\n\n            // Messages have non-enumerable default values on their prototype\n            var i = 0;\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\n                this._fieldsArray[i].resolve(); // ensures a proper value\n\n            // Messages have non-enumerable getters and setters for each virtual oneof field\n            var ctorProperties = {};\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\n                };\n            if (i)\n                Object.defineProperties(ctor.prototype, ctorProperties);\n        }\n    }\n});\n\n/**\n * Generates a constructor function for the specified type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nType.generateConstructor = function generateConstructor(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n    var gen = util.codegen([\"p\"], mtype.name);\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\n    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\n        if ((field = mtype._fieldsArray[i]).map) gen\n            (\"this%s={}\", util.safeProp(field.name));\n        else if (field.repeated) gen\n            (\"this%s=[]\", util.safeProp(field.name));\n    return gen\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\n        (\"this[ks[i]]=p[ks[i]]\");\n    /* eslint-enable no-unexpected-multiline */\n};\n\nfunction clearCache(type) {\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\n    delete type.encode;\n    delete type.decode;\n    delete type.verify;\n    return type;\n}\n\n/**\n * Message type descriptor.\n * @interface IType\n * @extends INamespace\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\n * @property {Object.<string,IField>} fields Field descriptors\n * @property {number[][]} [extensions] Extension ranges\n * @property {number[][]} [reserved] Reserved ranges\n * @property {boolean} [group=false] Whether a legacy group or not\n */\n\n/**\n * Creates a message type from a message type descriptor.\n * @param {string} name Message name\n * @param {IType} json Message type descriptor\n * @returns {Type} Created message type\n */\nType.fromJSON = function fromJSON(name, json) {\n    var type = new Type(name, json.options);\n    type.extensions = json.extensions;\n    type.reserved = json.reserved;\n    var names = Object.keys(json.fields),\n        i = 0;\n    for (; i < names.length; ++i)\n        type.add(\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\n            ? MapField.fromJSON\n            : Field.fromJSON )(names[i], json.fields[names[i]])\n        );\n    if (json.oneofs)\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\n    if (json.nested)\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\n            var nested = json.nested[names[i]];\n            type.add( // most to least likely\n                ( nested.id !== undefined\n                ? Field.fromJSON\n                : nested.fields !== undefined\n                ? Type.fromJSON\n                : nested.values !== undefined\n                ? Enum.fromJSON\n                : nested.methods !== undefined\n                ? Service.fromJSON\n                : Namespace.fromJSON )(names[i], nested)\n            );\n        }\n    if (json.extensions && json.extensions.length)\n        type.extensions = json.extensions;\n    if (json.reserved && json.reserved.length)\n        type.reserved = json.reserved;\n    if (json.group)\n        type.group = true;\n    if (json.comment)\n        type.comment = json.comment;\n    return type;\n};\n\n/**\n * Converts this message type to a message type descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IType} Message type descriptor\n */\nType.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\"    , inherited && inherited.options || undefined,\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"group\"      , this.group || undefined,\n        \"nested\"     , inherited && inherited.nested || undefined,\n        \"comment\"    , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nType.prototype.resolveAll = function resolveAll() {\n    var fields = this.fieldsArray, i = 0;\n    while (i < fields.length)\n        fields[i++].resolve();\n    var oneofs = this.oneofsArray; i = 0;\n    while (i < oneofs.length)\n        oneofs[i++].resolve();\n    return Namespace.prototype.resolveAll.call(this);\n};\n\n/**\n * @override\n */\nType.prototype.get = function get(name) {\n    return this.fields[name]\n        || this.oneofs && this.oneofs[name]\n        || this.nested && this.nested[name]\n        || null;\n};\n\n/**\n * Adds a nested object to this type.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\n */\nType.prototype.add = function add(object) {\n\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Field && object.extend === undefined) {\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\n        // The root object takes care of adding distinct sister-fields to the respective extended\n        // type instead.\n\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\n        if (this.isReservedId(object.id))\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\n        if (this.isReservedName(object.name))\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\n\n        if (object.parent)\n            object.parent.remove(object);\n        this.fields[object.name] = object;\n        object.message = this;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n        if (!this.oneofs)\n            this.oneofs = {};\n        this.oneofs[object.name] = object;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * Removes a nested object from this type.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this type\n */\nType.prototype.remove = function remove(object) {\n    if (object instanceof Field && object.extend === undefined) {\n        // See Type#add for the reason why extension fields are excluded here.\n\n        /* istanbul ignore if */\n        if (!this.fields || this.fields[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.fields[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n\n        /* istanbul ignore if */\n        if (!this.oneofs || this.oneofs[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.oneofs[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<{}>} Message instance\n */\nType.prototype.create = function create(properties) {\n    return new this.ctor(properties);\n};\n\n/**\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\n * @returns {Type} `this`\n */\nType.prototype.setup = function setup() {\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\n    // multiple times (V8, soft-deopt prototype-check).\n\n    var fullName = this.fullName,\n        types    = [];\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\n        types.push(this._fieldsArray[i].resolve().resolvedType);\n\n    // Replace setup methods with type-specific generated functions\n    this.encode = encoder(this)({\n        Writer : Writer,\n        types  : types,\n        util   : util\n    });\n    this.decode = decoder(this)({\n        Reader : Reader,\n        types  : types,\n        util   : util\n    });\n    this.verify = verifier(this)({\n        types : types,\n        util  : util\n    });\n    this.fromObject = converter.fromObject(this)({\n        types : types,\n        util  : util\n    });\n    this.toObject = converter.toObject(this)({\n        types : types,\n        util  : util\n    });\n\n    // Inject custom wrappers for common types\n    var wrapper = wrappers[fullName];\n    if (wrapper) {\n        var originalThis = Object.create(this);\n        // if (wrapper.fromObject) {\n            originalThis.fromObject = this.fromObject;\n            this.fromObject = wrapper.fromObject.bind(originalThis);\n        // }\n        // if (wrapper.toObject) {\n            originalThis.toObject = this.toObject;\n            this.toObject = wrapper.toObject.bind(originalThis);\n        // }\n    }\n\n    return this;\n};\n\n/**\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encode = function encode_setup(message, writer) {\n    return this.setup().encode(message, writer); // overrides this method\n};\n\n/**\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\n};\n\n/**\n * Decodes a message of this type.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @param {number} [length] Length of the message, if known beforehand\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError<{}>} If required fields are missing\n */\nType.prototype.decode = function decode_setup(reader, length) {\n    return this.setup().decode(reader, length); // overrides this method\n};\n\n/**\n * Decodes a message of this type preceeded by its byte length as a varint.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError} If required fields are missing\n */\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof Reader))\n        reader = Reader.create(reader);\n    return this.decode(reader, reader.uint32());\n};\n\n/**\n * Verifies that field values are valid and that required fields are present.\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\n */\nType.prototype.verify = function verify_setup(message) {\n    return this.setup().verify(message); // overrides this method\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object to convert\n * @returns {Message<{}>} Message instance\n */\nType.prototype.fromObject = function fromObject(object) {\n    return this.setup().fromObject(object);\n};\n\n/**\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\n * @interface IConversionOptions\n * @property {Function} [longs] Long conversion type.\n * Valid values are `String` and `Number` (the global types).\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\n * @property {Function} [enums] Enum value conversion type.\n * Only valid value is `String` (the global type).\n * Defaults to copy the present value, which is the numeric id.\n * @property {Function} [bytes] Bytes value conversion type.\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\n */\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n */\nType.prototype.toObject = function toObject(message, options) {\n    return this.setup().toObject(message, options);\n};\n\n/**\n * Decorator function as returned by {@link Type.d} (TypeScript).\n * @typedef TypeDecorator\n * @type {function}\n * @param {Constructor<T>} target Target constructor\n * @returns {undefined}\n * @template T extends Message<T>\n */\n\n/**\n * Type decorator (TypeScript).\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {TypeDecorator<T>} Decorator function\n * @template T extends Message<T>\n */\nType.d = function decorateType(typeName) {\n    return function typeDecorator(target) {\n        util.decorateType(target, typeName);\n    };\n};\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,OAAO,GAAGC,IAAI;;AAErB;AACA,IAAIC,SAAS,GAAGC,OAAO,CAAC,aAAa,CAAC;AACtC,CAAC,CAACF,IAAI,CAACG,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACJ,SAAS,CAACE,SAAS,CAAC,EAAEG,WAAW,GAAGN,IAAI,EAAEO,SAAS,GAAG,MAAM;AAE7F,IAAIC,IAAI,GAAQN,OAAO,CAAC,QAAQ,CAAC;EAC7BO,KAAK,GAAOP,OAAO,CAAC,SAAS,CAAC;EAC9BQ,KAAK,GAAOR,OAAO,CAAC,SAAS,CAAC;EAC9BS,QAAQ,GAAIT,OAAO,CAAC,YAAY,CAAC;EACjCU,OAAO,GAAKV,OAAO,CAAC,WAAW,CAAC;EAChCW,OAAO,GAAKX,OAAO,CAAC,WAAW,CAAC;EAChCY,MAAM,GAAMZ,OAAO,CAAC,UAAU,CAAC;EAC/Ba,MAAM,GAAMb,OAAO,CAAC,UAAU,CAAC;EAC/Bc,IAAI,GAAQd,OAAO,CAAC,QAAQ,CAAC;EAC7Be,OAAO,GAAKf,OAAO,CAAC,WAAW,CAAC;EAChCgB,OAAO,GAAKhB,OAAO,CAAC,WAAW,CAAC;EAChCiB,QAAQ,GAAIjB,OAAO,CAAC,YAAY,CAAC;EACjCkB,SAAS,GAAGlB,OAAO,CAAC,aAAa,CAAC;EAClCmB,QAAQ,GAAInB,OAAO,CAAC,YAAY,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,IAAIA,CAACsB,IAAI,EAAEC,OAAO,EAAE;EACzBtB,SAAS,CAACuB,IAAI,CAAC,IAAI,EAAEF,IAAI,EAAEC,OAAO,CAAC;;EAEnC;AACJ;AACA;AACA;EACI,IAAI,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC,CAAE;;EAEnB;AACJ;AACA;AACA;EACI,IAAI,CAACC,MAAM,GAAGC,SAAS,CAAC,CAAC;;EAEzB;AACJ;AACA;AACA;EACI,IAAI,CAACC,UAAU,GAAGD,SAAS,CAAC,CAAC;;EAE7B;AACJ;AACA;AACA;EACI,IAAI,CAACE,QAAQ,GAAGF,SAAS,CAAC,CAAC;;EAE3B;AACJ;AACA;AACA;EACI,IAAI,CAACG,KAAK,GAAGH,SAAS,CAAC,CAAC;;EAExB;AACJ;AACA;AACA;AACA;EACI,IAAI,CAACI,WAAW,GAAG,IAAI;;EAEvB;AACJ;AACA;AACA;AACA;EACI,IAAI,CAACC,YAAY,GAAG,IAAI;;EAExB;AACJ;AACA;AACA;AACA;EACI,IAAI,CAACC,YAAY,GAAG,IAAI;;EAExB;AACJ;AACA;AACA;AACA;EACI,IAAI,CAACC,KAAK,GAAG,IAAI;AACrB;AAEA9B,MAAM,CAAC+B,gBAAgB,CAACnC,IAAI,CAACG,SAAS,EAAE;EAEpC;AACJ;AACA;AACA;AACA;AACA;EACIiC,UAAU,EAAE;IACRC,GAAG,EAAE,SAAAA,CAAA,EAAW;MAEZ;MACA,IAAI,IAAI,CAACN,WAAW,EAChB,OAAO,IAAI,CAACA,WAAW;MAE3B,IAAI,CAACA,WAAW,GAAG,CAAC,CAAC;MACrB,KAAK,IAAIO,KAAK,GAAGlC,MAAM,CAACmC,IAAI,CAAC,IAAI,CAACd,MAAM,CAAC,EAAEe,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;QACrE,IAAIE,KAAK,GAAG,IAAI,CAACjB,MAAM,CAACa,KAAK,CAACE,CAAC,CAAC,CAAC;UAC7BG,EAAE,GAAGD,KAAK,CAACC,EAAE;;QAEjB;QACA,IAAI,IAAI,CAACZ,WAAW,CAACY,EAAE,CAAC,EACpB,MAAMC,KAAK,CAAC,eAAe,GAAGD,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC;QAErD,IAAI,CAACZ,WAAW,CAACY,EAAE,CAAC,GAAGD,KAAK;MAChC;MACA,OAAO,IAAI,CAACX,WAAW;IAC3B;EACJ,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACIc,WAAW,EAAE;IACTR,GAAG,EAAE,SAAAA,CAAA,EAAW;MACZ,OAAO,IAAI,CAACL,YAAY,KAAK,IAAI,CAACA,YAAY,GAAGhB,IAAI,CAAC8B,OAAO,CAAC,IAAI,CAACrB,MAAM,CAAC,CAAC;IAC/E;EACJ,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACIsB,WAAW,EAAE;IACTV,GAAG,EAAE,SAAAA,CAAA,EAAW;MACZ,OAAO,IAAI,CAACJ,YAAY,KAAK,IAAI,CAACA,YAAY,GAAGjB,IAAI,CAAC8B,OAAO,CAAC,IAAI,CAACpB,MAAM,CAAC,CAAC;IAC/E;EACJ,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACIsB,IAAI,EAAE;IACFX,GAAG,EAAE,SAAAA,CAAA,EAAW;MACZ,OAAO,IAAI,CAACH,KAAK,KAAK,IAAI,CAACc,IAAI,GAAGhD,IAAI,CAACiD,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACvE,CAAC;IACDC,GAAG,EAAE,SAAAA,CAASF,IAAI,EAAE;MAEhB;MACA,IAAI7C,SAAS,GAAG6C,IAAI,CAAC7C,SAAS;MAC9B,IAAI,EAAEA,SAAS,YAAYU,OAAO,CAAC,EAAE;QACjC,CAACmC,IAAI,CAAC7C,SAAS,GAAG,IAAIU,OAAO,CAAC,CAAC,EAAEP,WAAW,GAAG0C,IAAI;QACnDhC,IAAI,CAACmC,KAAK,CAACH,IAAI,CAAC7C,SAAS,EAAEA,SAAS,CAAC;MACzC;;MAEA;MACA6C,IAAI,CAACI,KAAK,GAAGJ,IAAI,CAAC7C,SAAS,CAACiD,KAAK,GAAG,IAAI;;MAExC;MACApC,IAAI,CAACmC,KAAK,CAACH,IAAI,EAAEnC,OAAO,EAAE,IAAI,CAAC;MAE/B,IAAI,CAACqB,KAAK,GAAGc,IAAI;;MAEjB;MACA,IAAIR,CAAC,GAAG,CAAC;MACT,OAAOA,CAAC,GAAG,iBAAkB,IAAI,CAACK,WAAW,CAACJ,MAAM,EAAE,EAAED,CAAC,EACrD,IAAI,CAACR,YAAY,CAACQ,CAAC,CAAC,CAACa,OAAO,CAAC,CAAC,CAAC,CAAC;;MAEpC;MACA,IAAIC,cAAc,GAAG,CAAC,CAAC;MACvB,KAAKd,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,iBAAkB,IAAI,CAACO,WAAW,CAACN,MAAM,EAAE,EAAED,CAAC,EAC1Dc,cAAc,CAAC,IAAI,CAACrB,YAAY,CAACO,CAAC,CAAC,CAACa,OAAO,CAAC,CAAC,CAAC/B,IAAI,CAAC,GAAG;QAClDe,GAAG,EAAErB,IAAI,CAACuC,WAAW,CAAC,IAAI,CAACtB,YAAY,CAACO,CAAC,CAAC,CAACgB,KAAK,CAAC;QACjDN,GAAG,EAAElC,IAAI,CAACyC,WAAW,CAAC,IAAI,CAACxB,YAAY,CAACO,CAAC,CAAC,CAACgB,KAAK;MACpD,CAAC;MACL,IAAIhB,CAAC,EACDpC,MAAM,CAAC+B,gBAAgB,CAACa,IAAI,CAAC7C,SAAS,EAAEmD,cAAc,CAAC;IAC/D;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACAtD,IAAI,CAACiD,mBAAmB,GAAG,SAASA,mBAAmBA,CAACS,KAAK,EAAE;EAC3D;EACA,IAAIC,GAAG,GAAG3C,IAAI,CAAC4C,OAAO,CAAC,CAAC,GAAG,CAAC,EAAEF,KAAK,CAACpC,IAAI,CAAC;EACzC;EACA,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEE,KAAK,EAAEF,CAAC,GAAGkB,KAAK,CAACb,WAAW,CAACJ,MAAM,EAAE,EAAED,CAAC,EACpD,IAAI,CAACE,KAAK,GAAGgB,KAAK,CAAC1B,YAAY,CAACQ,CAAC,CAAC,EAAEqB,GAAG,EAAEF,GAAG,CACvC,WAAW,EAAE3C,IAAI,CAAC8C,QAAQ,CAACpB,KAAK,CAACpB,IAAI,CAAC,CAAC,CAAC,KACxC,IAAIoB,KAAK,CAACqB,QAAQ,EAAEJ,GAAG,CACvB,WAAW,EAAE3C,IAAI,CAAC8C,QAAQ,CAACpB,KAAK,CAACpB,IAAI,CAAC,CAAC;EAChD,OAAOqC,GAAG,CACT,uEAAuE,CAAC,CAAC;EAAA,CACrE,sBAAsB,CAAC;EAC5B;AACJ,CAAC;;AAED,SAASK,UAAUA,CAACC,IAAI,EAAE;EACtBA,IAAI,CAAClC,WAAW,GAAGkC,IAAI,CAACjC,YAAY,GAAGiC,IAAI,CAAChC,YAAY,GAAG,IAAI;EAC/D,OAAOgC,IAAI,CAACC,MAAM;EAClB,OAAOD,IAAI,CAACE,MAAM;EAClB,OAAOF,IAAI,CAACG,MAAM;EAClB,OAAOH,IAAI;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAjE,IAAI,CAACqE,QAAQ,GAAG,SAASA,QAAQA,CAAC/C,IAAI,EAAEgD,IAAI,EAAE;EAC1C,IAAIL,IAAI,GAAG,IAAIjE,IAAI,CAACsB,IAAI,EAAEgD,IAAI,CAAC/C,OAAO,CAAC;EACvC0C,IAAI,CAACrC,UAAU,GAAG0C,IAAI,CAAC1C,UAAU;EACjCqC,IAAI,CAACpC,QAAQ,GAAGyC,IAAI,CAACzC,QAAQ;EAC7B,IAAIS,KAAK,GAAGlC,MAAM,CAACmC,IAAI,CAAC+B,IAAI,CAAC7C,MAAM,CAAC;IAChCe,CAAC,GAAG,CAAC;EACT,OAAOA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAE,EAAED,CAAC,EACxByB,IAAI,CAACM,GAAG,CACJ,CAAE,OAAOD,IAAI,CAAC7C,MAAM,CAACa,KAAK,CAACE,CAAC,CAAC,CAAC,CAACgC,OAAO,KAAK,WAAW,GACpD7D,QAAQ,CAAC0D,QAAQ,GACjB3D,KAAK,CAAC2D,QAAQ,EAAG/B,KAAK,CAACE,CAAC,CAAC,EAAE8B,IAAI,CAAC7C,MAAM,CAACa,KAAK,CAACE,CAAC,CAAC,CAAC,CACtD,CAAC;EACL,IAAI8B,IAAI,CAAC5C,MAAM,EACX,KAAKY,KAAK,GAAGlC,MAAM,CAACmC,IAAI,CAAC+B,IAAI,CAAC5C,MAAM,CAAC,EAAEc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAE,EAAED,CAAC,EAC/DyB,IAAI,CAACM,GAAG,CAAC9D,KAAK,CAAC4D,QAAQ,CAAC/B,KAAK,CAACE,CAAC,CAAC,EAAE8B,IAAI,CAAC5C,MAAM,CAACY,KAAK,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC;EACjE,IAAI8B,IAAI,CAACG,MAAM,EACX,KAAKnC,KAAK,GAAGlC,MAAM,CAACmC,IAAI,CAAC+B,IAAI,CAACG,MAAM,CAAC,EAAEjC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;IACjE,IAAIiC,MAAM,GAAGH,IAAI,CAACG,MAAM,CAACnC,KAAK,CAACE,CAAC,CAAC,CAAC;IAClCyB,IAAI,CAACM,GAAG;IAAE;IACN,CAAEE,MAAM,CAAC9B,EAAE,KAAKhB,SAAS,GACvBjB,KAAK,CAAC2D,QAAQ,GACdI,MAAM,CAAChD,MAAM,KAAKE,SAAS,GAC3B3B,IAAI,CAACqE,QAAQ,GACbI,MAAM,CAACC,MAAM,KAAK/C,SAAS,GAC3BnB,IAAI,CAAC6D,QAAQ,GACbI,MAAM,CAACE,OAAO,KAAKhD,SAAS,GAC5Bf,OAAO,CAACyD,QAAQ,GAChBpE,SAAS,CAACoE,QAAQ,EAAG/B,KAAK,CAACE,CAAC,CAAC,EAAEiC,MAAM,CAC3C,CAAC;EACL;EACJ,IAAIH,IAAI,CAAC1C,UAAU,IAAI0C,IAAI,CAAC1C,UAAU,CAACa,MAAM,EACzCwB,IAAI,CAACrC,UAAU,GAAG0C,IAAI,CAAC1C,UAAU;EACrC,IAAI0C,IAAI,CAACzC,QAAQ,IAAIyC,IAAI,CAACzC,QAAQ,CAACY,MAAM,EACrCwB,IAAI,CAACpC,QAAQ,GAAGyC,IAAI,CAACzC,QAAQ;EACjC,IAAIyC,IAAI,CAACxC,KAAK,EACVmC,IAAI,CAACnC,KAAK,GAAG,IAAI;EACrB,IAAIwC,IAAI,CAACM,OAAO,EACZX,IAAI,CAACW,OAAO,GAAGN,IAAI,CAACM,OAAO;EAC/B,OAAOX,IAAI;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAjE,IAAI,CAACG,SAAS,CAAC0E,MAAM,GAAG,SAASA,MAAMA,CAACC,aAAa,EAAE;EACnD,IAAIC,SAAS,GAAG9E,SAAS,CAACE,SAAS,CAAC0E,MAAM,CAACrD,IAAI,CAAC,IAAI,EAAEsD,aAAa,CAAC;EACpE,IAAIE,YAAY,GAAGF,aAAa,GAAGG,OAAO,CAACH,aAAa,CAACE,YAAY,CAAC,GAAG,KAAK;EAC9E,OAAOhE,IAAI,CAACkE,QAAQ,CAAC,CACjB,SAAS,EAAMH,SAAS,IAAIA,SAAS,CAACxD,OAAO,IAAII,SAAS,EAC1D,QAAQ,EAAO1B,SAAS,CAACkF,WAAW,CAAC,IAAI,CAACpC,WAAW,EAAE+B,aAAa,CAAC,EACrE,QAAQ,EAAO7E,SAAS,CAACkF,WAAW,CAAC,IAAI,CAACtC,WAAW,CAACuC,MAAM,CAAC,UAASC,GAAG,EAAE;IAAE,OAAO,CAACA,GAAG,CAACC,cAAc;EAAE,CAAC,CAAC,EAAER,aAAa,CAAC,IAAI,CAAC,CAAC,EACjI,YAAY,EAAG,IAAI,CAAClD,UAAU,IAAI,IAAI,CAACA,UAAU,CAACa,MAAM,GAAG,IAAI,CAACb,UAAU,GAAGD,SAAS,EACtF,UAAU,EAAK,IAAI,CAACE,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAACY,MAAM,GAAG,IAAI,CAACZ,QAAQ,GAAGF,SAAS,EAChF,OAAO,EAAQ,IAAI,CAACG,KAAK,IAAIH,SAAS,EACtC,QAAQ,EAAOoD,SAAS,IAAIA,SAAS,CAACN,MAAM,IAAI9C,SAAS,EACzD,SAAS,EAAMqD,YAAY,GAAG,IAAI,CAACJ,OAAO,GAAGjD,SAAS,CACzD,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACA3B,IAAI,CAACG,SAAS,CAACoF,UAAU,GAAG,SAASA,UAAUA,CAAA,EAAG;EAC9C,IAAI9D,MAAM,GAAG,IAAI,CAACoB,WAAW;IAAEL,CAAC,GAAG,CAAC;EACpC,OAAOA,CAAC,GAAGf,MAAM,CAACgB,MAAM,EACpBhB,MAAM,CAACe,CAAC,EAAE,CAAC,CAACa,OAAO,CAAC,CAAC;EACzB,IAAI3B,MAAM,GAAG,IAAI,CAACqB,WAAW;EAAEP,CAAC,GAAG,CAAC;EACpC,OAAOA,CAAC,GAAGd,MAAM,CAACe,MAAM,EACpBf,MAAM,CAACc,CAAC,EAAE,CAAC,CAACa,OAAO,CAAC,CAAC;EACzB,OAAOpD,SAAS,CAACE,SAAS,CAACoF,UAAU,CAAC/D,IAAI,CAAC,IAAI,CAAC;AACpD,CAAC;;AAED;AACA;AACA;AACAxB,IAAI,CAACG,SAAS,CAACkC,GAAG,GAAG,SAASA,GAAGA,CAACf,IAAI,EAAE;EACpC,OAAO,IAAI,CAACG,MAAM,CAACH,IAAI,CAAC,IACjB,IAAI,CAACI,MAAM,IAAI,IAAI,CAACA,MAAM,CAACJ,IAAI,CAAC,IAChC,IAAI,CAACmD,MAAM,IAAI,IAAI,CAACA,MAAM,CAACnD,IAAI,CAAC,IAChC,IAAI;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAtB,IAAI,CAACG,SAAS,CAACoE,GAAG,GAAG,SAASA,GAAGA,CAACiB,MAAM,EAAE;EAEtC,IAAI,IAAI,CAACnD,GAAG,CAACmD,MAAM,CAAClE,IAAI,CAAC,EACrB,MAAMsB,KAAK,CAAC,kBAAkB,GAAG4C,MAAM,CAAClE,IAAI,GAAG,OAAO,GAAG,IAAI,CAAC;EAElE,IAAIkE,MAAM,YAAY9E,KAAK,IAAI8E,MAAM,CAACC,MAAM,KAAK9D,SAAS,EAAE;IACxD;IACA;IACA;;IAEA;IACA,IAAI,IAAI,CAACI,WAAW,GAAG,0BAA2B,IAAI,CAACA,WAAW,CAACyD,MAAM,CAAC7C,EAAE,CAAC,GAAG,IAAI,CAACP,UAAU,CAACoD,MAAM,CAAC7C,EAAE,CAAC,EACtG,MAAMC,KAAK,CAAC,eAAe,GAAG4C,MAAM,CAAC7C,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC;IAC5D,IAAI,IAAI,CAAC+C,YAAY,CAACF,MAAM,CAAC7C,EAAE,CAAC,EAC5B,MAAMC,KAAK,CAAC,KAAK,GAAG4C,MAAM,CAAC7C,EAAE,GAAG,kBAAkB,GAAG,IAAI,CAAC;IAC9D,IAAI,IAAI,CAACgD,cAAc,CAACH,MAAM,CAAClE,IAAI,CAAC,EAChC,MAAMsB,KAAK,CAAC,QAAQ,GAAG4C,MAAM,CAAClE,IAAI,GAAG,mBAAmB,GAAG,IAAI,CAAC;IAEpE,IAAIkE,MAAM,CAACI,MAAM,EACbJ,MAAM,CAACI,MAAM,CAACC,MAAM,CAACL,MAAM,CAAC;IAChC,IAAI,CAAC/D,MAAM,CAAC+D,MAAM,CAAClE,IAAI,CAAC,GAAGkE,MAAM;IACjCA,MAAM,CAACM,OAAO,GAAG,IAAI;IACrBN,MAAM,CAACO,KAAK,CAAC,IAAI,CAAC;IAClB,OAAO/B,UAAU,CAAC,IAAI,CAAC;EAC3B;EACA,IAAIwB,MAAM,YAAY/E,KAAK,EAAE;IACzB,IAAI,CAAC,IAAI,CAACiB,MAAM,EACZ,IAAI,CAACA,MAAM,GAAG,CAAC,CAAC;IACpB,IAAI,CAACA,MAAM,CAAC8D,MAAM,CAAClE,IAAI,CAAC,GAAGkE,MAAM;IACjCA,MAAM,CAACO,KAAK,CAAC,IAAI,CAAC;IAClB,OAAO/B,UAAU,CAAC,IAAI,CAAC;EAC3B;EACA,OAAO/D,SAAS,CAACE,SAAS,CAACoE,GAAG,CAAC/C,IAAI,CAAC,IAAI,EAAEgE,MAAM,CAAC;AACrD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAxF,IAAI,CAACG,SAAS,CAAC0F,MAAM,GAAG,SAASA,MAAMA,CAACL,MAAM,EAAE;EAC5C,IAAIA,MAAM,YAAY9E,KAAK,IAAI8E,MAAM,CAACC,MAAM,KAAK9D,SAAS,EAAE;IACxD;;IAEA;IACA,IAAI,CAAC,IAAI,CAACF,MAAM,IAAI,IAAI,CAACA,MAAM,CAAC+D,MAAM,CAAClE,IAAI,CAAC,KAAKkE,MAAM,EACnD,MAAM5C,KAAK,CAAC4C,MAAM,GAAG,sBAAsB,GAAG,IAAI,CAAC;IAEvD,OAAO,IAAI,CAAC/D,MAAM,CAAC+D,MAAM,CAAClE,IAAI,CAAC;IAC/BkE,MAAM,CAACI,MAAM,GAAG,IAAI;IACpBJ,MAAM,CAACQ,QAAQ,CAAC,IAAI,CAAC;IACrB,OAAOhC,UAAU,CAAC,IAAI,CAAC;EAC3B;EACA,IAAIwB,MAAM,YAAY/E,KAAK,EAAE;IAEzB;IACA,IAAI,CAAC,IAAI,CAACiB,MAAM,IAAI,IAAI,CAACA,MAAM,CAAC8D,MAAM,CAAClE,IAAI,CAAC,KAAKkE,MAAM,EACnD,MAAM5C,KAAK,CAAC4C,MAAM,GAAG,sBAAsB,GAAG,IAAI,CAAC;IAEvD,OAAO,IAAI,CAAC9D,MAAM,CAAC8D,MAAM,CAAClE,IAAI,CAAC;IAC/BkE,MAAM,CAACI,MAAM,GAAG,IAAI;IACpBJ,MAAM,CAACQ,QAAQ,CAAC,IAAI,CAAC;IACrB,OAAOhC,UAAU,CAAC,IAAI,CAAC;EAC3B;EACA,OAAO/D,SAAS,CAACE,SAAS,CAAC0F,MAAM,CAACrE,IAAI,CAAC,IAAI,EAAEgE,MAAM,CAAC;AACxD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAxF,IAAI,CAACG,SAAS,CAACuF,YAAY,GAAG,SAASA,YAAYA,CAAC/C,EAAE,EAAE;EACpD,OAAO1C,SAAS,CAACyF,YAAY,CAAC,IAAI,CAAC7D,QAAQ,EAAEc,EAAE,CAAC;AACpD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA3C,IAAI,CAACG,SAAS,CAACwF,cAAc,GAAG,SAASA,cAAcA,CAACrE,IAAI,EAAE;EAC1D,OAAOrB,SAAS,CAAC0F,cAAc,CAAC,IAAI,CAAC9D,QAAQ,EAAEP,IAAI,CAAC;AACxD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAtB,IAAI,CAACG,SAAS,CAACE,MAAM,GAAG,SAASA,MAAMA,CAAC4F,UAAU,EAAE;EAChD,OAAO,IAAI,IAAI,CAACjD,IAAI,CAACiD,UAAU,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACAjG,IAAI,CAACG,SAAS,CAAC+F,KAAK,GAAG,SAASA,KAAKA,CAAA,EAAG;EACpC;EACA;;EAEA,IAAIC,QAAQ,GAAG,IAAI,CAACA,QAAQ;IACxBC,KAAK,GAAM,EAAE;EACjB,KAAK,IAAI5D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,iBAAkB,IAAI,CAACK,WAAW,CAACJ,MAAM,EAAE,EAAED,CAAC,EAC9D4D,KAAK,CAACC,IAAI,CAAC,IAAI,CAACrE,YAAY,CAACQ,CAAC,CAAC,CAACa,OAAO,CAAC,CAAC,CAACiD,YAAY,CAAC;;EAE3D;EACA,IAAI,CAACpC,MAAM,GAAGjD,OAAO,CAAC,IAAI,CAAC,CAAC;IACxBF,MAAM,EAAGA,MAAM;IACfqF,KAAK,EAAIA,KAAK;IACdpF,IAAI,EAAKA;EACb,CAAC,CAAC;EACF,IAAI,CAACmD,MAAM,GAAGjD,OAAO,CAAC,IAAI,CAAC,CAAC;IACxBJ,MAAM,EAAGA,MAAM;IACfsF,KAAK,EAAIA,KAAK;IACdpF,IAAI,EAAKA;EACb,CAAC,CAAC;EACF,IAAI,CAACoD,MAAM,GAAGjD,QAAQ,CAAC,IAAI,CAAC,CAAC;IACzBiF,KAAK,EAAGA,KAAK;IACbpF,IAAI,EAAIA;EACZ,CAAC,CAAC;EACF,IAAI,CAACuF,UAAU,GAAGnF,SAAS,CAACmF,UAAU,CAAC,IAAI,CAAC,CAAC;IACzCH,KAAK,EAAGA,KAAK;IACbpF,IAAI,EAAIA;EACZ,CAAC,CAAC;EACF,IAAI,CAACkE,QAAQ,GAAG9D,SAAS,CAAC8D,QAAQ,CAAC,IAAI,CAAC,CAAC;IACrCkB,KAAK,EAAGA,KAAK;IACbpF,IAAI,EAAIA;EACZ,CAAC,CAAC;;EAEF;EACA,IAAIwF,OAAO,GAAGnF,QAAQ,CAAC8E,QAAQ,CAAC;EAChC,IAAIK,OAAO,EAAE;IACT,IAAIC,YAAY,GAAGrG,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IACtC;IACIoG,YAAY,CAACF,UAAU,GAAG,IAAI,CAACA,UAAU;IACzC,IAAI,CAACA,UAAU,GAAGC,OAAO,CAACD,UAAU,CAACG,IAAI,CAACD,YAAY,CAAC;IAC3D;IACA;IACIA,YAAY,CAACvB,QAAQ,GAAG,IAAI,CAACA,QAAQ;IACrC,IAAI,CAACA,QAAQ,GAAGsB,OAAO,CAACtB,QAAQ,CAACwB,IAAI,CAACD,YAAY,CAAC;IACvD;EACJ;;EAEA,OAAO,IAAI;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAzG,IAAI,CAACG,SAAS,CAAC+D,MAAM,GAAG,SAASyC,YAAYA,CAACb,OAAO,EAAEc,MAAM,EAAE;EAC3D,OAAO,IAAI,CAACV,KAAK,CAAC,CAAC,CAAChC,MAAM,CAAC4B,OAAO,EAAEc,MAAM,CAAC,CAAC,CAAC;AACjD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA5G,IAAI,CAACG,SAAS,CAAC0G,eAAe,GAAG,SAASA,eAAeA,CAACf,OAAO,EAAEc,MAAM,EAAE;EACvE,OAAO,IAAI,CAAC1C,MAAM,CAAC4B,OAAO,EAAEc,MAAM,IAAIA,MAAM,CAACE,GAAG,GAAGF,MAAM,CAACG,IAAI,CAAC,CAAC,GAAGH,MAAM,CAAC,CAACI,MAAM,CAAC,CAAC;AACvF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhH,IAAI,CAACG,SAAS,CAACgE,MAAM,GAAG,SAAS8C,YAAYA,CAACC,MAAM,EAAEzE,MAAM,EAAE;EAC1D,OAAO,IAAI,CAACyD,KAAK,CAAC,CAAC,CAAC/B,MAAM,CAAC+C,MAAM,EAAEzE,MAAM,CAAC,CAAC,CAAC;AAChD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAzC,IAAI,CAACG,SAAS,CAACgH,eAAe,GAAG,SAASA,eAAeA,CAACD,MAAM,EAAE;EAC9D,IAAI,EAAEA,MAAM,YAAYpG,MAAM,CAAC,EAC3BoG,MAAM,GAAGpG,MAAM,CAACT,MAAM,CAAC6G,MAAM,CAAC;EAClC,OAAO,IAAI,CAAC/C,MAAM,CAAC+C,MAAM,EAAEA,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC;AAC/C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACApH,IAAI,CAACG,SAAS,CAACiE,MAAM,GAAG,SAASiD,YAAYA,CAACvB,OAAO,EAAE;EACnD,OAAO,IAAI,CAACI,KAAK,CAAC,CAAC,CAAC9B,MAAM,CAAC0B,OAAO,CAAC,CAAC,CAAC;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA9F,IAAI,CAACG,SAAS,CAACoG,UAAU,GAAG,SAASA,UAAUA,CAACf,MAAM,EAAE;EACpD,OAAO,IAAI,CAACU,KAAK,CAAC,CAAC,CAACK,UAAU,CAACf,MAAM,CAAC;AAC1C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAxF,IAAI,CAACG,SAAS,CAAC+E,QAAQ,GAAG,SAASA,QAAQA,CAACY,OAAO,EAAEvE,OAAO,EAAE;EAC1D,OAAO,IAAI,CAAC2E,KAAK,CAAC,CAAC,CAAChB,QAAQ,CAACY,OAAO,EAAEvE,OAAO,CAAC;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAvB,IAAI,CAACsH,CAAC,GAAG,SAASC,YAAYA,CAACC,QAAQ,EAAE;EACrC,OAAO,SAASC,aAAaA,CAACC,MAAM,EAAE;IAClC1G,IAAI,CAACuG,YAAY,CAACG,MAAM,EAAEF,QAAQ,CAAC;EACvC,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}