{"ast":null,"code":"\"use strict\";\n\nmodule.exports = pool;\n\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\n\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\n\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\nfunction pool(alloc, slice, size) {\n  var SIZE = size || 8192;\n  var MAX = SIZE >>> 1;\n  var slab = null;\n  var offset = SIZE;\n  return function pool_alloc(size) {\n    if (size < 1 || size > MAX) return alloc(size);\n    if (offset + size > SIZE) {\n      slab = alloc(SIZE);\n      offset = 0;\n    }\n    var buf = slice.call(slab, offset, offset += size);\n    if (offset & 7)\n      // align to 32 bit\n      offset = (offset | 7) + 1;\n    return buf;\n  };\n}","map":{"version":3,"names":["module","exports","pool","alloc","slice","size","SIZE","MAX","slab","offset","pool_alloc","buf","call"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/@protobufjs/pool/index.js"],"sourcesContent":["\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,OAAO,GAAGC,IAAI;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAIA,CAACC,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAE;EAC9B,IAAIC,IAAI,GAAKD,IAAI,IAAI,IAAI;EACzB,IAAIE,GAAG,GAAMD,IAAI,KAAK,CAAC;EACvB,IAAIE,IAAI,GAAK,IAAI;EACjB,IAAIC,MAAM,GAAGH,IAAI;EACjB,OAAO,SAASI,UAAUA,CAACL,IAAI,EAAE;IAC7B,IAAIA,IAAI,GAAG,CAAC,IAAIA,IAAI,GAAGE,GAAG,EACtB,OAAOJ,KAAK,CAACE,IAAI,CAAC;IACtB,IAAII,MAAM,GAAGJ,IAAI,GAAGC,IAAI,EAAE;MACtBE,IAAI,GAAGL,KAAK,CAACG,IAAI,CAAC;MAClBG,MAAM,GAAG,CAAC;IACd;IACA,IAAIE,GAAG,GAAGP,KAAK,CAACQ,IAAI,CAACJ,IAAI,EAAEC,MAAM,EAAEA,MAAM,IAAIJ,IAAI,CAAC;IAClD,IAAII,MAAM,GAAG,CAAC;MAAE;MACZA,MAAM,GAAG,CAACA,MAAM,GAAG,CAAC,IAAI,CAAC;IAC7B,OAAOE,GAAG;EACd,CAAC;AACL"},"metadata":{},"sourceType":"script","externalDependencies":[]}