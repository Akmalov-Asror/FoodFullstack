{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OngoingCallPromise = exports.OngoingCall = void 0;\nconst status_1 = require(\"./status\");\nconst googleError_1 = require(\"./googleError\");\nclass OngoingCall {\n  /**\n   * OngoingCall manages callback, API calls, and cancellation\n   * of the API calls.\n   * @param {APICallback=} callback\n   *   The callback to be called asynchronously when the API call\n   *   finishes.\n   * @constructor\n   * @property {APICallback} callback\n   *   The callback function to be called.\n   * @private\n   */\n  constructor(callback) {\n    this.callback = callback;\n    this.completed = false;\n  }\n  /**\n   * Cancels the ongoing promise.\n   */\n  cancel() {\n    if (this.completed) {\n      return;\n    }\n    this.completed = true;\n    if (this.cancelFunc) {\n      this.cancelFunc();\n    } else {\n      const error = new googleError_1.GoogleError('cancelled');\n      error.code = status_1.Status.CANCELLED;\n      this.callback(error);\n    }\n  }\n  /**\n   * Call calls the specified function. Result will be used to fulfill\n   * the promise.\n   *\n   * @param {SimpleCallbackFunction} func\n   *   A function for an API call.\n   * @param {Object} argument\n   *   A request object.\n   */\n  call(func, argument) {\n    if (this.completed) {\n      return;\n    }\n    const canceller = func(argument, (err, response, next, rawResponse) => {\n      this.completed = true;\n      setImmediate(this.callback, err, response, next, rawResponse);\n    });\n    if (canceller instanceof Promise) {\n      canceller.catch(err => {\n        setImmediate(this.callback, new googleError_1.GoogleError(err), null, null, null);\n      });\n    }\n    this.cancelFunc = () => canceller.cancel();\n  }\n}\nexports.OngoingCall = OngoingCall;\nclass OngoingCallPromise extends OngoingCall {\n  /**\n   * GaxPromise is GRPCCallbackWrapper, but it holds a promise when\n   * the API call finishes.\n   * @constructor\n   * @private\n   */\n  constructor() {\n    let resolveCallback;\n    let rejectCallback;\n    const callback = (err, response, next, rawResponse) => {\n      if (err) {\n        // If gRPC metadata exist, parsed google.rpc.status details.\n        if (err.metadata) {\n          rejectCallback(googleError_1.GoogleError.parseGRPCStatusDetails(err));\n        } else {\n          rejectCallback(err);\n        }\n      } else if (response !== undefined) {\n        resolveCallback([response, next || null, rawResponse || null]);\n      } else {\n        throw new googleError_1.GoogleError('Neither error nor response are defined');\n      }\n    };\n    const promise = new Promise((resolve, reject) => {\n      resolveCallback = resolve;\n      rejectCallback = reject;\n    });\n    super(callback);\n    this.promise = promise;\n    this.promise.cancel = () => {\n      this.cancel();\n    };\n  }\n}\nexports.OngoingCallPromise = OngoingCallPromise;","map":{"version":3,"names":["status_1","require","googleError_1","OngoingCall","constructor","callback","completed","cancel","cancelFunc","error","GoogleError","code","Status","CANCELLED","call","func","argument","canceller","err","response","next","rawResponse","setImmediate","Promise","catch","exports","OngoingCallPromise","resolveCallback","rejectCallback","metadata","parseGRPCStatusDetails","undefined","promise","resolve","reject"],"sources":["../../src/call.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;AAgBA,MAAAA,QAAA,GAAAC,OAAA;AAWA,MAAAC,aAAA,GAAAD,OAAA;AAEA,MAAaE,WAAW;EAKtB;;;;;;;;;;;EAWAC,YAAYC,QAAqB;IAC/B,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,SAAS,GAAG,KAAK;EACxB;EAEA;;;EAGAC,MAAMA,CAAA;IACJ,IAAI,IAAI,CAACD,SAAS,EAAE;MAClB;;IAEF,IAAI,CAACA,SAAS,GAAG,IAAI;IACrB,IAAI,IAAI,CAACE,UAAU,EAAE;MACnB,IAAI,CAACA,UAAU,EAAE;KAClB,MAAM;MACL,MAAMC,KAAK,GAAG,IAAIP,aAAA,CAAAQ,WAAW,CAAC,WAAW,CAAC;MAC1CD,KAAK,CAACE,IAAI,GAAGX,QAAA,CAAAY,MAAM,CAACC,SAAS;MAC7B,IAAI,CAACR,QAAS,CAACI,KAAK,CAAC;;EAEzB;EAEA;;;;;;;;;EASAK,IAAIA,CAACC,IAA4B,EAAEC,QAAqB;IACtD,IAAI,IAAI,CAACV,SAAS,EAAE;MAClB;;IAEF,MAAMW,SAAS,GAAGF,IAAI,CACpBC,QAAQ,EACR,CACEE,GAAuB,EACvBC,QAAuB,EACvBC,IAA0B,EAC1BC,WAA6B,KAC3B;MACF,IAAI,CAACf,SAAS,GAAG,IAAI;MACrBgB,YAAY,CAAC,IAAI,CAACjB,QAAS,EAAEa,GAAG,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,WAAW,CAAC;IAChE,CAAC,CACF;IACD,IAAIJ,SAAS,YAAYM,OAAO,EAAE;MAChCN,SAAS,CAACO,KAAK,CAACN,GAAG,IAAG;QACpBI,YAAY,CAAC,IAAI,CAACjB,QAAS,EAAE,IAAIH,aAAA,CAAAQ,WAAW,CAACQ,GAAG,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;MACtE,CAAC,CAAC;;IAEJ,IAAI,CAACV,UAAU,GAAG,MAAMS,SAAS,CAACV,MAAM,EAAE;EAC5C;;AArEFkB,OAAA,CAAAtB,WAAA,GAAAA,WAAA;AA4EA,MAAauB,kBAAmB,SAAQvB,WAAW;EAEjD;;;;;;EAMAC,YAAA;IACE,IAAIuB,eAEK;IACT,IAAIC,cAAoC;IACxC,MAAMvB,QAAQ,GAAgBA,CAC5Ba,GAAuB,EACvBC,QAAuB,EACvBC,IAA0B,EAC1BC,WAA6B,KAC3B;MACF,IAAIH,GAAG,EAAE;QACP;QACA,IAAIA,GAAG,CAACW,QAAQ,EAAE;UAChBD,cAAc,CAAC1B,aAAA,CAAAQ,WAAW,CAACoB,sBAAsB,CAACZ,GAAG,CAAC,CAAC;SACxD,MAAM;UACLU,cAAc,CAACV,GAAG,CAAC;;OAEtB,MAAM,IAAIC,QAAQ,KAAKY,SAAS,EAAE;QACjCJ,eAAe,CAAC,CAACR,QAAQ,EAAEC,IAAI,IAAI,IAAI,EAAEC,WAAW,IAAI,IAAI,CAAC,CAAC;OAC/D,MAAM;QACL,MAAM,IAAInB,aAAA,CAAAQ,WAAW,CAAC,wCAAwC,CAAC;;IAEnE,CAAC;IACD,MAAMsB,OAAO,GAAG,IAAIT,OAAO,CAAC,CAACU,OAAO,EAAEC,MAAM,KAAI;MAC9CP,eAAe,GAAGM,OAAO;MACzBL,cAAc,GAAGM,MAAM;IACzB,CAAC,CAAoC;IACrC,KAAK,CAAC7B,QAAQ,CAAC;IACf,IAAI,CAAC2B,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACA,OAAO,CAACzB,MAAM,GAAG,MAAK;MACzB,IAAI,CAACA,MAAM,EAAE;IACf,CAAC;EACH;;AAzCFkB,OAAA,CAAAC,kBAAA,GAAAA,kBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}