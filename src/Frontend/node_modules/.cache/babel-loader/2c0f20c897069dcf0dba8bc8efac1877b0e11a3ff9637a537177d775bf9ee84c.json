{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Service;\n\n// extends Namespace\nvar Namespace = require(\"./namespace\");\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\nvar Method = require(\"./method\"),\n  util = require(\"./util\"),\n  rpc = require(\"./rpc\");\n\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */\nfunction Service(name, options) {\n  Namespace.call(this, name, options);\n\n  /**\n   * Service methods.\n   * @type {Object.<string,Method>}\n   */\n  this.methods = {}; // toJSON, marker\n\n  /**\n   * Cached methods as an array.\n   * @type {Method[]|null}\n   * @private\n   */\n  this._methodsArray = null;\n}\n\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */\n\n/**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */\nService.fromJSON = function fromJSON(name, json) {\n  var service = new Service(name, json.options);\n  /* istanbul ignore else */\n  if (json.methods) for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i) service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n  if (json.nested) service.addJSON(json.nested);\n  service.comment = json.comment;\n  return service;\n};\n\n/**\n * Converts this service to a service descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IService} Service descriptor\n */\nService.prototype.toJSON = function toJSON(toJSONOptions) {\n  var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", inherited && inherited.options || undefined, \"methods\", Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */{}, \"nested\", inherited && inherited.nested || undefined, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n  get: function () {\n    return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n  }\n});\nfunction clearCache(service) {\n  service._methodsArray = null;\n  return service;\n}\n\n/**\n * @override\n */\nService.prototype.get = function get(name) {\n  return this.methods[name] || Namespace.prototype.get.call(this, name);\n};\n\n/**\n * @override\n */\nService.prototype.resolveAll = function resolveAll() {\n  var methods = this.methodsArray;\n  for (var i = 0; i < methods.length; ++i) methods[i].resolve();\n  return Namespace.prototype.resolve.call(this);\n};\n\n/**\n * @override\n */\nService.prototype.add = function add(object) {\n  /* istanbul ignore if */\n  if (this.get(object.name)) throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n  if (object instanceof Method) {\n    this.methods[object.name] = object;\n    object.parent = this;\n    return clearCache(this);\n  }\n  return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * @override\n */\nService.prototype.remove = function remove(object) {\n  if (object instanceof Method) {\n    /* istanbul ignore if */\n    if (this.methods[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n    delete this.methods[object.name];\n    object.parent = null;\n    return clearCache(this);\n  }\n  return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n  var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n  for (var i = 0, method; i < /* initializes */this.methodsArray.length; ++i) {\n    var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n    rpcService[methodName] = util.codegen([\"r\", \"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n      m: method,\n      q: method.resolvedRequestType.ctor,\n      s: method.resolvedResponseType.ctor\n    });\n  }\n  return rpcService;\n};","map":{"version":3,"names":["module","exports","Service","Namespace","require","prototype","Object","create","constructor","className","Method","util","rpc","name","options","call","methods","_methodsArray","fromJSON","json","service","names","keys","i","length","add","nested","addJSON","comment","toJSON","toJSONOptions","inherited","keepComments","Boolean","toObject","undefined","arrayToJSON","methodsArray","defineProperty","get","toArray","clearCache","resolveAll","resolve","object","Error","parent","remove","rpcImpl","requestDelimited","responseDelimited","rpcService","method","methodName","lcFirst","replace","codegen","isReserved","m","q","resolvedRequestType","ctor","s","resolvedResponseType"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/google-gax/node_modules/protobufjs/src/service.js"],"sourcesContent":["\"use strict\";\nmodule.exports = Service;\n\n// extends Namespace\nvar Namespace = require(\"./namespace\");\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\n\nvar Method = require(\"./method\"),\n    util   = require(\"./util\"),\n    rpc    = require(\"./rpc\");\n\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */\nfunction Service(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Service methods.\n     * @type {Object.<string,Method>}\n     */\n    this.methods = {}; // toJSON, marker\n\n    /**\n     * Cached methods as an array.\n     * @type {Method[]|null}\n     * @private\n     */\n    this._methodsArray = null;\n}\n\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */\n\n/**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */\nService.fromJSON = function fromJSON(name, json) {\n    var service = new Service(name, json.options);\n    /* istanbul ignore else */\n    if (json.methods)\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n    if (json.nested)\n        service.addJSON(json.nested);\n    service.comment = json.comment;\n    return service;\n};\n\n/**\n * Converts this service to a service descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IService} Service descriptor\n */\nService.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\" , inherited && inherited.options || undefined,\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\n        \"nested\"  , inherited && inherited.nested || undefined,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n    get: function() {\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n    }\n});\n\nfunction clearCache(service) {\n    service._methodsArray = null;\n    return service;\n}\n\n/**\n * @override\n */\nService.prototype.get = function get(name) {\n    return this.methods[name]\n        || Namespace.prototype.get.call(this, name);\n};\n\n/**\n * @override\n */\nService.prototype.resolveAll = function resolveAll() {\n    var methods = this.methodsArray;\n    for (var i = 0; i < methods.length; ++i)\n        methods[i].resolve();\n    return Namespace.prototype.resolve.call(this);\n};\n\n/**\n * @override\n */\nService.prototype.add = function add(object) {\n\n    /* istanbul ignore if */\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Method) {\n        this.methods[object.name] = object;\n        object.parent = this;\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * @override\n */\nService.prototype.remove = function remove(object) {\n    if (object instanceof Method) {\n\n        /* istanbul ignore if */\n        if (this.methods[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.methods[object.name];\n        object.parent = null;\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n            m: method,\n            q: method.resolvedRequestType.ctor,\n            s: method.resolvedResponseType.ctor\n        });\n    }\n    return rpcService;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}