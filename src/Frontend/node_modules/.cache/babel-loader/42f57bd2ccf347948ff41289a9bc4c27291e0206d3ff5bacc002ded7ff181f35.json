{"ast":null,"code":"\"use strict\";\n\nmodule.exports = fetch;\nvar asPromise = require(\"@protobufjs/aspromise\"),\n  inquire = require(\"@protobufjs/inquire\");\nvar fs = inquire(\"fs\");\n\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\n\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\nfunction fetch(filename, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  } else if (!options) options = {};\n  if (!callback) return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\n\n  // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\n  if (!options.xhr && fs && fs.readFile) return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\n    return err && typeof XMLHttpRequest !== \"undefined\" ? fetch.xhr(filename, options, callback) : err ? callback(err) : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\n  });\n\n  // use the XHR version otherwise.\n  return fetch.xhr(filename, options, callback);\n}\n\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\n\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\n\n/**/\nfetch.xhr = function fetch_xhr(filename, options, callback) {\n  var xhr = new XMLHttpRequest();\n  xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\n    if (xhr.readyState !== 4) return undefined;\n\n    // local cors security errors return status 0 / empty string, too. afaik this cannot be\n    // reliably distinguished from an actually empty file for security reasons. feel free\n    // to send a pull request if you are aware of a solution.\n    if (xhr.status !== 0 && xhr.status !== 200) return callback(Error(\"status \" + xhr.status));\n\n    // if binary data is expected, make sure that some sort of array is returned, even if\n    // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\n    if (options.binary) {\n      var buffer = xhr.response;\n      if (!buffer) {\n        buffer = [];\n        for (var i = 0; i < xhr.responseText.length; ++i) buffer.push(xhr.responseText.charCodeAt(i) & 255);\n      }\n      return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\n    }\n    return callback(null, xhr.responseText);\n  };\n  if (options.binary) {\n    // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\n    if (\"overrideMimeType\" in xhr) xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n    xhr.responseType = \"arraybuffer\";\n  }\n  xhr.open(\"GET\", filename);\n  xhr.send();\n};","map":{"version":3,"names":["module","exports","fetch","asPromise","require","inquire","fs","filename","options","callback","xhr","readFile","fetchReadFileCallback","err","contents","XMLHttpRequest","binary","toString","fetch_xhr","onreadystatechange","fetchOnReadyStateChange","readyState","undefined","status","Error","buffer","response","i","responseText","length","push","charCodeAt","Uint8Array","overrideMimeType","responseType","open","send"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/@protobufjs/fetch/index.js"],"sourcesContent":["\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(\"@protobufjs/aspromise\"),\r\n    inquire   = require(\"@protobufjs/inquire\");\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}