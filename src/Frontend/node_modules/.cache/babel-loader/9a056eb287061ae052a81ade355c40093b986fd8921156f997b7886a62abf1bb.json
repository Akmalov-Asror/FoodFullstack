{"ast":null,"code":"\"use strict\";\n\n// Copyright 2016 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*!\n * @module common/operation\n */\nconst service_object_1 = require(\"./service-object\");\nconst util_1 = require(\"util\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass Operation extends service_object_1.ServiceObject {\n  /**\n   * An Operation object allows you to interact with APIs that take longer to\n   * process things.\n   *\n   * @constructor\n   * @alias module:common/operation\n   *\n   * @param {object} config - Configuration object.\n   * @param {module:common/service|module:common/serviceObject|module:common/grpcService|module:common/grpcServiceObject} config.parent - The parent object.\n   */\n  constructor(config) {\n    const methods = {\n      /**\n       * Checks to see if an operation exists.\n       */\n      exists: true,\n      /**\n       * Retrieves the operation.\n       */\n      get: true,\n      /**\n       * Retrieves metadata for the operation.\n       */\n      getMetadata: {\n        reqOpts: {\n          name: config.id\n        }\n      }\n    };\n    config = Object.assign({\n      baseUrl: ''\n    }, config);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    config.methods = config.methods || methods;\n    super(config);\n    this.completeListeners = 0;\n    this.hasActiveListeners = false;\n    this.listenForEvents_();\n  }\n  /**\n   * Wraps the `complete` and `error` events in a Promise.\n   *\n   * @return {Promise}\n   */\n  promise() {\n    return new Promise((resolve, reject) => {\n      this.on('error', reject).on('complete', metadata => {\n        resolve([metadata]);\n      });\n    });\n  }\n  /**\n   * Begin listening for events on the operation. This method keeps track of how\n   * many \"complete\" listeners are registered and removed, making sure polling\n   * is handled automatically.\n   *\n   * As long as there is one active \"complete\" listener, the connection is open.\n   * When there are no more listeners, the polling stops.\n   *\n   * @private\n   */\n  listenForEvents_() {\n    this.on('newListener', event => {\n      if (event === 'complete') {\n        this.completeListeners++;\n        if (!this.hasActiveListeners) {\n          this.hasActiveListeners = true;\n          this.startPolling_();\n        }\n      }\n    });\n    this.on('removeListener', event => {\n      if (event === 'complete' && --this.completeListeners === 0) {\n        this.hasActiveListeners = false;\n      }\n    });\n  }\n  /**\n   * Poll for a status update. Returns null for an incomplete\n   * status, and metadata for a complete status.\n   *\n   * @private\n   */\n  poll_(callback) {\n    this.getMetadata((err, body) => {\n      if (err || body.error) {\n        callback(err || body.error);\n        return;\n      }\n      if (!body.done) {\n        callback(null);\n        return;\n      }\n      callback(null, body);\n    });\n  }\n  /**\n   * Poll `getMetadata` to check the operation's status. This runs a loop to\n   * ping the API on an interval.\n   *\n   * Note: This method is automatically called once a \"complete\" event handler\n   * is registered on the operation.\n   *\n   * @private\n   */\n  async startPolling_() {\n    if (!this.hasActiveListeners) {\n      return;\n    }\n    try {\n      const metadata = await util_1.promisify(this.poll_.bind(this))();\n      if (!metadata) {\n        setTimeout(this.startPolling_.bind(this), this.pollIntervalMs || 500);\n        return;\n      }\n      this.emit('complete', metadata);\n    } catch (err) {\n      this.emit('error', err);\n    }\n  }\n}\nexports.Operation = Operation;","map":{"version":3,"names":["Object","defineProperty","exports","value","service_object_1","require","util_1","Operation","ServiceObject","constructor","config","methods","exists","get","getMetadata","reqOpts","name","id","assign","baseUrl","completeListeners","hasActiveListeners","listenForEvents_","promise","Promise","resolve","reject","on","metadata","event","startPolling_","poll_","callback","err","body","error","done","promisify","bind","setTimeout","pollIntervalMs","emit"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/@google-cloud/common/build/src/operation.js"],"sourcesContent":["\"use strict\";\n// Copyright 2016 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*!\n * @module common/operation\n */\nconst service_object_1 = require(\"./service-object\");\nconst util_1 = require(\"util\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass Operation extends service_object_1.ServiceObject {\n    /**\n     * An Operation object allows you to interact with APIs that take longer to\n     * process things.\n     *\n     * @constructor\n     * @alias module:common/operation\n     *\n     * @param {object} config - Configuration object.\n     * @param {module:common/service|module:common/serviceObject|module:common/grpcService|module:common/grpcServiceObject} config.parent - The parent object.\n     */\n    constructor(config) {\n        const methods = {\n            /**\n             * Checks to see if an operation exists.\n             */\n            exists: true,\n            /**\n             * Retrieves the operation.\n             */\n            get: true,\n            /**\n             * Retrieves metadata for the operation.\n             */\n            getMetadata: {\n                reqOpts: {\n                    name: config.id,\n                },\n            },\n        };\n        config = Object.assign({\n            baseUrl: '',\n        }, config);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        config.methods = (config.methods || methods);\n        super(config);\n        this.completeListeners = 0;\n        this.hasActiveListeners = false;\n        this.listenForEvents_();\n    }\n    /**\n     * Wraps the `complete` and `error` events in a Promise.\n     *\n     * @return {Promise}\n     */\n    promise() {\n        return new Promise((resolve, reject) => {\n            this.on('error', reject).on('complete', (metadata) => {\n                resolve([metadata]);\n            });\n        });\n    }\n    /**\n     * Begin listening for events on the operation. This method keeps track of how\n     * many \"complete\" listeners are registered and removed, making sure polling\n     * is handled automatically.\n     *\n     * As long as there is one active \"complete\" listener, the connection is open.\n     * When there are no more listeners, the polling stops.\n     *\n     * @private\n     */\n    listenForEvents_() {\n        this.on('newListener', (event) => {\n            if (event === 'complete') {\n                this.completeListeners++;\n                if (!this.hasActiveListeners) {\n                    this.hasActiveListeners = true;\n                    this.startPolling_();\n                }\n            }\n        });\n        this.on('removeListener', (event) => {\n            if (event === 'complete' && --this.completeListeners === 0) {\n                this.hasActiveListeners = false;\n            }\n        });\n    }\n    /**\n     * Poll for a status update. Returns null for an incomplete\n     * status, and metadata for a complete status.\n     *\n     * @private\n     */\n    poll_(callback) {\n        this.getMetadata((err, body) => {\n            if (err || body.error) {\n                callback(err || body.error);\n                return;\n            }\n            if (!body.done) {\n                callback(null);\n                return;\n            }\n            callback(null, body);\n        });\n    }\n    /**\n     * Poll `getMetadata` to check the operation's status. This runs a loop to\n     * ping the API on an interval.\n     *\n     * Note: This method is automatically called once a \"complete\" event handler\n     * is registered on the operation.\n     *\n     * @private\n     */\n    async startPolling_() {\n        if (!this.hasActiveListeners) {\n            return;\n        }\n        try {\n            const metadata = await util_1.promisify(this.poll_.bind(this))();\n            if (!metadata) {\n                setTimeout(this.startPolling_.bind(this), this.pollIntervalMs || 500);\n                return;\n            }\n            this.emit('complete', metadata);\n        }\n        catch (err) {\n            this.emit('error', err);\n        }\n    }\n}\nexports.Operation = Operation;\n//# sourceMappingURL=operation.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}