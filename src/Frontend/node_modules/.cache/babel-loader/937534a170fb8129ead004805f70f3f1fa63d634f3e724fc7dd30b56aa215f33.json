{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PathTemplate = void 0;\nclass PathTemplate {\n  /**\n   * @param {String} data the of the template\n   *\n   * @constructor\n   */\n  constructor(data) {\n    this.bindings = {};\n    this.data = data;\n    this.segments = this.parsePathTemplate(data);\n    this.size = this.segments.length;\n  }\n  /**\n   * Matches a fully-qualified path template string.\n   *\n   * @param {String} path a fully-qualified path template string\n   * @return {Object} contains const names matched to binding values\n   * @throws {TypeError} if path can't be matched to this template\n   */\n  match(path) {\n    let pathSegments = path.split('/');\n    const bindings = {};\n    if (pathSegments.length !== this.segments.length) {\n      // if the path contains a wildcard, then the length may differ by 1.\n      if (!this.data.includes('**')) {\n        throw new TypeError(`This path ${path} does not match path template ${this.data}, the number of parameters is not same.`);\n      } else if (pathSegments.length !== this.segments.length + 1) {\n        throw new TypeError(`This path ${path} does not match path template ${this.data}, the number of parameters is not same with one wildcard.`);\n      }\n    }\n    for (let index = 0; index < this.segments.length && pathSegments.length > 0; index++) {\n      if (this.segments[index] !== pathSegments[0]) {\n        if (!this.segments[index].includes('*')) {\n          throw new TypeError(`segment does not match, ${this.segments[index]} and  ${pathSegments[index]}.`);\n        } else {\n          let segment = this.segments[index];\n          const matches = segment.match(/\\{[$0-9a-zA-Z_]+=.*?\\}/g);\n          if (!matches) {\n            throw new Error(`Error processing path template segment ${segment}`);\n          }\n          const variables = matches.map(str => str.replace(/^\\{/, '').replace(/=.*/, ''));\n          if (segment.includes('**')) {\n            bindings[variables[0]] = pathSegments[0] + '/' + pathSegments[1];\n            pathSegments = pathSegments.slice(2);\n          } else {\n            // atomic resource\n            if (variables.length === 1) {\n              bindings[variables[0]] = pathSegments[0];\n            } else {\n              // non-slash resource\n              // segment: {blurb_id=*}.{legacy_user=*} to match pathSegments: ['bar.user2']\n              // split the match pathSegments[0] -> value: ['bar', 'user2']\n              // compare the length of two arrays, and compare array items\n              const value = pathSegments[0].split(/[-_.~]/);\n              if (value.length !== variables.length) {\n                throw new Error(`segment ${segment} does not match ${pathSegments[0]}`);\n              }\n              for (const v of variables) {\n                bindings[v] = value[0];\n                segment = segment.replace(`{${v}=*}`, `${value[0]}`);\n                value.shift();\n              }\n              // segment: {blurb_id=*}.{legacy_user=*} matching pathSegments: ['bar~user2'] should fail\n              if (segment !== pathSegments[0]) {\n                throw new TypeError(`non slash resource pattern ${this.segments[index]} and ${pathSegments[0]} should have same separator`);\n              }\n            }\n            pathSegments.shift();\n          }\n        }\n      } else {\n        pathSegments.shift();\n      }\n    }\n    return bindings;\n  }\n  /**\n   * Renders a path template using the provided bindings.\n   *\n   * @param {Object} bindings a mapping of const names to binding strings\n   * @return {String} a rendered representation of the path template\n   * @throws {TypeError} if a key is missing, or if a sub-template cannot be\n   *   parsed\n   */\n  render(bindings) {\n    if (Object.keys(bindings).length !== Object.keys(this.bindings).length) {\n      throw new TypeError(`The number of variables ${Object.keys(bindings).length} does not match the number of needed variables ${Object.keys(this.bindings).length}`);\n    }\n    let path = this.inspect();\n    for (const key of Object.keys(bindings)) {\n      const b = bindings[key].toString();\n      if (!this.bindings[key]) {\n        throw new TypeError(`render fails for not matching ${bindings[key]}`);\n      }\n      const variable = this.bindings[key];\n      if (variable === '*') {\n        if (!b.match(/[^/{}]+/)) {\n          throw new TypeError(`render fails for not matching ${b}`);\n        }\n        path = path.replace(`{${key}=*}`, `${b}`);\n      } else if (variable === '**') {\n        if (!b.match(/[^{}]+/)) {\n          throw new TypeError(`render fails for not matching ${b}`);\n        }\n        path = path.replace(`{${key}=**}`, `${b}`);\n      }\n    }\n    return path;\n  }\n  /**\n   * Renders the path template.\n   *\n   * @return {string} contains const names matched to binding values\n   */\n  inspect() {\n    return this.segments.join('/');\n  }\n  /**\n   * Parse the path template.\n   *\n   * @return {string[]} return segments of the input path.\n   * For example: 'buckets/{hello}'' will give back ['buckets', {hello=*}]\n   */\n  parsePathTemplate(data) {\n    const pathSegments = splitPathTemplate(data);\n    let index = 0;\n    let wildCardCount = 0;\n    const segments = [];\n    let matches;\n    pathSegments.forEach(segment => {\n      // * or ** -> segments.push('{$0=*}');\n      //         -> bindings['$0'] = '*'\n      if (segment === '*' || segment === '**') {\n        this.bindings[`$${index}`] = segment;\n        segments.push(`{$${index}=${segment}}`);\n        index = index + 1;\n        if (segment === '**') {\n          ++wildCardCount;\n        }\n      } else if (matches = segment.match(/\\{[0-9a-zA-Z-.~_]+(?:=.*?)?\\}/g)) {\n        for (const subsegment of matches) {\n          const pairMatch = subsegment.match(/^\\{([0-9a-zA-Z-.~_]+)(?:=(.*?))?\\}$/);\n          if (!pairMatch) {\n            throw new Error(`Cannot process path template segment ${subsegment}`);\n          }\n          const key = pairMatch[1];\n          let value = pairMatch[2];\n          if (!value) {\n            value = '*';\n            segment = segment.replace(key, key + '=*');\n            this.bindings[key] = value;\n          } else if (value === '*') {\n            this.bindings[key] = value;\n          } else if (value === '**') {\n            ++wildCardCount;\n            this.bindings[key] = value;\n          }\n        }\n        segments.push(segment);\n      } else if (segment.match(/[0-9a-zA-Z-.~_]+/)) {\n        segments.push(segment);\n      }\n    });\n    if (wildCardCount > 1) {\n      throw new TypeError('Can not have more than one wildcard.');\n    }\n    return segments;\n  }\n}\nexports.PathTemplate = PathTemplate;\n/**\n * Split the path template by `/`.\n * It can not be simply splitted by `/` because there might be `/` in the segments.\n * For example: 'a/b/{a=hello/world}' we do not want to break the brackets pair\n * so above path will be splitted as ['a', 'b', '{a=hello/world}']\n */\nfunction splitPathTemplate(data) {\n  let left = 0;\n  let right = 0;\n  let bracketCount = 0;\n  const segments = [];\n  while (right >= left && right < data.length) {\n    if (data.charAt(right) === '{') {\n      bracketCount = bracketCount + 1;\n    } else if (data.charAt(right) === '}') {\n      bracketCount = bracketCount - 1;\n    } else if (data.charAt(right) === '/') {\n      if (right === data.length - 1) {\n        throw new TypeError('Invalid path, it can not be ended by /');\n      }\n      if (bracketCount === 0) {\n        // complete bracket, to avoid the case a/b/**/*/{a=hello/world}\n        segments.push(data.substring(left, right));\n        left = right + 1;\n      }\n    }\n    if (right === data.length - 1) {\n      if (bracketCount !== 0) {\n        throw new TypeError('Brackets are invalid.');\n      }\n      segments.push(data.substring(left));\n    }\n    right = right + 1;\n  }\n  return segments;\n}","map":{"version":3,"names":["PathTemplate","constructor","data","bindings","segments","parsePathTemplate","size","length","match","path","pathSegments","split","includes","TypeError","index","segment","matches","Error","variables","map","str","replace","slice","value","v","shift","render","Object","keys","inspect","key","b","toString","variable","join","splitPathTemplate","wildCardCount","forEach","push","subsegment","pairMatch","exports","left","right","bracketCount","charAt","substring"],"sources":["../../src/pathTemplate.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}