{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamProxy = exports.StreamType = void 0;\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst duplexify = require('duplexify');\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst retryRequest = require('retry-request');\n/**\n * The type of gRPC streaming.\n * @enum {number}\n */\nvar StreamType;\n(function (StreamType) {\n  /** Client sends a single request, server streams responses. */\n  StreamType[StreamType[\"SERVER_STREAMING\"] = 1] = \"SERVER_STREAMING\";\n  /** Client streams requests, server returns a single response. */\n  StreamType[StreamType[\"CLIENT_STREAMING\"] = 2] = \"CLIENT_STREAMING\";\n  /** Both client and server stream objects. */\n  StreamType[StreamType[\"BIDI_STREAMING\"] = 3] = \"BIDI_STREAMING\";\n})(StreamType = exports.StreamType || (exports.StreamType = {}));\nclass StreamProxy extends duplexify {\n  /**\n   * StreamProxy is a proxy to gRPC-streaming method.\n   *\n   * @private\n   * @constructor\n   * @param {StreamType} type - the type of gRPC stream.\n   * @param {ApiCallback} callback - the callback for further API call.\n   */\n  constructor(type, callback, rest) {\n    super(undefined, undefined, {\n      objectMode: true,\n      readable: type !== StreamType.CLIENT_STREAMING,\n      writable: type !== StreamType.SERVER_STREAMING\n    });\n    this.type = type;\n    this._callback = callback;\n    this._isCancelCalled = false;\n    this._responseHasSent = false;\n    this.rest = rest;\n  }\n  cancel() {\n    if (this.stream) {\n      this.stream.cancel();\n    } else {\n      this._isCancelCalled = true;\n    }\n  }\n  /**\n   * Forward events from an API request stream to the user's stream.\n   * @param {Stream} stream - The API request stream.\n   */\n  forwardEvents(stream) {\n    const eventsToForward = ['metadata', 'response', 'status'];\n    eventsToForward.forEach(event => {\n      stream.on(event, this.emit.bind(this, event));\n    });\n    // gRPC is guaranteed emit the 'status' event but not 'metadata', and 'status' is the last event to emit.\n    // Emit the 'response' event if stream has no 'metadata' event.\n    // This avoids the stream swallowing the other events, such as 'end'.\n    stream.on('status', () => {\n      if (!this._responseHasSent) {\n        stream.emit('response', {\n          code: 200,\n          details: '',\n          message: 'OK'\n        });\n      }\n    });\n    // We also want to supply the status data as 'response' event to support\n    // the behavior of google-cloud-node expects.\n    // see:\n    // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\n    // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\n    stream.on('metadata', metadata => {\n      // Create a response object with succeeds.\n      // TODO: unify this logic with the decoration of gRPC response when it's\n      // added. see: https://github.com/googleapis/gax-nodejs/issues/65\n      stream.emit('response', {\n        code: 200,\n        details: '',\n        message: 'OK',\n        metadata\n      });\n      this._responseHasSent = true;\n    });\n  }\n  /**\n   * Specifies the target stream.\n   * @param {ApiCall} apiCall - the API function to be called.\n   * @param {Object} argument - the argument to be passed to the apiCall.\n   */\n  setStream(apiCall, argument, retryRequestOptions = {}) {\n    if (this.type === StreamType.SERVER_STREAMING) {\n      if (this.rest) {\n        const stream = apiCall(argument, this._callback);\n        this.stream = stream;\n        this.setReadable(stream);\n      } else {\n        const retryStream = retryRequest(null, {\n          objectMode: true,\n          request: () => {\n            if (this._isCancelCalled) {\n              if (this.stream) {\n                this.stream.cancel();\n              }\n              return;\n            }\n            const stream = apiCall(argument, this._callback);\n            this.stream = stream;\n            this.forwardEvents(stream);\n            return stream;\n          },\n          retries: retryRequestOptions.retries,\n          currentRetryAttempt: retryRequestOptions.currentRetryAttempt,\n          noResponseRetries: retryRequestOptions.noResponseRetries,\n          shouldRetryFn: retryRequestOptions.shouldRetryFn\n        });\n        this.setReadable(retryStream);\n      }\n      return;\n    }\n    const stream = apiCall(argument, this._callback);\n    this.stream = stream;\n    this.forwardEvents(stream);\n    if (this.type === StreamType.CLIENT_STREAMING) {\n      this.setWritable(stream);\n    }\n    if (this.type === StreamType.BIDI_STREAMING) {\n      this.setReadable(stream);\n      this.setWritable(stream);\n    }\n    if (this._isCancelCalled && this.stream) {\n      this.stream.cancel();\n    }\n  }\n}\nexports.StreamProxy = StreamProxy;","map":{"version":3,"names":["duplexify","require","retryRequest","StreamType","exports","StreamProxy","constructor","type","callback","rest","undefined","objectMode","readable","CLIENT_STREAMING","writable","SERVER_STREAMING","_callback","_isCancelCalled","_responseHasSent","cancel","stream","forwardEvents","eventsToForward","forEach","event","on","emit","bind","code","details","message","metadata","setStream","apiCall","argument","retryRequestOptions","setReadable","retryStream","request","retries","currentRetryAttempt","noResponseRetries","shouldRetryFn","setWritable","BIDI_STREAMING"],"sources":["../../../src/streamingCalls/streaming.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}