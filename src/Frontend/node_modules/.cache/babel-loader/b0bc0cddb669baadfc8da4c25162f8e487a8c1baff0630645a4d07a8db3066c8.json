{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.googleProtobufAnyFromProto3JSON = exports.googleProtobufAnyToProto3JSON = void 0;\nconst fromproto3json_1 = require(\"./fromproto3json\");\nconst toproto3json_1 = require(\"./toproto3json\");\n// https://github.com/protocolbuffers/protobuf/blob/ba3836703b4a9e98e474aea2bac8c5b49b6d3b5c/python/google/protobuf/json_format.py#L850\nconst specialJSON = new Set(['google.protobuf.Any', 'google.protobuf.Duration', 'google.protobuf.FieldMask', 'google.protobuf.ListValue', 'google.protobuf.Struct', 'google.protobuf.Timestamp', 'google.protobuf.Value']);\nfunction googleProtobufAnyToProto3JSON(obj) {\n  // https://developers.google.com/protocol-buffers/docs/proto3#json\n  // If the Any contains a value that has a special JSON mapping, it will be converted as follows:\n  // {\"@type\": xxx, \"value\": yyy}.\n  // Otherwise, the value will be converted into a JSON object, and the \"@type\" field will be inserted\n  // to indicate the actual data type.\n  const typeName = obj.type_url.replace(/^.*\\//, '');\n  let type;\n  try {\n    type = obj.$type.root.lookupType(typeName);\n  } catch (err) {\n    throw new Error(`googleProtobufAnyToProto3JSON: cannot find type ${typeName}: ${err}`);\n  }\n  const valueMessage = type.decode(obj.value);\n  const valueProto3JSON = (0, toproto3json_1.toProto3JSON)(valueMessage);\n  if (specialJSON.has(typeName)) {\n    return {\n      '@type': obj.type_url,\n      value: valueProto3JSON\n    };\n  }\n  valueProto3JSON['@type'] = obj.type_url;\n  return valueProto3JSON;\n}\nexports.googleProtobufAnyToProto3JSON = googleProtobufAnyToProto3JSON;\nfunction googleProtobufAnyFromProto3JSON(root, json) {\n  // Not all possible JSON values can hold Any, only real objects.\n  if (json === null || typeof json !== 'object' || Array.isArray(json)) {\n    throw new Error('googleProtobufAnyFromProto3JSON: must be an object to decode google.protobuf.Any');\n  }\n  const typeUrl = json['@type'];\n  if (!typeUrl || typeof typeUrl !== 'string') {\n    throw new Error('googleProtobufAnyFromProto3JSON: JSON serialization of google.protobuf.Any must contain @type field');\n  }\n  const typeName = typeUrl.replace(/^.*\\//, '');\n  let type;\n  try {\n    type = root.lookupType(typeName);\n  } catch (err) {\n    throw new Error(`googleProtobufAnyFromProto3JSON: cannot find type ${typeName}: ${err}`);\n  }\n  let value = json;\n  if (specialJSON.has(typeName)) {\n    if (!('value' in json)) {\n      throw new Error(`googleProtobufAnyFromProto3JSON: JSON representation of google.protobuf.Any with type ${typeName} must contain the value field`);\n    }\n    value = json.value;\n  }\n  const valueMessage = (0, fromproto3json_1.fromProto3JSON)(type, value);\n  if (valueMessage === null) {\n    return {\n      type_url: typeUrl,\n      value: null\n    };\n  }\n  const uint8array = type.encode(valueMessage).finish();\n  const buffer = Buffer.from(uint8array, 0, uint8array.byteLength);\n  const base64 = buffer.toString('base64');\n  return {\n    type_url: typeUrl,\n    value: base64\n  };\n}\nexports.googleProtobufAnyFromProto3JSON = googleProtobufAnyFromProto3JSON;","map":{"version":3,"names":["fromproto3json_1","require","toproto3json_1","specialJSON","Set","googleProtobufAnyToProto3JSON","obj","typeName","type_url","replace","type","$type","root","lookupType","err","Error","valueMessage","decode","value","valueProto3JSON","toProto3JSON","has","exports","googleProtobufAnyFromProto3JSON","json","Array","isArray","typeUrl","fromProto3JSON","uint8array","encode","finish","buffer","Buffer","from","byteLength","base64","toString"],"sources":["../../typescript/src/any.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}