{"ast":null,"code":"import { useState, useEffect, useCallback } from 'react';\n\n// A type of promise-like that resolves synchronously and supports only one observer\n\nconst _iteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\")) : \"@@iterator\";\nconst _asyncIteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\")) : \"@@asyncIterator\";\n\n// Asynchronously call a function and send errors to recovery continuation\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n  return result;\n}\nvar Translate = require('@google-cloud/translate').v2.Translate;\nvar translate;\nvar setConfig = function setConfig(_ref) {\n  var clientEmail = _ref.clientEmail,\n    privateKey = _ref.privateKey,\n    projectId = _ref.projectId;\n  try {\n    translate = new Translate({\n      credentials: {\n        private_key: privateKey,\n        client_email: clientEmail\n      },\n      projectId: projectId\n    });\n    return Promise.resolve();\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nvar getLanguages = function getLanguages() {\n  try {\n    return Promise.resolve(_catch(function () {\n      return Promise.resolve(translate.getLanguages()).then(function (_ref2) {\n        var list = _ref2[0];\n        var options = list.map(function (item) {\n          return {\n            label: item.name,\n            value: item.code\n          };\n        });\n        return options;\n      });\n    }, function (error) {\n      console.error('Error at detectLanguage --> ', \"\" + error);\n      return 0;\n    }));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nvar translateText = function translateText(text, targetLanguage) {\n  try {\n    return Promise.resolve(_catch(function () {\n      return Promise.resolve(translate.translate(text, targetLanguage)).then(function (_ref3) {\n        var response = _ref3[0];\n        var result = response;\n        if (Array.isArray(response)) {\n          result = response.map(function (val, index) {\n            return val !== '' ? val : text[index];\n          });\n        }\n        return result;\n      });\n    }, function (error) {\n      console.error('1 => Error at translatedText --> ', \"\" + error);\n      return '';\n    }));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nvar useLazyTranslate = function useLazyTranslate(props) {\n  var language = props.language,\n    skip = props.skip;\n  var _useState = useState(true),\n    loading = _useState[0],\n    setLoading = _useState[1];\n  var _useState2 = useState(false),\n    called = _useState2[0],\n    setCalled = _useState2[1];\n  var _useState3 = useState([]),\n    data = _useState3[0],\n    setData = _useState3[1];\n  useEffect(function () {\n    if (skip) {\n      setCalled(true);\n      setLoading(false);\n    }\n  }, []);\n  return [useCallback(function (text, target) {\n    if (skip) {\n      return null;\n    }\n    return translateText(text, target || language).then(function (res) {\n      setData(res);\n    })[\"finally\"](function () {\n      setCalled(true);\n      setLoading(false);\n    });\n  }, [language]), {\n    called: called,\n    loading: loading,\n    data: data\n  }];\n};\nvar useTranslate = function useTranslate(text, props) {\n  var _useLazyTranslate = useLazyTranslate(props),\n    translate = _useLazyTranslate[0],\n    _useLazyTranslate$ = _useLazyTranslate[1],\n    loading = _useLazyTranslate$.loading,\n    data = _useLazyTranslate$.data;\n  useEffect(function () {\n    var mounted = true;\n    if (mounted) {\n      translate(text);\n    }\n    return function () {\n      mounted = false;\n    };\n  }, []);\n  return {\n    loading: loading,\n    data: data\n  };\n};\nexport { getLanguages, setConfig, useLazyTranslate, useTranslate };","map":{"version":3,"names":["_iteratorSymbol","Symbol","iterator","_asyncIteratorSymbol","asyncIterator","_catch","body","recover","result","e","then","Translate","require","v2","translate","setConfig","_ref","clientEmail","privateKey","projectId","credentials","private_key","client_email","Promise","reject","getLanguages","resolve","_ref2","list","options","map","item","label","name","value","code","error","console","translateText","text","targetLanguage","_ref3","response","Array","isArray","val","index","useLazyTranslate","props","language","skip","useState","loading","_useState","setLoading","called","_useState2","setCalled","data","_useState3","setData","useEffect","useCallback","target","res","useTranslate","_useLazyTranslate","_useLazyTranslate$","mounted"],"sources":["C:\\Users\\ergas\\OneDrive\\Рабочий стол\\inno\\FoodFullstack\\src\\Frontend\\node_modules\\react-google-translate\\node_modules\\babel-plugin-transform-async-to-promises\\helpers.js","C:\\Users\\ergas\\OneDrive\\Рабочий стол\\inno\\FoodFullstack\\src\\Frontend\\node_modules\\react-google-translate\\src\\util.ts","C:\\Users\\ergas\\OneDrive\\Рабочий стол\\inno\\FoodFullstack\\src\\Frontend\\node_modules\\react-google-translate\\src\\index.tsx"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","const { Translate } = require('@google-cloud/translate').v2\n\ntype Config = {\n  privateKey: string\n  clientEmail: string\n  projectId: string\n}\n\nlet translate: any\n\nexport const setConfig = async ({\n  clientEmail,\n  privateKey,\n  projectId\n}: Config) => {\n  translate = new Translate({\n    credentials: {\n      private_key: privateKey,\n      client_email: clientEmail\n    },\n    projectId: projectId\n  })\n}\n\nexport const getLanguages = async () => {\n  try {\n    const [list]: [\n      Array<{\n        code: string\n        name: string\n      }>\n    ] = await translate.getLanguages()\n    const options = list.map((item) => ({\n      label: item.name,\n      value: item.code\n    }))\n    return options\n  } catch (error) {\n    console.error('Error at detectLanguage --> ', `${error}`)\n    return 0\n  }\n}\n\nexport const detectLanguage = async (text: string) => {\n  try {\n    const response = await translate.detect(text)\n    return response[0].language\n  } catch (error) {\n    console.error('Error at detectLanguage --> ', `${error}`)\n    return 0\n  }\n}\n\nexport const translateText = async (\n  text: string | Array<string>,\n  targetLanguage: string\n) => {\n  try {\n    const [response] = await translate.translate(text, targetLanguage)\n    let result: string | Array<string> = response\n    // generate the array which combines the original array and the translated text\n    if (Array.isArray(response)) {\n      result = response.map((val: string, index) =>\n        val !== '' ? val : text[index]\n      )\n    }\n    return result\n  } catch (error) {\n    console.error('1 => Error at translatedText --> ', `${error}`)\n    return ''\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { translateText } from './util'\n\ntype Props = {\n  language: string\n  skip?: boolean\n}\n\ntype Result = {\n  loading: boolean\n  data: string | Array<string>\n}\n\ntype LazyTranslateProps = [\n  (param: string | Array<string>, target?: string) => Promise<void> | null,\n  Result & {\n    called: boolean\n  }\n]\n\nexport const useLazyTranslate = (props: Props): LazyTranslateProps => {\n  const { language, skip } = props\n  const [loading, setLoading] = useState(true)\n  const [called, setCalled] = useState(false)\n  const [data, setData] = useState<string | string[]>([])\n\n  useEffect(() => {\n    if (skip) {\n      setCalled(true)\n      setLoading(false)\n    }\n  }, [])\n\n  return [\n    useCallback(\n      (text: string | Array<string>, target?: string) => {\n        if (skip) {\n          return null\n        }\n        return translateText(text, target || language)\n          .then((res) => {\n            setData(res)\n          })\n          .finally(() => {\n            setCalled(true)\n            setLoading(false)\n          })\n      },\n      [language]\n    ),\n    {\n      called,\n      loading,\n      data\n    }\n  ]\n}\n\nexport const useTranslate = (\n  text: string | Array<string>,\n  props: Props\n): Result => {\n  const [translate, { loading, data }] = useLazyTranslate(props)\n  useEffect(() => {\n    let mounted = true\n    if (mounted) {\n      translate(text)\n    }\n    return () => {\n      mounted = false\n    }\n  }, [])\n  return {\n    loading,\n    data\n  }\n}\n\nexport { getLanguages, setConfig } from './util'\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}