{"ast":null,"code":"\"use strict\";\n\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\nvar path = exports;\nvar isAbsolute =\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\npath.isAbsolute = function isAbsolute(path) {\n  return /^(?:\\/|\\w+:)/.test(path);\n};\nvar normalize =\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\npath.normalize = function normalize(path) {\n  path = path.replace(/\\\\/g, \"/\").replace(/\\/{2,}/g, \"/\");\n  var parts = path.split(\"/\"),\n    absolute = isAbsolute(path),\n    prefix = \"\";\n  if (absolute) prefix = parts.shift() + \"/\";\n  for (var i = 0; i < parts.length;) {\n    if (parts[i] === \"..\") {\n      if (i > 0 && parts[i - 1] !== \"..\") parts.splice(--i, 2);else if (absolute) parts.splice(i, 1);else ++i;\n    } else if (parts[i] === \".\") parts.splice(i, 1);else ++i;\n  }\n  return prefix + parts.join(\"/\");\n};\n\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\n  if (!alreadyNormalized) includePath = normalize(includePath);\n  if (isAbsolute(includePath)) return includePath;\n  if (!alreadyNormalized) originPath = normalize(originPath);\n  return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\n};","map":{"version":3,"names":["path","exports","isAbsolute","test","normalize","replace","parts","split","absolute","prefix","shift","i","length","splice","join","resolve","originPath","includePath","alreadyNormalized"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/@protobufjs/path/index.js"],"sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA,IAAIA,IAAI,GAAGC,OAAO;AAElB,IAAIC,UAAU;AACd;AACA;AACA;AACA;AACA;AACAF,IAAI,CAACE,UAAU,GAAG,SAASA,UAAUA,CAACF,IAAI,EAAE;EACxC,OAAO,cAAc,CAACG,IAAI,CAACH,IAAI,CAAC;AACpC,CAAC;AAED,IAAII,SAAS;AACb;AACA;AACA;AACA;AACA;AACAJ,IAAI,CAACI,SAAS,GAAG,SAASA,SAASA,CAACJ,IAAI,EAAE;EACtCA,IAAI,GAAGA,IAAI,CAACK,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC;EACnC,IAAIC,KAAK,GAAMN,IAAI,CAACO,KAAK,CAAC,GAAG,CAAC;IAC1BC,QAAQ,GAAGN,UAAU,CAACF,IAAI,CAAC;IAC3BS,MAAM,GAAK,EAAE;EACjB,IAAID,QAAQ,EACRC,MAAM,GAAGH,KAAK,CAACI,KAAK,CAAC,CAAC,GAAG,GAAG;EAChC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACM,MAAM,GAAG;IAC/B,IAAIN,KAAK,CAACK,CAAC,CAAC,KAAK,IAAI,EAAE;MACnB,IAAIA,CAAC,GAAG,CAAC,IAAIL,KAAK,CAACK,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,EAC9BL,KAAK,CAACO,MAAM,CAAC,EAAEF,CAAC,EAAE,CAAC,CAAC,CAAC,KACpB,IAAIH,QAAQ,EACbF,KAAK,CAACO,MAAM,CAACF,CAAC,EAAE,CAAC,CAAC,CAAC,KAEnB,EAAEA,CAAC;IACX,CAAC,MAAM,IAAIL,KAAK,CAACK,CAAC,CAAC,KAAK,GAAG,EACvBL,KAAK,CAACO,MAAM,CAACF,CAAC,EAAE,CAAC,CAAC,CAAC,KAEnB,EAAEA,CAAC;EACX;EACA,OAAOF,MAAM,GAAGH,KAAK,CAACQ,IAAI,CAAC,GAAG,CAAC;AACnC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,IAAI,CAACe,OAAO,GAAG,SAASA,OAAOA,CAACC,UAAU,EAAEC,WAAW,EAAEC,iBAAiB,EAAE;EACxE,IAAI,CAACA,iBAAiB,EAClBD,WAAW,GAAGb,SAAS,CAACa,WAAW,CAAC;EACxC,IAAIf,UAAU,CAACe,WAAW,CAAC,EACvB,OAAOA,WAAW;EACtB,IAAI,CAACC,iBAAiB,EAClBF,UAAU,GAAGZ,SAAS,CAACY,UAAU,CAAC;EACtC,OAAO,CAACA,UAAU,GAAGA,UAAU,CAACX,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,EAAEO,MAAM,GAAGR,SAAS,CAACY,UAAU,GAAG,GAAG,GAAGC,WAAW,CAAC,GAAGA,WAAW;AACnI,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}