{"ast":null,"code":"\"use strict\";\n\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global window */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BrowserCrypto = void 0;\n// This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\nconst base64js = require(\"base64-js\");\n// Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\n// eslint-disable-next-line node/no-unsupported-features/node-builtins\nif (typeof process === 'undefined' && typeof TextEncoder === 'undefined') {\n  require('fast-text-encoding');\n}\nconst crypto_1 = require(\"../crypto\");\nclass BrowserCrypto {\n  constructor() {\n    if (typeof window === 'undefined' || window.crypto === undefined || window.crypto.subtle === undefined) {\n      throw new Error(\"SubtleCrypto not found. Make sure it's an https:// website.\");\n    }\n  }\n  async sha256DigestBase64(str) {\n    // SubtleCrypto digest() method is async, so we must make\n    // this method async as well.\n    // To calculate SHA256 digest using SubtleCrypto, we first\n    // need to convert an input string to an ArrayBuffer:\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    const inputBuffer = new TextEncoder().encode(str);\n    // Result is ArrayBuffer as well.\n    const outputBuffer = await window.crypto.subtle.digest('SHA-256', inputBuffer);\n    return base64js.fromByteArray(new Uint8Array(outputBuffer));\n  }\n  randomBytesBase64(count) {\n    const array = new Uint8Array(count);\n    window.crypto.getRandomValues(array);\n    return base64js.fromByteArray(array);\n  }\n  static padBase64(base64) {\n    // base64js requires padding, so let's add some '='\n    while (base64.length % 4 !== 0) {\n      base64 += '=';\n    }\n    return base64;\n  }\n  async verify(pubkey, data, signature) {\n    const algo = {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: {\n        name: 'SHA-256'\n      }\n    };\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    const dataArray = new TextEncoder().encode(data);\n    const signatureArray = base64js.toByteArray(BrowserCrypto.padBase64(signature));\n    const cryptoKey = await window.crypto.subtle.importKey('jwk', pubkey, algo, true, ['verify']);\n    // SubtleCrypto's verify method is async so we must make\n    // this method async as well.\n    const result = await window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n    return result;\n  }\n  async sign(privateKey, data) {\n    const algo = {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: {\n        name: 'SHA-256'\n      }\n    };\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    const dataArray = new TextEncoder().encode(data);\n    const cryptoKey = await window.crypto.subtle.importKey('jwk', privateKey, algo, true, ['sign']);\n    // SubtleCrypto's sign method is async so we must make\n    // this method async as well.\n    const result = await window.crypto.subtle.sign(algo, cryptoKey, dataArray);\n    return base64js.fromByteArray(new Uint8Array(result));\n  }\n  decodeBase64StringUtf8(base64) {\n    const uint8array = base64js.toByteArray(BrowserCrypto.padBase64(base64));\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    const result = new TextDecoder().decode(uint8array);\n    return result;\n  }\n  encodeBase64StringUtf8(text) {\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    const uint8array = new TextEncoder().encode(text);\n    const result = base64js.fromByteArray(uint8array);\n    return result;\n  }\n  /**\n   * Computes the SHA-256 hash of the provided string.\n   * @param str The plain text string to hash.\n   * @return A promise that resolves with the SHA-256 hash of the provided\n   *   string in hexadecimal encoding.\n   */\n  async sha256DigestHex(str) {\n    // SubtleCrypto digest() method is async, so we must make\n    // this method async as well.\n    // To calculate SHA256 digest using SubtleCrypto, we first\n    // need to convert an input string to an ArrayBuffer:\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    const inputBuffer = new TextEncoder().encode(str);\n    // Result is ArrayBuffer as well.\n    const outputBuffer = await window.crypto.subtle.digest('SHA-256', inputBuffer);\n    return crypto_1.fromArrayBufferToHex(outputBuffer);\n  }\n  /**\n   * Computes the HMAC hash of a message using the provided crypto key and the\n   * SHA-256 algorithm.\n   * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n   * @param msg The plain text message.\n   * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n   *   format.\n   */\n  async signWithHmacSha256(key, msg) {\n    // Convert key, if provided in ArrayBuffer format, to string.\n    const rawKey = typeof key === 'string' ? key : String.fromCharCode(...new Uint16Array(key));\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\n    const enc = new TextEncoder();\n    const cryptoKey = await window.crypto.subtle.importKey('raw', enc.encode(rawKey), {\n      name: 'HMAC',\n      hash: {\n        name: 'SHA-256'\n      }\n    }, false, ['sign']);\n    return window.crypto.subtle.sign('HMAC', cryptoKey, enc.encode(msg));\n  }\n}\nexports.BrowserCrypto = BrowserCrypto;","map":{"version":3,"names":["Object","defineProperty","exports","value","BrowserCrypto","base64js","require","process","TextEncoder","crypto_1","constructor","window","crypto","undefined","subtle","Error","sha256DigestBase64","str","inputBuffer","encode","outputBuffer","digest","fromByteArray","Uint8Array","randomBytesBase64","count","array","getRandomValues","padBase64","base64","length","verify","pubkey","data","signature","algo","name","hash","dataArray","signatureArray","toByteArray","cryptoKey","importKey","result","sign","privateKey","decodeBase64StringUtf8","uint8array","TextDecoder","decode","encodeBase64StringUtf8","text","sha256DigestHex","fromArrayBufferToHex","signWithHmacSha256","key","msg","rawKey","String","fromCharCode","Uint16Array","enc"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/google-auth-library/build/src/crypto/browser/crypto.js"],"sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global window */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BrowserCrypto = void 0;\n// This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\nconst base64js = require(\"base64-js\");\n// Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\n// eslint-disable-next-line node/no-unsupported-features/node-builtins\nif (typeof process === 'undefined' && typeof TextEncoder === 'undefined') {\n    require('fast-text-encoding');\n}\nconst crypto_1 = require(\"../crypto\");\nclass BrowserCrypto {\n    constructor() {\n        if (typeof window === 'undefined' ||\n            window.crypto === undefined ||\n            window.crypto.subtle === undefined) {\n            throw new Error(\"SubtleCrypto not found. Make sure it's an https:// website.\");\n        }\n    }\n    async sha256DigestBase64(str) {\n        // SubtleCrypto digest() method is async, so we must make\n        // this method async as well.\n        // To calculate SHA256 digest using SubtleCrypto, we first\n        // need to convert an input string to an ArrayBuffer:\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const inputBuffer = new TextEncoder().encode(str);\n        // Result is ArrayBuffer as well.\n        const outputBuffer = await window.crypto.subtle.digest('SHA-256', inputBuffer);\n        return base64js.fromByteArray(new Uint8Array(outputBuffer));\n    }\n    randomBytesBase64(count) {\n        const array = new Uint8Array(count);\n        window.crypto.getRandomValues(array);\n        return base64js.fromByteArray(array);\n    }\n    static padBase64(base64) {\n        // base64js requires padding, so let's add some '='\n        while (base64.length % 4 !== 0) {\n            base64 += '=';\n        }\n        return base64;\n    }\n    async verify(pubkey, data, signature) {\n        const algo = {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: { name: 'SHA-256' },\n        };\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const dataArray = new TextEncoder().encode(data);\n        const signatureArray = base64js.toByteArray(BrowserCrypto.padBase64(signature));\n        const cryptoKey = await window.crypto.subtle.importKey('jwk', pubkey, algo, true, ['verify']);\n        // SubtleCrypto's verify method is async so we must make\n        // this method async as well.\n        const result = await window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n        return result;\n    }\n    async sign(privateKey, data) {\n        const algo = {\n            name: 'RSASSA-PKCS1-v1_5',\n            hash: { name: 'SHA-256' },\n        };\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const dataArray = new TextEncoder().encode(data);\n        const cryptoKey = await window.crypto.subtle.importKey('jwk', privateKey, algo, true, ['sign']);\n        // SubtleCrypto's sign method is async so we must make\n        // this method async as well.\n        const result = await window.crypto.subtle.sign(algo, cryptoKey, dataArray);\n        return base64js.fromByteArray(new Uint8Array(result));\n    }\n    decodeBase64StringUtf8(base64) {\n        const uint8array = base64js.toByteArray(BrowserCrypto.padBase64(base64));\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const result = new TextDecoder().decode(uint8array);\n        return result;\n    }\n    encodeBase64StringUtf8(text) {\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const uint8array = new TextEncoder().encode(text);\n        const result = base64js.fromByteArray(uint8array);\n        return result;\n    }\n    /**\n     * Computes the SHA-256 hash of the provided string.\n     * @param str The plain text string to hash.\n     * @return A promise that resolves with the SHA-256 hash of the provided\n     *   string in hexadecimal encoding.\n     */\n    async sha256DigestHex(str) {\n        // SubtleCrypto digest() method is async, so we must make\n        // this method async as well.\n        // To calculate SHA256 digest using SubtleCrypto, we first\n        // need to convert an input string to an ArrayBuffer:\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const inputBuffer = new TextEncoder().encode(str);\n        // Result is ArrayBuffer as well.\n        const outputBuffer = await window.crypto.subtle.digest('SHA-256', inputBuffer);\n        return crypto_1.fromArrayBufferToHex(outputBuffer);\n    }\n    /**\n     * Computes the HMAC hash of a message using the provided crypto key and the\n     * SHA-256 algorithm.\n     * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n     * @param msg The plain text message.\n     * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n     *   format.\n     */\n    async signWithHmacSha256(key, msg) {\n        // Convert key, if provided in ArrayBuffer format, to string.\n        const rawKey = typeof key === 'string'\n            ? key\n            : String.fromCharCode(...new Uint16Array(key));\n        // eslint-disable-next-line node/no-unsupported-features/node-builtins\n        const enc = new TextEncoder();\n        const cryptoKey = await window.crypto.subtle.importKey('raw', enc.encode(rawKey), {\n            name: 'HMAC',\n            hash: {\n                name: 'SHA-256',\n            },\n        }, false, ['sign']);\n        return window.crypto.subtle.sign('HMAC', cryptoKey, enc.encode(msg));\n    }\n}\nexports.BrowserCrypto = BrowserCrypto;\n//# sourceMappingURL=crypto.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}