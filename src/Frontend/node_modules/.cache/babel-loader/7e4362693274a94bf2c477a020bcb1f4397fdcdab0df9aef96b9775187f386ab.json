{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Enum;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\nvar Namespace = require(\"./namespace\"),\n  util = require(\"./util\");\n\n/**\n * Constructs a new enum instance.\n * @classdesc Reflected enum.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {Object.<string,number>} [values] Enum values as an object, by name\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this enum\n * @param {Object.<string,string>} [comments] The value comments for this enum\n */\nfunction Enum(name, values, options, comment, comments) {\n  ReflectionObject.call(this, name, options);\n  if (values && typeof values !== \"object\") throw TypeError(\"values must be an object\");\n\n  /**\n   * Enum values by id.\n   * @type {Object.<number,string>}\n   */\n  this.valuesById = {};\n\n  /**\n   * Enum values by name.\n   * @type {Object.<string,number>}\n   */\n  this.values = Object.create(this.valuesById); // toJSON, marker\n\n  /**\n   * Enum comment text.\n   * @type {string|null}\n   */\n  this.comment = comment;\n\n  /**\n   * Value comment texts, if any.\n   * @type {Object.<string,string>}\n   */\n  this.comments = comments || {};\n\n  /**\n   * Reserved ranges, if any.\n   * @type {Array.<number[]|string>}\n   */\n  this.reserved = undefined; // toJSON\n\n  // Note that values inherit valuesById on their prototype which makes them a TypeScript-\n  // compatible enum. This is used by pbts to write actual enum definitions that work for\n  // static and reflection code alike instead of emitting generic object definitions.\n\n  if (values) for (var keys = Object.keys(values), i = 0; i < keys.length; ++i) if (typeof values[keys[i]] === \"number\")\n    // use forward entries only\n    this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];\n}\n\n/**\n * Enum descriptor.\n * @interface IEnum\n * @property {Object.<string,number>} values Enum values\n * @property {Object.<string,*>} [options] Enum options\n */\n\n/**\n * Constructs an enum from an enum descriptor.\n * @param {string} name Enum name\n * @param {IEnum} json Enum descriptor\n * @returns {Enum} Created enum\n * @throws {TypeError} If arguments are invalid\n */\nEnum.fromJSON = function fromJSON(name, json) {\n  var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\n  enm.reserved = json.reserved;\n  return enm;\n};\n\n/**\n * Converts this enum to an enum descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IEnum} Enum descriptor\n */\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", this.options, \"values\", this.values, \"reserved\", this.reserved && this.reserved.length ? this.reserved : undefined, \"comment\", keepComments ? this.comment : undefined, \"comments\", keepComments ? this.comments : undefined]);\n};\n\n/**\n * Adds a value to this enum.\n * @param {string} name Value name\n * @param {number} id Value id\n * @param {string} [comment] Comment, if any\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a value with this name or id\n */\nEnum.prototype.add = function add(name, id, comment) {\n  // utilized by the parser but not by .fromJSON\n\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  if (!util.isInteger(id)) throw TypeError(\"id must be an integer\");\n  if (this.values[name] !== undefined) throw Error(\"duplicate name '\" + name + \"' in \" + this);\n  if (this.isReservedId(id)) throw Error(\"id \" + id + \" is reserved in \" + this);\n  if (this.isReservedName(name)) throw Error(\"name '\" + name + \"' is reserved in \" + this);\n  if (this.valuesById[id] !== undefined) {\n    if (!(this.options && this.options.allow_alias)) throw Error(\"duplicate id \" + id + \" in \" + this);\n    this.values[name] = id;\n  } else this.valuesById[this.values[name] = id] = name;\n  this.comments[name] = comment || null;\n  return this;\n};\n\n/**\n * Removes a value from this enum\n * @param {string} name Value name\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `name` is not a name of this enum\n */\nEnum.prototype.remove = function remove(name) {\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  var val = this.values[name];\n  if (val == null) throw Error(\"name '\" + name + \"' does not exist in \" + this);\n  delete this.valuesById[val];\n  delete this.values[name];\n  delete this.comments[name];\n  return this;\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedId = function isReservedId(id) {\n  return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedName = function isReservedName(name) {\n  return Namespace.isReservedName(this.reserved, name);\n};","map":{"version":3,"names":["module","exports","Enum","ReflectionObject","require","prototype","Object","create","constructor","className","Namespace","util","name","values","options","comment","comments","call","TypeError","valuesById","reserved","undefined","keys","i","length","fromJSON","json","enm","toJSON","toJSONOptions","keepComments","Boolean","toObject","add","id","isString","isInteger","Error","isReservedId","isReservedName","allow_alias","remove","val"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/google-gax/node_modules/protobufjs/src/enum.js"],"sourcesContent":["\"use strict\";\nmodule.exports = Enum;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\n\nvar Namespace = require(\"./namespace\"),\n    util = require(\"./util\");\n\n/**\n * Constructs a new enum instance.\n * @classdesc Reflected enum.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {Object.<string,number>} [values] Enum values as an object, by name\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this enum\n * @param {Object.<string,string>} [comments] The value comments for this enum\n */\nfunction Enum(name, values, options, comment, comments) {\n    ReflectionObject.call(this, name, options);\n\n    if (values && typeof values !== \"object\")\n        throw TypeError(\"values must be an object\");\n\n    /**\n     * Enum values by id.\n     * @type {Object.<number,string>}\n     */\n    this.valuesById = {};\n\n    /**\n     * Enum values by name.\n     * @type {Object.<string,number>}\n     */\n    this.values = Object.create(this.valuesById); // toJSON, marker\n\n    /**\n     * Enum comment text.\n     * @type {string|null}\n     */\n    this.comment = comment;\n\n    /**\n     * Value comment texts, if any.\n     * @type {Object.<string,string>}\n     */\n    this.comments = comments || {};\n\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */\n    this.reserved = undefined; // toJSON\n\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\n    // static and reflection code alike instead of emitting generic object definitions.\n\n    if (values)\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\n}\n\n/**\n * Enum descriptor.\n * @interface IEnum\n * @property {Object.<string,number>} values Enum values\n * @property {Object.<string,*>} [options] Enum options\n */\n\n/**\n * Constructs an enum from an enum descriptor.\n * @param {string} name Enum name\n * @param {IEnum} json Enum descriptor\n * @returns {Enum} Created enum\n * @throws {TypeError} If arguments are invalid\n */\nEnum.fromJSON = function fromJSON(name, json) {\n    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\n    enm.reserved = json.reserved;\n    return enm;\n};\n\n/**\n * Converts this enum to an enum descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IEnum} Enum descriptor\n */\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\"  , this.options,\n        \"values\"   , this.values,\n        \"reserved\" , this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"comment\"  , keepComments ? this.comment : undefined,\n        \"comments\" , keepComments ? this.comments : undefined\n    ]);\n};\n\n/**\n * Adds a value to this enum.\n * @param {string} name Value name\n * @param {number} id Value id\n * @param {string} [comment] Comment, if any\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a value with this name or id\n */\nEnum.prototype.add = function add(name, id, comment) {\n    // utilized by the parser but not by .fromJSON\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    if (!util.isInteger(id))\n        throw TypeError(\"id must be an integer\");\n\n    if (this.values[name] !== undefined)\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\n\n    if (this.isReservedId(id))\n        throw Error(\"id \" + id + \" is reserved in \" + this);\n\n    if (this.isReservedName(name))\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\n\n    if (this.valuesById[id] !== undefined) {\n        if (!(this.options && this.options.allow_alias))\n            throw Error(\"duplicate id \" + id + \" in \" + this);\n        this.values[name] = id;\n    } else\n        this.valuesById[this.values[name] = id] = name;\n\n    this.comments[name] = comment || null;\n    return this;\n};\n\n/**\n * Removes a value from this enum\n * @param {string} name Value name\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `name` is not a name of this enum\n */\nEnum.prototype.remove = function remove(name) {\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    var val = this.values[name];\n    if (val == null)\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\n\n    delete this.valuesById[val];\n    delete this.values[name];\n    delete this.comments[name];\n\n    return this;\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}