{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TranslationServiceClient = void 0;\n/* global window */\nconst gax = require(\"google-gax\");\nconst jsonProtos = require(\"../../protos/protos.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v3/translation_service_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./translation_service_client_config.json\");\nconst google_gax_1 = require(\"google-gax\");\nconst version = require('../../../package.json').version;\n/**\n *  Provides natural language translation operations.\n * @class\n * @memberof v3\n */\nclass TranslationServiceClient {\n  /**\n   * Construct an instance of TranslationServiceClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n   *     In fallback mode, a special browser-compatible transport implementation is used\n   *     instead of gRPC transport. In browser context (if the `window` object is defined)\n   *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n   *     if you need to override this behavior.\n   */\n  constructor(opts) {\n    var _a, _b;\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    };\n    // Ensure that options include all the required fields.\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts);\n    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    }\n    // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n    this._gaxModule = opts.fallback ? gax.fallback : gax;\n    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n    // Save options to use in initialize() method.\n    this._opts = opts;\n    // Save the auth object to the client, for use by other methods.\n    this.auth = this._gaxGrpc.auth;\n    // Set useJWTAccessWithScope on the auth object.\n    this.auth.useJWTAccessWithScope = true;\n    // Set defaultServicePath on the auth object.\n    this.auth.defaultServicePath = staticMembers.servicePath;\n    // Set the default scopes in auth client if needed.\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    }\n    // Determine the client header string.\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    } else if (opts.fallback === 'rest') {\n      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n    }\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    }\n    // Load the applicable protos.\n    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n    // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n    this.pathTemplates = {\n      glossaryPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/glossaries/{glossary}'),\n      locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}')\n    };\n    // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n    this.descriptors.page = {\n      listGlossaries: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'glossaries')\n    };\n    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);\n    // This API contains \"long-running operations\", which return a\n    // an Operation object that allows for tracking of the operation,\n    // rather than holding a request open.\n    this.operationsClient = this._gaxModule.lro({\n      auth: this.auth,\n      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined\n    }).operationsClient(opts);\n    const batchTranslateTextResponse = protoFilesRoot.lookup('.google.cloud.translation.v3.BatchTranslateResponse');\n    const batchTranslateTextMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3.BatchTranslateMetadata');\n    const batchTranslateDocumentResponse = protoFilesRoot.lookup('.google.cloud.translation.v3.BatchTranslateDocumentResponse');\n    const batchTranslateDocumentMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3.BatchTranslateDocumentMetadata');\n    const createGlossaryResponse = protoFilesRoot.lookup('.google.cloud.translation.v3.Glossary');\n    const createGlossaryMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3.CreateGlossaryMetadata');\n    const deleteGlossaryResponse = protoFilesRoot.lookup('.google.cloud.translation.v3.DeleteGlossaryResponse');\n    const deleteGlossaryMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3.DeleteGlossaryMetadata');\n    this.descriptors.longrunning = {\n      batchTranslateText: new this._gaxModule.LongrunningDescriptor(this.operationsClient, batchTranslateTextResponse.decode.bind(batchTranslateTextResponse), batchTranslateTextMetadata.decode.bind(batchTranslateTextMetadata)),\n      batchTranslateDocument: new this._gaxModule.LongrunningDescriptor(this.operationsClient, batchTranslateDocumentResponse.decode.bind(batchTranslateDocumentResponse), batchTranslateDocumentMetadata.decode.bind(batchTranslateDocumentMetadata)),\n      createGlossary: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createGlossaryResponse.decode.bind(createGlossaryResponse), createGlossaryMetadata.decode.bind(createGlossaryMetadata)),\n      deleteGlossary: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteGlossaryResponse.decode.bind(deleteGlossaryResponse), deleteGlossaryMetadata.decode.bind(deleteGlossaryMetadata))\n    };\n    // Put together the default options sent with requests.\n    this._defaults = this._gaxGrpc.constructSettings('google.cloud.translation.v3.TranslationService', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    });\n    // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n    this.innerApiCalls = {};\n    // Add a warn function to the client constructor so it can be easily tested.\n    this.warn = gax.warn;\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n  initialize() {\n    // If the client stub promise is already initialized, return immediately.\n    if (this.translationServiceStub) {\n      return this.translationServiceStub;\n    }\n    // Put together the \"service stub\" for\n    // google.cloud.translation.v3.TranslationService.\n    this.translationServiceStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.cloud.translation.v3.TranslationService') :\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.cloud.translation.v3.TranslationService, this._opts, this._providedCustomServicePath);\n    // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n    const translationServiceStubMethods = ['translateText', 'detectLanguage', 'getSupportedLanguages', 'translateDocument', 'batchTranslateText', 'batchTranslateDocument', 'createGlossary', 'listGlossaries', 'getGlossary', 'deleteGlossary'];\n    for (const methodName of translationServiceStubMethods) {\n      const callPromise = this.translationServiceStub.then(stub => (...args) => {\n        if (this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n        const func = stub[methodName];\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.page[methodName] || this.descriptors.longrunning[methodName] || undefined;\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\n      this.innerApiCalls[methodName] = apiCall;\n    }\n    return this.translationServiceStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n  static get servicePath() {\n    return 'translate.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   * @returns {string} The DNS address for this service.\n   */\n  static get apiEndpoint() {\n    return 'translate.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloud-translation'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @returns {Promise} A promise that resolves to string containing the project ID.\n   */\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n    return this.auth.getProjectId();\n  }\n  /**\n   * Translates input text and returns translated text.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string[]} request.contents\n   *   Required. The content of the input in string format.\n   *   We recommend the total content be less than 30k codepoints. The max length\n   *   of this field is 1024.\n   *   Use BatchTranslateText for larger text.\n   * @param {string} [request.mimeType]\n   *   Optional. The format of the source text, for example, \"text/html\",\n   *    \"text/plain\". If left blank, the MIME type defaults to \"text/html\".\n   * @param {string} [request.sourceLanguageCode]\n   *   Optional. The BCP-47 language code of the input text if\n   *   known, for example, \"en-US\" or \"sr-Latn\". Supported language codes are\n   *   listed in Language Support. If the source language isn't specified, the API\n   *   attempts to identify the source language automatically and returns the\n   *   source language within the response.\n   * @param {string} request.targetLanguageCode\n   *   Required. The BCP-47 language code to use for translation of the input\n   *   text, set to one of the language codes listed in Language Support.\n   * @param {string} request.parent\n   *   Required. Project or location to make a call. Must refer to a caller's\n   *   project.\n   *\n   *   Format: `projects/{project-number-or-id}` or\n   *   `projects/{project-number-or-id}/locations/{location-id}`.\n   *\n   *   For global calls, use `projects/{project-number-or-id}/locations/global` or\n   *   `projects/{project-number-or-id}`.\n   *\n   *   Non-global location is required for requests using AutoML models or\n   *   custom glossaries.\n   *\n   *   Models and glossaries must be within the same region (have same\n   *   location-id), otherwise an INVALID_ARGUMENT (400) error is returned.\n   * @param {string} [request.model]\n   *   Optional. The `model` type requested for this translation.\n   *\n   *   The format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n   *\n   *\n   *   For global (non-regionalized) requests, use `location-id` `global`.\n   *   For example,\n   *   `projects/{project-number-or-id}/locations/global/models/general/nmt`.\n   *\n   *   If not provided, the default Google model (NMT) will be used.\n   * @param {google.cloud.translation.v3.TranslateTextGlossaryConfig} [request.glossaryConfig]\n   *   Optional. Glossary to be applied. The glossary must be\n   *   within the same region (have the same location-id) as the model, otherwise\n   *   an INVALID_ARGUMENT (400) error is returned.\n   * @param {number[]} [request.labels]\n   *   Optional. The labels with user-defined metadata for the request.\n   *\n   *   Label keys and values can be no longer than 63 characters\n   *   (Unicode codepoints), can only contain lowercase letters, numeric\n   *   characters, underscores and dashes. International characters are allowed.\n   *   Label values are optional. Label keys must start with a letter.\n   *\n   *   See https://cloud.google.com/translate/docs/advanced/labels for more\n   *   information.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [TranslateTextResponse]{@link google.cloud.translation.v3.TranslateTextResponse}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.translateText(request);\n   */\n  translateText(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.translateText(request, options, callback);\n  }\n  /**\n   * Detects the language of text within a request.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Project or location to make a call. Must refer to a caller's\n   *   project.\n   *\n   *   Format: `projects/{project-number-or-id}/locations/{location-id}` or\n   *   `projects/{project-number-or-id}`.\n   *\n   *   For global calls, use `projects/{project-number-or-id}/locations/global` or\n   *   `projects/{project-number-or-id}`.\n   *\n   *   Only models within the same region (has same location-id) can be used.\n   *   Otherwise an INVALID_ARGUMENT (400) error is returned.\n   * @param {string} [request.model]\n   *   Optional. The language detection model to be used.\n   *\n   *   Format:\n   *   `projects/{project-number-or-id}/locations/{location-id}/models/language-detection/{model-id}`\n   *\n   *   Only one language detection model is currently supported:\n   *   `projects/{project-number-or-id}/locations/{location-id}/models/language-detection/default`.\n   *\n   *   If not specified, the default model is used.\n   * @param {string} request.content\n   *   The content of the input stored as a string.\n   * @param {string} [request.mimeType]\n   *   Optional. The format of the source text, for example, \"text/html\",\n   *   \"text/plain\". If left blank, the MIME type defaults to \"text/html\".\n   * @param {number[]} [request.labels]\n   *   Optional. The labels with user-defined metadata for the request.\n   *\n   *   Label keys and values can be no longer than 63 characters\n   *   (Unicode codepoints), can only contain lowercase letters, numeric\n   *   characters, underscores and dashes. International characters are allowed.\n   *   Label values are optional. Label keys must start with a letter.\n   *\n   *   See https://cloud.google.com/translate/docs/advanced/labels for more\n   *   information.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [DetectLanguageResponse]{@link google.cloud.translation.v3.DetectLanguageResponse}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.detectLanguage(request);\n   */\n  detectLanguage(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.detectLanguage(request, options, callback);\n  }\n  /**\n   * Returns a list of supported languages for translation.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Project or location to make a call. Must refer to a caller's\n   *   project.\n   *\n   *   Format: `projects/{project-number-or-id}` or\n   *   `projects/{project-number-or-id}/locations/{location-id}`.\n   *\n   *   For global calls, use `projects/{project-number-or-id}/locations/global` or\n   *   `projects/{project-number-or-id}`.\n   *\n   *   Non-global location is required for AutoML models.\n   *\n   *   Only models within the same region (have same location-id) can be used,\n   *   otherwise an INVALID_ARGUMENT (400) error is returned.\n   * @param {string} [request.displayLanguageCode]\n   *   Optional. The language to use to return localized, human readable names\n   *   of supported languages. If missing, then display names are not returned\n   *   in a response.\n   * @param {string} [request.model]\n   *   Optional. Get supported languages of this model.\n   *\n   *   The format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n   *\n   *\n   *   Returns languages supported by the specified model.\n   *   If missing, we get supported languages of Google general NMT model.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [SupportedLanguages]{@link google.cloud.translation.v3.SupportedLanguages}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getSupportedLanguages(request);\n   */\n  getSupportedLanguages(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getSupportedLanguages(request, options, callback);\n  }\n  /**\n   * Translates documents in synchronous mode.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Location to make a regional call.\n   *\n   *   Format: `projects/{project-number-or-id}/locations/{location-id}`.\n   *\n   *   For global calls, use `projects/{project-number-or-id}/locations/global` or\n   *   `projects/{project-number-or-id}`.\n   *\n   *   Non-global location is required for requests using AutoML models or custom\n   *   glossaries.\n   *\n   *   Models and glossaries must be within the same region (have the same\n   *   location-id), otherwise an INVALID_ARGUMENT (400) error is returned.\n   * @param {string} [request.sourceLanguageCode]\n   *   Optional. The BCP-47 language code of the input document if known, for\n   *   example, \"en-US\" or \"sr-Latn\". Supported language codes are listed in\n   *   Language Support. If the source language isn't specified, the API attempts\n   *   to identify the source language automatically and returns the source\n   *   language within the response. Source language must be specified if the\n   *   request contains a glossary or a custom model.\n   * @param {string} request.targetLanguageCode\n   *   Required. The BCP-47 language code to use for translation of the input\n   *   document, set to one of the language codes listed in Language Support.\n   * @param {google.cloud.translation.v3.DocumentInputConfig} request.documentInputConfig\n   *   Required. Input configurations.\n   * @param {google.cloud.translation.v3.DocumentOutputConfig} [request.documentOutputConfig]\n   *   Optional. Output configurations.\n   *   Defines if the output file should be stored within Cloud Storage as well\n   *   as the desired output format. If not provided the translated file will\n   *   only be returned through a byte-stream and its output mime type will be\n   *   the same as the input file's mime type.\n   * @param {string} [request.model]\n   *   Optional. The `model` type requested for this translation.\n   *\n   *   The format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n   *\n   *\n   *   If not provided, the default Google model (NMT) will be used for\n   *   translation.\n   * @param {google.cloud.translation.v3.TranslateTextGlossaryConfig} [request.glossaryConfig]\n   *   Optional. Glossary to be applied. The glossary must be within the same\n   *   region (have the same location-id) as the model, otherwise an\n   *   INVALID_ARGUMENT (400) error is returned.\n   * @param {number[]} [request.labels]\n   *   Optional. The labels with user-defined metadata for the request.\n   *\n   *   Label keys and values can be no longer than 63 characters (Unicode\n   *   codepoints), can only contain lowercase letters, numeric characters,\n   *   underscores and dashes. International characters are allowed. Label values\n   *   are optional. Label keys must start with a letter.\n   *\n   *   See https://cloud.google.com/translate/docs/advanced/labels for more\n   *   information.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [TranslateDocumentResponse]{@link google.cloud.translation.v3.TranslateDocumentResponse}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.translateDocument(request);\n   */\n  translateDocument(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.translateDocument(request, options, callback);\n  }\n  /**\n   * Gets a glossary. Returns NOT_FOUND, if the glossary doesn't\n   * exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The name of the glossary to retrieve.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing [Glossary]{@link google.cloud.translation.v3.Glossary}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * const [response] = await client.getGlossary(request);\n   */\n  getGlossary(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getGlossary(request, options, callback);\n  }\n  /**\n   * Translates a large volume of text in asynchronous batch mode.\n   * This function provides real-time output as the inputs are being processed.\n   * If caller cancels a request, the partial results (for an input file, it's\n   * all or nothing) may still be available on the specified output location.\n   *\n   * This call returns immediately and you can\n   * use google.longrunning.Operation.name to poll the status of the call.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Location to make a call. Must refer to a caller's project.\n   *\n   *   Format: `projects/{project-number-or-id}/locations/{location-id}`.\n   *\n   *   The `global` location is not supported for batch translation.\n   *\n   *   Only AutoML Translation models or glossaries within the same region (have\n   *   the same location-id) can be used, otherwise an INVALID_ARGUMENT (400)\n   *   error is returned.\n   * @param {string} request.sourceLanguageCode\n   *   Required. Source language code.\n   * @param {string[]} request.targetLanguageCodes\n   *   Required. Specify up to 10 language codes here.\n   * @param {number[]} [request.models]\n   *   Optional. The models to use for translation. Map's key is target language\n   *   code. Map's value is model name. Value can be a built-in general model,\n   *   or an AutoML Translation model.\n   *\n   *   The value format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n   *\n   *\n   *   If the map is empty or a specific model is\n   *   not requested for a language pair, then default google model (nmt) is used.\n   * @param {number[]} request.inputConfigs\n   *   Required. Input configurations.\n   *   The total number of files matched should be <= 100.\n   *   The total content size should be <= 100M Unicode codepoints.\n   *   The files must use UTF-8 encoding.\n   * @param {google.cloud.translation.v3.OutputConfig} request.outputConfig\n   *   Required. Output configuration.\n   *   If 2 input configs match to the same file (that is, same input path),\n   *   we don't generate output for duplicate inputs.\n   * @param {number[]} [request.glossaries]\n   *   Optional. Glossaries to be applied for translation.\n   *   It's keyed by target language code.\n   * @param {number[]} [request.labels]\n   *   Optional. The labels with user-defined metadata for the request.\n   *\n   *   Label keys and values can be no longer than 63 characters\n   *   (Unicode codepoints), can only contain lowercase letters, numeric\n   *   characters, underscores and dashes. International characters are allowed.\n   *   Label values are optional. Label keys must start with a letter.\n   *\n   *   See https://cloud.google.com/translate/docs/advanced/labels for more\n   *   information.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   *   a long running operation. Its `promise()` method returns a promise\n   *   you can `await` for.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const [operation] = await client.batchTranslateText(request);\n   * const [response] = await operation.promise();\n   */\n  batchTranslateText(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.batchTranslateText(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `batchTranslateText()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const decodedOperation = await checkBatchTranslateTextProgress(name);\n   * console.log(decodedOperation.result);\n   * console.log(decodedOperation.done);\n   * console.log(decodedOperation.metadata);\n   */\n  async checkBatchTranslateTextProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.batchTranslateText, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\n   * Translates a large volume of document in asynchronous batch mode.\n   * This function provides real-time output as the inputs are being processed.\n   * If caller cancels a request, the partial results (for an input file, it's\n   * all or nothing) may still be available on the specified output location.\n   *\n   * This call returns immediately and you can use\n   * google.longrunning.Operation.name to poll the status of the call.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. Location to make a regional call.\n   *\n   *   Format: `projects/{project-number-or-id}/locations/{location-id}`.\n   *\n   *   The `global` location is not supported for batch translation.\n   *\n   *   Only AutoML Translation models or glossaries within the same region (have\n   *   the same location-id) can be used, otherwise an INVALID_ARGUMENT (400)\n   *   error is returned.\n   * @param {string} request.sourceLanguageCode\n   *   Required. The BCP-47 language code of the input document if known, for\n   *   example, \"en-US\" or \"sr-Latn\". Supported language codes are listed in\n   *   Language Support (https://cloud.google.com/translate/docs/languages).\n   * @param {string[]} request.targetLanguageCodes\n   *   Required. The BCP-47 language code to use for translation of the input\n   *   document. Specify up to 10 language codes here.\n   * @param {number[]} request.inputConfigs\n   *   Required. Input configurations.\n   *   The total number of files matched should be <= 100.\n   *   The total content size to translate should be <= 100M Unicode codepoints.\n   *   The files must use UTF-8 encoding.\n   * @param {google.cloud.translation.v3.BatchDocumentOutputConfig} request.outputConfig\n   *   Required. Output configuration.\n   *   If 2 input configs match to the same file (that is, same input path),\n   *   we don't generate output for duplicate inputs.\n   * @param {number[]} [request.models]\n   *   Optional. The models to use for translation. Map's key is target language\n   *   code. Map's value is the model name. Value can be a built-in general model,\n   *   or an AutoML Translation model.\n   *\n   *   The value format depends on model type:\n   *\n   *   - AutoML Translation models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n   *\n   *   - General (built-in) models:\n   *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n   *\n   *\n   *   If the map is empty or a specific model is\n   *   not requested for a language pair, then default google model (nmt) is used.\n   * @param {number[]} [request.glossaries]\n   *   Optional. Glossaries to be applied. It's keyed by target language code.\n   * @param {number[]} [request.formatConversions]\n   *   Optional. File format conversion map to be applied to all input files.\n   *   Map's key is the original mime_type. Map's value is the target mime_type of\n   *   translated documents.\n   *\n   *   Supported file format conversion includes:\n   *   - `application/pdf` to\n   *     `application/vnd.openxmlformats-officedocument.wordprocessingml.document`\n   *\n   *   If nothing specified, output files will be in the same format as the\n   *   original file.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   *   a long running operation. Its `promise()` method returns a promise\n   *   you can `await` for.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const [operation] = await client.batchTranslateDocument(request);\n   * const [response] = await operation.promise();\n   */\n  batchTranslateDocument(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.batchTranslateDocument(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `batchTranslateDocument()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const decodedOperation = await checkBatchTranslateDocumentProgress(name);\n   * console.log(decodedOperation.result);\n   * console.log(decodedOperation.done);\n   * console.log(decodedOperation.metadata);\n   */\n  async checkBatchTranslateDocumentProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.batchTranslateDocument, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\n   * Creates a glossary and returns the long-running operation. Returns\n   * NOT_FOUND, if the project doesn't exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The project name.\n   * @param {google.cloud.translation.v3.Glossary} request.glossary\n   *   Required. The glossary to create.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   *   a long running operation. Its `promise()` method returns a promise\n   *   you can `await` for.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const [operation] = await client.createGlossary(request);\n   * const [response] = await operation.promise();\n   */\n  createGlossary(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.createGlossary(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `createGlossary()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const decodedOperation = await checkCreateGlossaryProgress(name);\n   * console.log(decodedOperation.result);\n   * console.log(decodedOperation.done);\n   * console.log(decodedOperation.metadata);\n   */\n  async checkCreateGlossaryProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createGlossary, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\n   * Deletes a glossary, or cancels glossary construction\n   * if the glossary isn't created yet.\n   * Returns NOT_FOUND, if the glossary doesn't exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Required. The name of the glossary to delete.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   *   a long running operation. Its `promise()` method returns a promise\n   *   you can `await` for.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const [operation] = await client.deleteGlossary(request);\n   * const [response] = await operation.promise();\n   */\n  deleteGlossary(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      name: request.name || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.deleteGlossary(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `deleteGlossary()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example\n   * const decodedOperation = await checkDeleteGlossaryProgress(name);\n   * console.log(decodedOperation.result);\n   * console.log(decodedOperation.done);\n   * console.log(decodedOperation.metadata);\n   */\n  async checkDeleteGlossaryProgress(name) {\n    const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deleteGlossary, gax.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  /**\n   * Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't\n   * exist.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the project from which to list all of the glossaries.\n   * @param {number} [request.pageSize]\n   *   Optional. Requested page size. The server may return fewer glossaries than\n   *   requested. If unspecified, the server picks an appropriate default.\n   * @param {string} [request.pageToken]\n   *   Optional. A token identifying a page of results the server should return.\n   *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n   *   returned from the previous call to `ListGlossaries` method.\n   *   The first page is returned if `page_token`is empty or missing.\n   * @param {string} [request.filter]\n   *   Optional. Filter specifying constraints of a list operation.\n   *   Specify the constraint by the format of \"key=value\", where key must be\n   *   \"src\" or \"tgt\", and the value must be a valid language code.\n   *   For multiple restrictions, concatenate them by \"AND\" (uppercase only),\n   *   such as: \"src=en-US AND tgt=zh-CN\". Notice that the exact match is used\n   *   here, which means using 'en-US' and 'en' can lead to different results,\n   *   which depends on the language code you used when you create the glossary.\n   *   For the unidirectional glossaries, the \"src\" and \"tgt\" add restrictions\n   *   on the source and target language code separately.\n   *   For the equivalent term set glossaries, the \"src\" and/or \"tgt\" add\n   *   restrictions on the term set.\n   *   For example: \"src=en-US AND tgt=zh-CN\" will only pick the unidirectional\n   *   glossaries which exactly match the source language code as \"en-US\" and the\n   *   target language code \"zh-CN\", but all equivalent term set glossaries which\n   *   contain \"en-US\" and \"zh-CN\" in their language set will be picked.\n   *   If missing, no filtering is performed.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of [Glossary]{@link google.cloud.translation.v3.Glossary}.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed and will merge results from all the pages into this array.\n   *   Note that it can affect your quota.\n   *   We recommend using `listGlossariesAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n  listGlossaries(request, optionsOrCallback, callback) {\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listGlossaries(request, options, callback);\n  }\n  /**\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the project from which to list all of the glossaries.\n   * @param {number} [request.pageSize]\n   *   Optional. Requested page size. The server may return fewer glossaries than\n   *   requested. If unspecified, the server picks an appropriate default.\n   * @param {string} [request.pageToken]\n   *   Optional. A token identifying a page of results the server should return.\n   *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n   *   returned from the previous call to `ListGlossaries` method.\n   *   The first page is returned if `page_token`is empty or missing.\n   * @param {string} [request.filter]\n   *   Optional. Filter specifying constraints of a list operation.\n   *   Specify the constraint by the format of \"key=value\", where key must be\n   *   \"src\" or \"tgt\", and the value must be a valid language code.\n   *   For multiple restrictions, concatenate them by \"AND\" (uppercase only),\n   *   such as: \"src=en-US AND tgt=zh-CN\". Notice that the exact match is used\n   *   here, which means using 'en-US' and 'en' can lead to different results,\n   *   which depends on the language code you used when you create the glossary.\n   *   For the unidirectional glossaries, the \"src\" and \"tgt\" add restrictions\n   *   on the source and target language code separately.\n   *   For the equivalent term set glossaries, the \"src\" and/or \"tgt\" add\n   *   restrictions on the term set.\n   *   For example: \"src=en-US AND tgt=zh-CN\" will only pick the unidirectional\n   *   glossaries which exactly match the source language code as \"en-US\" and the\n   *   target language code \"zh-CN\", but all equivalent term set glossaries which\n   *   contain \"en-US\" and \"zh-CN\" in their language set will be picked.\n   *   If missing, no filtering is performed.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing [Glossary]{@link google.cloud.translation.v3.Glossary} on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `listGlossariesAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n  listGlossariesStream(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    const defaultCallSettings = this._defaults['listGlossaries'];\n    const callSettings = defaultCallSettings.merge(options);\n    this.initialize();\n    return this.descriptors.page.listGlossaries.createStream(this.innerApiCalls.listGlossaries, request, callSettings);\n  }\n  /**\n   * Equivalent to `listGlossaries`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. The name of the project from which to list all of the glossaries.\n   * @param {number} [request.pageSize]\n   *   Optional. Requested page size. The server may return fewer glossaries than\n   *   requested. If unspecified, the server picks an appropriate default.\n   * @param {string} [request.pageToken]\n   *   Optional. A token identifying a page of results the server should return.\n   *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n   *   returned from the previous call to `ListGlossaries` method.\n   *   The first page is returned if `page_token`is empty or missing.\n   * @param {string} [request.filter]\n   *   Optional. Filter specifying constraints of a list operation.\n   *   Specify the constraint by the format of \"key=value\", where key must be\n   *   \"src\" or \"tgt\", and the value must be a valid language code.\n   *   For multiple restrictions, concatenate them by \"AND\" (uppercase only),\n   *   such as: \"src=en-US AND tgt=zh-CN\". Notice that the exact match is used\n   *   here, which means using 'en-US' and 'en' can lead to different results,\n   *   which depends on the language code you used when you create the glossary.\n   *   For the unidirectional glossaries, the \"src\" and \"tgt\" add restrictions\n   *   on the source and target language code separately.\n   *   For the equivalent term set glossaries, the \"src\" and/or \"tgt\" add\n   *   restrictions on the term set.\n   *   For example: \"src=en-US AND tgt=zh-CN\" will only pick the unidirectional\n   *   glossaries which exactly match the source language code as \"en-US\" and the\n   *   target language code \"zh-CN\", but all equivalent term set glossaries which\n   *   contain \"en-US\" and \"zh-CN\" in their language set will be picked.\n   *   If missing, no filtering is performed.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   [Glossary]{@link google.cloud.translation.v3.Glossary}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * const iterable = client.listGlossariesAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   */\n  listGlossariesAsync(request, options) {\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n      parent: request.parent || ''\n    });\n    options = options || {};\n    const defaultCallSettings = this._defaults['listGlossaries'];\n    const callSettings = defaultCallSettings.merge(options);\n    this.initialize();\n    return this.descriptors.page.listGlossaries.asyncIterate(this.innerApiCalls['listGlossaries'], request, callSettings);\n  }\n  // --------------------\n  // -- Path templates --\n  // --------------------\n  /**\n   * Return a fully-qualified glossary resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @param {string} glossary\n   * @returns {string} Resource name string.\n   */\n  glossaryPath(project, location, glossary) {\n    return this.pathTemplates.glossaryPathTemplate.render({\n      project: project,\n      location: location,\n      glossary: glossary\n    });\n  }\n  /**\n   * Parse the project from Glossary resource.\n   *\n   * @param {string} glossaryName\n   *   A fully-qualified path representing Glossary resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromGlossaryName(glossaryName) {\n    return this.pathTemplates.glossaryPathTemplate.match(glossaryName).project;\n  }\n  /**\n   * Parse the location from Glossary resource.\n   *\n   * @param {string} glossaryName\n   *   A fully-qualified path representing Glossary resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromGlossaryName(glossaryName) {\n    return this.pathTemplates.glossaryPathTemplate.match(glossaryName).location;\n  }\n  /**\n   * Parse the glossary from Glossary resource.\n   *\n   * @param {string} glossaryName\n   *   A fully-qualified path representing Glossary resource.\n   * @returns {string} A string representing the glossary.\n   */\n  matchGlossaryFromGlossaryName(glossaryName) {\n    return this.pathTemplates.glossaryPathTemplate.match(glossaryName).glossary;\n  }\n  /**\n   * Return a fully-qualified location resource name string.\n   *\n   * @param {string} project\n   * @param {string} location\n   * @returns {string} Resource name string.\n   */\n  locationPath(project, location) {\n    return this.pathTemplates.locationPathTemplate.render({\n      project: project,\n      location: location\n    });\n  }\n  /**\n   * Parse the project from Location resource.\n   *\n   * @param {string} locationName\n   *   A fully-qualified path representing Location resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromLocationName(locationName) {\n    return this.pathTemplates.locationPathTemplate.match(locationName).project;\n  }\n  /**\n   * Parse the location from Location resource.\n   *\n   * @param {string} locationName\n   *   A fully-qualified path representing Location resource.\n   * @returns {string} A string representing the location.\n   */\n  matchLocationFromLocationName(locationName) {\n    return this.pathTemplates.locationPathTemplate.match(locationName).location;\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n  close() {\n    this.initialize();\n    if (!this._terminated) {\n      return this.translationServiceStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n        this.operationsClient.close();\n      });\n    }\n    return Promise.resolve();\n  }\n}\nexports.TranslationServiceClient = TranslationServiceClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","TranslationServiceClient","gax","require","jsonProtos","gapicConfig","google_gax_1","version","constructor","opts","_a","_b","_terminated","descriptors","page","stream","longrunning","batching","staticMembers","servicePath","apiEndpoint","_providedCustomServicePath","port","clientConfig","fallback","window","fetch","assign","scopes","_gaxModule","_gaxGrpc","GrpcClient","_opts","auth","useJWTAccessWithScope","defaultServicePath","defaultScopes","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","_protos","loadProtoJSON","pathTemplates","glossaryPathTemplate","PathTemplate","locationPathTemplate","listGlossaries","PageDescriptor","protoFilesRoot","protobuf","Root","fromJSON","operationsClient","lro","grpc","undefined","batchTranslateTextResponse","lookup","batchTranslateTextMetadata","batchTranslateDocumentResponse","batchTranslateDocumentMetadata","createGlossaryResponse","createGlossaryMetadata","deleteGlossaryResponse","deleteGlossaryMetadata","batchTranslateText","LongrunningDescriptor","decode","bind","batchTranslateDocument","createGlossary","deleteGlossary","_defaults","constructSettings","join","innerApiCalls","warn","initialize","translationServiceStub","createStub","lookupService","google","cloud","translation","v3","TranslationService","translationServiceStubMethods","methodName","callPromise","then","stub","args","Promise","reject","func","apply","err","descriptor","apiCall","createApiCall","getProjectId","callback","translateText","request","optionsOrCallback","options","otherArgs","headers","routingHeader","fromParams","parent","detectLanguage","getSupportedLanguages","translateDocument","getGlossary","name","checkBatchTranslateTextProgress","operationsProtos","GetOperationRequest","operation","getOperation","decodeOperation","Operation","createDefaultBackoffSettings","checkBatchTranslateDocumentProgress","checkCreateGlossaryProgress","checkDeleteGlossaryProgress","listGlossariesStream","defaultCallSettings","callSettings","merge","createStream","listGlossariesAsync","asyncIterate","glossaryPath","project","location","glossary","render","matchProjectFromGlossaryName","glossaryName","match","matchLocationFromGlossaryName","matchGlossaryFromGlossaryName","locationPath","matchProjectFromLocationName","locationName","matchLocationFromLocationName","close","resolve"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/@google-cloud/translate/build/src/v3/translation_service_client.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TranslationServiceClient = void 0;\n/* global window */\nconst gax = require(\"google-gax\");\nconst jsonProtos = require(\"../../protos/protos.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v3/translation_service_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./translation_service_client_config.json\");\nconst google_gax_1 = require(\"google-gax\");\nconst version = require('../../../package.json').version;\n/**\n *  Provides natural language translation operations.\n * @class\n * @memberof v3\n */\nclass TranslationServiceClient {\n    /**\n     * Construct an instance of TranslationServiceClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n     *     In fallback mode, a special browser-compatible transport implementation is used\n     *     instead of gRPC transport. In browser context (if the `window` object is defined)\n     *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n     *     if you need to override this behavior.\n     */\n    constructor(opts) {\n        var _a, _b;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gax.fallback : gax;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set useJWTAccessWithScope on the auth object.\n        this.auth.useJWTAccessWithScope = true;\n        // Set defaultServicePath on the auth object.\n        this.auth.defaultServicePath = staticMembers.servicePath;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === staticMembers.servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        else if (opts.fallback === 'rest') {\n            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n        // This API contains \"path templates\"; forward-slash-separated\n        // identifiers to uniquely identify resources within the API.\n        // Create useful helper objects for these.\n        this.pathTemplates = {\n            glossaryPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/glossaries/{glossary}'),\n            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),\n        };\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listGlossaries: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'glossaries'),\n        };\n        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);\n        // This API contains \"long-running operations\", which return a\n        // an Operation object that allows for tracking of the operation,\n        // rather than holding a request open.\n        this.operationsClient = this._gaxModule\n            .lro({\n            auth: this.auth,\n            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,\n        })\n            .operationsClient(opts);\n        const batchTranslateTextResponse = protoFilesRoot.lookup('.google.cloud.translation.v3.BatchTranslateResponse');\n        const batchTranslateTextMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3.BatchTranslateMetadata');\n        const batchTranslateDocumentResponse = protoFilesRoot.lookup('.google.cloud.translation.v3.BatchTranslateDocumentResponse');\n        const batchTranslateDocumentMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3.BatchTranslateDocumentMetadata');\n        const createGlossaryResponse = protoFilesRoot.lookup('.google.cloud.translation.v3.Glossary');\n        const createGlossaryMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3.CreateGlossaryMetadata');\n        const deleteGlossaryResponse = protoFilesRoot.lookup('.google.cloud.translation.v3.DeleteGlossaryResponse');\n        const deleteGlossaryMetadata = protoFilesRoot.lookup('.google.cloud.translation.v3.DeleteGlossaryMetadata');\n        this.descriptors.longrunning = {\n            batchTranslateText: new this._gaxModule.LongrunningDescriptor(this.operationsClient, batchTranslateTextResponse.decode.bind(batchTranslateTextResponse), batchTranslateTextMetadata.decode.bind(batchTranslateTextMetadata)),\n            batchTranslateDocument: new this._gaxModule.LongrunningDescriptor(this.operationsClient, batchTranslateDocumentResponse.decode.bind(batchTranslateDocumentResponse), batchTranslateDocumentMetadata.decode.bind(batchTranslateDocumentMetadata)),\n            createGlossary: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createGlossaryResponse.decode.bind(createGlossaryResponse), createGlossaryMetadata.decode.bind(createGlossaryMetadata)),\n            deleteGlossary: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteGlossaryResponse.decode.bind(deleteGlossaryResponse), deleteGlossaryMetadata.decode.bind(deleteGlossaryMetadata)),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.cloud.translation.v3.TranslationService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        // Add a warn function to the client constructor so it can be easily tested.\n        this.warn = gax.warn;\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.translationServiceStub) {\n            return this.translationServiceStub;\n        }\n        // Put together the \"service stub\" for\n        // google.cloud.translation.v3.TranslationService.\n        this.translationServiceStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.cloud.translation.v3.TranslationService')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.cloud.translation.v3.TranslationService, this._opts, this._providedCustomServicePath);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const translationServiceStubMethods = [\n            'translateText',\n            'detectLanguage',\n            'getSupportedLanguages',\n            'translateDocument',\n            'batchTranslateText',\n            'batchTranslateDocument',\n            'createGlossary',\n            'listGlossaries',\n            'getGlossary',\n            'deleteGlossary',\n        ];\n        for (const methodName of translationServiceStubMethods) {\n            const callPromise = this.translationServiceStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.page[methodName] ||\n                this.descriptors.longrunning[methodName] ||\n                undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.translationServiceStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        return 'translate.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        return 'translate.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/cloud-translation',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    /**\n     * Translates input text and returns translated text.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string[]} request.contents\n     *   Required. The content of the input in string format.\n     *   We recommend the total content be less than 30k codepoints. The max length\n     *   of this field is 1024.\n     *   Use BatchTranslateText for larger text.\n     * @param {string} [request.mimeType]\n     *   Optional. The format of the source text, for example, \"text/html\",\n     *    \"text/plain\". If left blank, the MIME type defaults to \"text/html\".\n     * @param {string} [request.sourceLanguageCode]\n     *   Optional. The BCP-47 language code of the input text if\n     *   known, for example, \"en-US\" or \"sr-Latn\". Supported language codes are\n     *   listed in Language Support. If the source language isn't specified, the API\n     *   attempts to identify the source language automatically and returns the\n     *   source language within the response.\n     * @param {string} request.targetLanguageCode\n     *   Required. The BCP-47 language code to use for translation of the input\n     *   text, set to one of the language codes listed in Language Support.\n     * @param {string} request.parent\n     *   Required. Project or location to make a call. Must refer to a caller's\n     *   project.\n     *\n     *   Format: `projects/{project-number-or-id}` or\n     *   `projects/{project-number-or-id}/locations/{location-id}`.\n     *\n     *   For global calls, use `projects/{project-number-or-id}/locations/global` or\n     *   `projects/{project-number-or-id}`.\n     *\n     *   Non-global location is required for requests using AutoML models or\n     *   custom glossaries.\n     *\n     *   Models and glossaries must be within the same region (have same\n     *   location-id), otherwise an INVALID_ARGUMENT (400) error is returned.\n     * @param {string} [request.model]\n     *   Optional. The `model` type requested for this translation.\n     *\n     *   The format depends on model type:\n     *\n     *   - AutoML Translation models:\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n     *\n     *   - General (built-in) models:\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n     *\n     *\n     *   For global (non-regionalized) requests, use `location-id` `global`.\n     *   For example,\n     *   `projects/{project-number-or-id}/locations/global/models/general/nmt`.\n     *\n     *   If not provided, the default Google model (NMT) will be used.\n     * @param {google.cloud.translation.v3.TranslateTextGlossaryConfig} [request.glossaryConfig]\n     *   Optional. Glossary to be applied. The glossary must be\n     *   within the same region (have the same location-id) as the model, otherwise\n     *   an INVALID_ARGUMENT (400) error is returned.\n     * @param {number[]} [request.labels]\n     *   Optional. The labels with user-defined metadata for the request.\n     *\n     *   Label keys and values can be no longer than 63 characters\n     *   (Unicode codepoints), can only contain lowercase letters, numeric\n     *   characters, underscores and dashes. International characters are allowed.\n     *   Label values are optional. Label keys must start with a letter.\n     *\n     *   See https://cloud.google.com/translate/docs/advanced/labels for more\n     *   information.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [TranslateTextResponse]{@link google.cloud.translation.v3.TranslateTextResponse}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.translateText(request);\n     */\n    translateText(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                parent: request.parent || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.translateText(request, options, callback);\n    }\n    /**\n     * Detects the language of text within a request.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. Project or location to make a call. Must refer to a caller's\n     *   project.\n     *\n     *   Format: `projects/{project-number-or-id}/locations/{location-id}` or\n     *   `projects/{project-number-or-id}`.\n     *\n     *   For global calls, use `projects/{project-number-or-id}/locations/global` or\n     *   `projects/{project-number-or-id}`.\n     *\n     *   Only models within the same region (has same location-id) can be used.\n     *   Otherwise an INVALID_ARGUMENT (400) error is returned.\n     * @param {string} [request.model]\n     *   Optional. The language detection model to be used.\n     *\n     *   Format:\n     *   `projects/{project-number-or-id}/locations/{location-id}/models/language-detection/{model-id}`\n     *\n     *   Only one language detection model is currently supported:\n     *   `projects/{project-number-or-id}/locations/{location-id}/models/language-detection/default`.\n     *\n     *   If not specified, the default model is used.\n     * @param {string} request.content\n     *   The content of the input stored as a string.\n     * @param {string} [request.mimeType]\n     *   Optional. The format of the source text, for example, \"text/html\",\n     *   \"text/plain\". If left blank, the MIME type defaults to \"text/html\".\n     * @param {number[]} [request.labels]\n     *   Optional. The labels with user-defined metadata for the request.\n     *\n     *   Label keys and values can be no longer than 63 characters\n     *   (Unicode codepoints), can only contain lowercase letters, numeric\n     *   characters, underscores and dashes. International characters are allowed.\n     *   Label values are optional. Label keys must start with a letter.\n     *\n     *   See https://cloud.google.com/translate/docs/advanced/labels for more\n     *   information.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [DetectLanguageResponse]{@link google.cloud.translation.v3.DetectLanguageResponse}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.detectLanguage(request);\n     */\n    detectLanguage(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                parent: request.parent || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.detectLanguage(request, options, callback);\n    }\n    /**\n     * Returns a list of supported languages for translation.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. Project or location to make a call. Must refer to a caller's\n     *   project.\n     *\n     *   Format: `projects/{project-number-or-id}` or\n     *   `projects/{project-number-or-id}/locations/{location-id}`.\n     *\n     *   For global calls, use `projects/{project-number-or-id}/locations/global` or\n     *   `projects/{project-number-or-id}`.\n     *\n     *   Non-global location is required for AutoML models.\n     *\n     *   Only models within the same region (have same location-id) can be used,\n     *   otherwise an INVALID_ARGUMENT (400) error is returned.\n     * @param {string} [request.displayLanguageCode]\n     *   Optional. The language to use to return localized, human readable names\n     *   of supported languages. If missing, then display names are not returned\n     *   in a response.\n     * @param {string} [request.model]\n     *   Optional. Get supported languages of this model.\n     *\n     *   The format depends on model type:\n     *\n     *   - AutoML Translation models:\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n     *\n     *   - General (built-in) models:\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n     *\n     *\n     *   Returns languages supported by the specified model.\n     *   If missing, we get supported languages of Google general NMT model.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [SupportedLanguages]{@link google.cloud.translation.v3.SupportedLanguages}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getSupportedLanguages(request);\n     */\n    getSupportedLanguages(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                parent: request.parent || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getSupportedLanguages(request, options, callback);\n    }\n    /**\n     * Translates documents in synchronous mode.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. Location to make a regional call.\n     *\n     *   Format: `projects/{project-number-or-id}/locations/{location-id}`.\n     *\n     *   For global calls, use `projects/{project-number-or-id}/locations/global` or\n     *   `projects/{project-number-or-id}`.\n     *\n     *   Non-global location is required for requests using AutoML models or custom\n     *   glossaries.\n     *\n     *   Models and glossaries must be within the same region (have the same\n     *   location-id), otherwise an INVALID_ARGUMENT (400) error is returned.\n     * @param {string} [request.sourceLanguageCode]\n     *   Optional. The BCP-47 language code of the input document if known, for\n     *   example, \"en-US\" or \"sr-Latn\". Supported language codes are listed in\n     *   Language Support. If the source language isn't specified, the API attempts\n     *   to identify the source language automatically and returns the source\n     *   language within the response. Source language must be specified if the\n     *   request contains a glossary or a custom model.\n     * @param {string} request.targetLanguageCode\n     *   Required. The BCP-47 language code to use for translation of the input\n     *   document, set to one of the language codes listed in Language Support.\n     * @param {google.cloud.translation.v3.DocumentInputConfig} request.documentInputConfig\n     *   Required. Input configurations.\n     * @param {google.cloud.translation.v3.DocumentOutputConfig} [request.documentOutputConfig]\n     *   Optional. Output configurations.\n     *   Defines if the output file should be stored within Cloud Storage as well\n     *   as the desired output format. If not provided the translated file will\n     *   only be returned through a byte-stream and its output mime type will be\n     *   the same as the input file's mime type.\n     * @param {string} [request.model]\n     *   Optional. The `model` type requested for this translation.\n     *\n     *   The format depends on model type:\n     *\n     *   - AutoML Translation models:\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n     *\n     *   - General (built-in) models:\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n     *\n     *\n     *   If not provided, the default Google model (NMT) will be used for\n     *   translation.\n     * @param {google.cloud.translation.v3.TranslateTextGlossaryConfig} [request.glossaryConfig]\n     *   Optional. Glossary to be applied. The glossary must be within the same\n     *   region (have the same location-id) as the model, otherwise an\n     *   INVALID_ARGUMENT (400) error is returned.\n     * @param {number[]} [request.labels]\n     *   Optional. The labels with user-defined metadata for the request.\n     *\n     *   Label keys and values can be no longer than 63 characters (Unicode\n     *   codepoints), can only contain lowercase letters, numeric characters,\n     *   underscores and dashes. International characters are allowed. Label values\n     *   are optional. Label keys must start with a letter.\n     *\n     *   See https://cloud.google.com/translate/docs/advanced/labels for more\n     *   information.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [TranslateDocumentResponse]{@link google.cloud.translation.v3.TranslateDocumentResponse}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.translateDocument(request);\n     */\n    translateDocument(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                parent: request.parent || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.translateDocument(request, options, callback);\n    }\n    /**\n     * Gets a glossary. Returns NOT_FOUND, if the glossary doesn't\n     * exist.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The name of the glossary to retrieve.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Glossary]{@link google.cloud.translation.v3.Glossary}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getGlossary(request);\n     */\n    getGlossary(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                name: request.name || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getGlossary(request, options, callback);\n    }\n    /**\n     * Translates a large volume of text in asynchronous batch mode.\n     * This function provides real-time output as the inputs are being processed.\n     * If caller cancels a request, the partial results (for an input file, it's\n     * all or nothing) may still be available on the specified output location.\n     *\n     * This call returns immediately and you can\n     * use google.longrunning.Operation.name to poll the status of the call.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. Location to make a call. Must refer to a caller's project.\n     *\n     *   Format: `projects/{project-number-or-id}/locations/{location-id}`.\n     *\n     *   The `global` location is not supported for batch translation.\n     *\n     *   Only AutoML Translation models or glossaries within the same region (have\n     *   the same location-id) can be used, otherwise an INVALID_ARGUMENT (400)\n     *   error is returned.\n     * @param {string} request.sourceLanguageCode\n     *   Required. Source language code.\n     * @param {string[]} request.targetLanguageCodes\n     *   Required. Specify up to 10 language codes here.\n     * @param {number[]} [request.models]\n     *   Optional. The models to use for translation. Map's key is target language\n     *   code. Map's value is model name. Value can be a built-in general model,\n     *   or an AutoML Translation model.\n     *\n     *   The value format depends on model type:\n     *\n     *   - AutoML Translation models:\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n     *\n     *   - General (built-in) models:\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n     *\n     *\n     *   If the map is empty or a specific model is\n     *   not requested for a language pair, then default google model (nmt) is used.\n     * @param {number[]} request.inputConfigs\n     *   Required. Input configurations.\n     *   The total number of files matched should be <= 100.\n     *   The total content size should be <= 100M Unicode codepoints.\n     *   The files must use UTF-8 encoding.\n     * @param {google.cloud.translation.v3.OutputConfig} request.outputConfig\n     *   Required. Output configuration.\n     *   If 2 input configs match to the same file (that is, same input path),\n     *   we don't generate output for duplicate inputs.\n     * @param {number[]} [request.glossaries]\n     *   Optional. Glossaries to be applied for translation.\n     *   It's keyed by target language code.\n     * @param {number[]} [request.labels]\n     *   Optional. The labels with user-defined metadata for the request.\n     *\n     *   Label keys and values can be no longer than 63 characters\n     *   (Unicode codepoints), can only contain lowercase letters, numeric\n     *   characters, underscores and dashes. International characters are allowed.\n     *   Label values are optional. Label keys must start with a letter.\n     *\n     *   See https://cloud.google.com/translate/docs/advanced/labels for more\n     *   information.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     *   a long running operation. Its `promise()` method returns a promise\n     *   you can `await` for.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const [operation] = await client.batchTranslateText(request);\n     * const [response] = await operation.promise();\n     */\n    batchTranslateText(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                parent: request.parent || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.batchTranslateText(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `batchTranslateText()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const decodedOperation = await checkBatchTranslateTextProgress(name);\n     * console.log(decodedOperation.result);\n     * console.log(decodedOperation.done);\n     * console.log(decodedOperation.metadata);\n     */\n    async checkBatchTranslateTextProgress(name) {\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.batchTranslateText, gax.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    /**\n     * Translates a large volume of document in asynchronous batch mode.\n     * This function provides real-time output as the inputs are being processed.\n     * If caller cancels a request, the partial results (for an input file, it's\n     * all or nothing) may still be available on the specified output location.\n     *\n     * This call returns immediately and you can use\n     * google.longrunning.Operation.name to poll the status of the call.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. Location to make a regional call.\n     *\n     *   Format: `projects/{project-number-or-id}/locations/{location-id}`.\n     *\n     *   The `global` location is not supported for batch translation.\n     *\n     *   Only AutoML Translation models or glossaries within the same region (have\n     *   the same location-id) can be used, otherwise an INVALID_ARGUMENT (400)\n     *   error is returned.\n     * @param {string} request.sourceLanguageCode\n     *   Required. The BCP-47 language code of the input document if known, for\n     *   example, \"en-US\" or \"sr-Latn\". Supported language codes are listed in\n     *   Language Support (https://cloud.google.com/translate/docs/languages).\n     * @param {string[]} request.targetLanguageCodes\n     *   Required. The BCP-47 language code to use for translation of the input\n     *   document. Specify up to 10 language codes here.\n     * @param {number[]} request.inputConfigs\n     *   Required. Input configurations.\n     *   The total number of files matched should be <= 100.\n     *   The total content size to translate should be <= 100M Unicode codepoints.\n     *   The files must use UTF-8 encoding.\n     * @param {google.cloud.translation.v3.BatchDocumentOutputConfig} request.outputConfig\n     *   Required. Output configuration.\n     *   If 2 input configs match to the same file (that is, same input path),\n     *   we don't generate output for duplicate inputs.\n     * @param {number[]} [request.models]\n     *   Optional. The models to use for translation. Map's key is target language\n     *   code. Map's value is the model name. Value can be a built-in general model,\n     *   or an AutoML Translation model.\n     *\n     *   The value format depends on model type:\n     *\n     *   - AutoML Translation models:\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}`\n     *\n     *   - General (built-in) models:\n     *     `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`,\n     *\n     *\n     *   If the map is empty or a specific model is\n     *   not requested for a language pair, then default google model (nmt) is used.\n     * @param {number[]} [request.glossaries]\n     *   Optional. Glossaries to be applied. It's keyed by target language code.\n     * @param {number[]} [request.formatConversions]\n     *   Optional. File format conversion map to be applied to all input files.\n     *   Map's key is the original mime_type. Map's value is the target mime_type of\n     *   translated documents.\n     *\n     *   Supported file format conversion includes:\n     *   - `application/pdf` to\n     *     `application/vnd.openxmlformats-officedocument.wordprocessingml.document`\n     *\n     *   If nothing specified, output files will be in the same format as the\n     *   original file.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     *   a long running operation. Its `promise()` method returns a promise\n     *   you can `await` for.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const [operation] = await client.batchTranslateDocument(request);\n     * const [response] = await operation.promise();\n     */\n    batchTranslateDocument(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                parent: request.parent || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.batchTranslateDocument(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `batchTranslateDocument()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const decodedOperation = await checkBatchTranslateDocumentProgress(name);\n     * console.log(decodedOperation.result);\n     * console.log(decodedOperation.done);\n     * console.log(decodedOperation.metadata);\n     */\n    async checkBatchTranslateDocumentProgress(name) {\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.batchTranslateDocument, gax.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    /**\n     * Creates a glossary and returns the long-running operation. Returns\n     * NOT_FOUND, if the project doesn't exist.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The project name.\n     * @param {google.cloud.translation.v3.Glossary} request.glossary\n     *   Required. The glossary to create.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     *   a long running operation. Its `promise()` method returns a promise\n     *   you can `await` for.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const [operation] = await client.createGlossary(request);\n     * const [response] = await operation.promise();\n     */\n    createGlossary(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                parent: request.parent || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.createGlossary(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `createGlossary()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const decodedOperation = await checkCreateGlossaryProgress(name);\n     * console.log(decodedOperation.result);\n     * console.log(decodedOperation.done);\n     * console.log(decodedOperation.metadata);\n     */\n    async checkCreateGlossaryProgress(name) {\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createGlossary, gax.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    /**\n     * Deletes a glossary, or cancels glossary construction\n     * if the glossary isn't created yet.\n     * Returns NOT_FOUND, if the glossary doesn't exist.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. The name of the glossary to delete.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     *   a long running operation. Its `promise()` method returns a promise\n     *   you can `await` for.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const [operation] = await client.deleteGlossary(request);\n     * const [response] = await operation.promise();\n     */\n    deleteGlossary(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                name: request.name || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.deleteGlossary(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `deleteGlossary()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const decodedOperation = await checkDeleteGlossaryProgress(name);\n     * console.log(decodedOperation.result);\n     * console.log(decodedOperation.done);\n     * console.log(decodedOperation.metadata);\n     */\n    async checkDeleteGlossaryProgress(name) {\n        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deleteGlossary, gax.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    /**\n     * Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't\n     * exist.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The name of the project from which to list all of the glossaries.\n     * @param {number} [request.pageSize]\n     *   Optional. Requested page size. The server may return fewer glossaries than\n     *   requested. If unspecified, the server picks an appropriate default.\n     * @param {string} [request.pageToken]\n     *   Optional. A token identifying a page of results the server should return.\n     *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n     *   returned from the previous call to `ListGlossaries` method.\n     *   The first page is returned if `page_token`is empty or missing.\n     * @param {string} [request.filter]\n     *   Optional. Filter specifying constraints of a list operation.\n     *   Specify the constraint by the format of \"key=value\", where key must be\n     *   \"src\" or \"tgt\", and the value must be a valid language code.\n     *   For multiple restrictions, concatenate them by \"AND\" (uppercase only),\n     *   such as: \"src=en-US AND tgt=zh-CN\". Notice that the exact match is used\n     *   here, which means using 'en-US' and 'en' can lead to different results,\n     *   which depends on the language code you used when you create the glossary.\n     *   For the unidirectional glossaries, the \"src\" and \"tgt\" add restrictions\n     *   on the source and target language code separately.\n     *   For the equivalent term set glossaries, the \"src\" and/or \"tgt\" add\n     *   restrictions on the term set.\n     *   For example: \"src=en-US AND tgt=zh-CN\" will only pick the unidirectional\n     *   glossaries which exactly match the source language code as \"en-US\" and the\n     *   target language code \"zh-CN\", but all equivalent term set glossaries which\n     *   contain \"en-US\" and \"zh-CN\" in their language set will be picked.\n     *   If missing, no filtering is performed.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Glossary]{@link google.cloud.translation.v3.Glossary}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listGlossariesAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listGlossaries(request, optionsOrCallback, callback) {\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                parent: request.parent || '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listGlossaries(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The name of the project from which to list all of the glossaries.\n     * @param {number} [request.pageSize]\n     *   Optional. Requested page size. The server may return fewer glossaries than\n     *   requested. If unspecified, the server picks an appropriate default.\n     * @param {string} [request.pageToken]\n     *   Optional. A token identifying a page of results the server should return.\n     *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n     *   returned from the previous call to `ListGlossaries` method.\n     *   The first page is returned if `page_token`is empty or missing.\n     * @param {string} [request.filter]\n     *   Optional. Filter specifying constraints of a list operation.\n     *   Specify the constraint by the format of \"key=value\", where key must be\n     *   \"src\" or \"tgt\", and the value must be a valid language code.\n     *   For multiple restrictions, concatenate them by \"AND\" (uppercase only),\n     *   such as: \"src=en-US AND tgt=zh-CN\". Notice that the exact match is used\n     *   here, which means using 'en-US' and 'en' can lead to different results,\n     *   which depends on the language code you used when you create the glossary.\n     *   For the unidirectional glossaries, the \"src\" and \"tgt\" add restrictions\n     *   on the source and target language code separately.\n     *   For the equivalent term set glossaries, the \"src\" and/or \"tgt\" add\n     *   restrictions on the term set.\n     *   For example: \"src=en-US AND tgt=zh-CN\" will only pick the unidirectional\n     *   glossaries which exactly match the source language code as \"en-US\" and the\n     *   target language code \"zh-CN\", but all equivalent term set glossaries which\n     *   contain \"en-US\" and \"zh-CN\" in their language set will be picked.\n     *   If missing, no filtering is performed.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Glossary]{@link google.cloud.translation.v3.Glossary} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listGlossariesAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listGlossariesStream(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                parent: request.parent || '',\n            });\n        const defaultCallSettings = this._defaults['listGlossaries'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listGlossaries.createStream(this.innerApiCalls.listGlossaries, request, callSettings);\n    }\n    /**\n     * Equivalent to `listGlossaries`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. The name of the project from which to list all of the glossaries.\n     * @param {number} [request.pageSize]\n     *   Optional. Requested page size. The server may return fewer glossaries than\n     *   requested. If unspecified, the server picks an appropriate default.\n     * @param {string} [request.pageToken]\n     *   Optional. A token identifying a page of results the server should return.\n     *   Typically, this is the value of [ListGlossariesResponse.next_page_token]\n     *   returned from the previous call to `ListGlossaries` method.\n     *   The first page is returned if `page_token`is empty or missing.\n     * @param {string} [request.filter]\n     *   Optional. Filter specifying constraints of a list operation.\n     *   Specify the constraint by the format of \"key=value\", where key must be\n     *   \"src\" or \"tgt\", and the value must be a valid language code.\n     *   For multiple restrictions, concatenate them by \"AND\" (uppercase only),\n     *   such as: \"src=en-US AND tgt=zh-CN\". Notice that the exact match is used\n     *   here, which means using 'en-US' and 'en' can lead to different results,\n     *   which depends on the language code you used when you create the glossary.\n     *   For the unidirectional glossaries, the \"src\" and \"tgt\" add restrictions\n     *   on the source and target language code separately.\n     *   For the equivalent term set glossaries, the \"src\" and/or \"tgt\" add\n     *   restrictions on the term set.\n     *   For example: \"src=en-US AND tgt=zh-CN\" will only pick the unidirectional\n     *   glossaries which exactly match the source language code as \"en-US\" and the\n     *   target language code \"zh-CN\", but all equivalent term set glossaries which\n     *   contain \"en-US\" and \"zh-CN\" in their language set will be picked.\n     *   If missing, no filtering is performed.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [Glossary]{@link google.cloud.translation.v3.Glossary}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listGlossariesAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n    listGlossariesAsync(request, options) {\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            gax.routingHeader.fromParams({\n                parent: request.parent || '',\n            });\n        options = options || {};\n        const defaultCallSettings = this._defaults['listGlossaries'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listGlossaries.asyncIterate(this.innerApiCalls['listGlossaries'], request, callSettings);\n    }\n    // --------------------\n    // -- Path templates --\n    // --------------------\n    /**\n     * Return a fully-qualified glossary resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @param {string} glossary\n     * @returns {string} Resource name string.\n     */\n    glossaryPath(project, location, glossary) {\n        return this.pathTemplates.glossaryPathTemplate.render({\n            project: project,\n            location: location,\n            glossary: glossary,\n        });\n    }\n    /**\n     * Parse the project from Glossary resource.\n     *\n     * @param {string} glossaryName\n     *   A fully-qualified path representing Glossary resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromGlossaryName(glossaryName) {\n        return this.pathTemplates.glossaryPathTemplate.match(glossaryName).project;\n    }\n    /**\n     * Parse the location from Glossary resource.\n     *\n     * @param {string} glossaryName\n     *   A fully-qualified path representing Glossary resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromGlossaryName(glossaryName) {\n        return this.pathTemplates.glossaryPathTemplate.match(glossaryName).location;\n    }\n    /**\n     * Parse the glossary from Glossary resource.\n     *\n     * @param {string} glossaryName\n     *   A fully-qualified path representing Glossary resource.\n     * @returns {string} A string representing the glossary.\n     */\n    matchGlossaryFromGlossaryName(glossaryName) {\n        return this.pathTemplates.glossaryPathTemplate.match(glossaryName).glossary;\n    }\n    /**\n     * Return a fully-qualified location resource name string.\n     *\n     * @param {string} project\n     * @param {string} location\n     * @returns {string} Resource name string.\n     */\n    locationPath(project, location) {\n        return this.pathTemplates.locationPathTemplate.render({\n            project: project,\n            location: location,\n        });\n    }\n    /**\n     * Parse the project from Location resource.\n     *\n     * @param {string} locationName\n     *   A fully-qualified path representing Location resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromLocationName(locationName) {\n        return this.pathTemplates.locationPathTemplate.match(locationName).project;\n    }\n    /**\n     * Parse the location from Location resource.\n     *\n     * @param {string} locationName\n     *   A fully-qualified path representing Location resource.\n     * @returns {string} A string representing the location.\n     */\n    matchLocationFromLocationName(locationName) {\n        return this.pathTemplates.locationPathTemplate.match(locationName).location;\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.translationServiceStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n                this.operationsClient.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.TranslationServiceClient = TranslationServiceClient;\n//# sourceMappingURL=translation_service_client.js.map"],"mappings":"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;AACJ;AACA;AACA;EACI,WAAWE,IAAIA,CAAA,EAAG;IACd,OAAO,GAAG;EACd;EACA;AACJ;AACA;AACA;AACA;EACI,WAAWM,MAAMA,CAAA,EAAG;IAChB,OAAO,CACH,gDAAgD,EAChD,mDAAmD,CACtD;EACL;EACA;AACJ;AACA;AACA;EACI6E,YAAYA,CAACC,QAAQ,EAAE;IACnB,IAAIA,QAAQ,EAAE;MACV,IAAI,CAACzE,IAAI,CAACwE,YAAY,CAACC,QAAQ,CAAC;MAChC;IACJ;IACA,OAAO,IAAI,CAACzE,IAAI,CAACwE,YAAY,CAAC,CAAC;EACnC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,aAAaA,CAACC,OAAO,EAAEC,iBAAiB,EAAEH,QAAQ,EAAE;IAChDE,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,IAAIE,OAAO;IACX,IAAI,OAAOD,iBAAiB,KAAK,UAAU,IAAIH,QAAQ,KAAK9C,SAAS,EAAE;MACnE8C,QAAQ,GAAGG,iBAAiB;MAC5BC,OAAO,GAAG,CAAC,CAAC;IAChB,CAAC,MACI;MACDA,OAAO,GAAGD,iBAAiB;IAC/B;IACAC,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvBA,OAAO,CAACC,SAAS,GAAGD,OAAO,CAACC,SAAS,IAAI,CAAC,CAAC;IAC3CD,OAAO,CAACC,SAAS,CAACC,OAAO,GAAGF,OAAO,CAACC,SAAS,CAACC,OAAO,IAAI,CAAC,CAAC;IAC3DF,OAAO,CAACC,SAAS,CAACC,OAAO,CAAC,uBAAuB,CAAC,GAC9C9G,GAAG,CAAC+G,aAAa,CAACC,UAAU,CAAC;MACzBC,MAAM,EAAEP,OAAO,CAACO,MAAM,IAAI;IAC9B,CAAC,CAAC;IACN,IAAI,CAACjC,UAAU,CAAC,CAAC;IACjB,OAAO,IAAI,CAACF,aAAa,CAAC2B,aAAa,CAACC,OAAO,EAAEE,OAAO,EAAEJ,QAAQ,CAAC;EACvE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIU,cAAcA,CAACR,OAAO,EAAEC,iBAAiB,EAAEH,QAAQ,EAAE;IACjDE,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,IAAIE,OAAO;IACX,IAAI,OAAOD,iBAAiB,KAAK,UAAU,IAAIH,QAAQ,KAAK9C,SAAS,EAAE;MACnE8C,QAAQ,GAAGG,iBAAiB;MAC5BC,OAAO,GAAG,CAAC,CAAC;IAChB,CAAC,MACI;MACDA,OAAO,GAAGD,iBAAiB;IAC/B;IACAC,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvBA,OAAO,CAACC,SAAS,GAAGD,OAAO,CAACC,SAAS,IAAI,CAAC,CAAC;IAC3CD,OAAO,CAACC,SAAS,CAACC,OAAO,GAAGF,OAAO,CAACC,SAAS,CAACC,OAAO,IAAI,CAAC,CAAC;IAC3DF,OAAO,CAACC,SAAS,CAACC,OAAO,CAAC,uBAAuB,CAAC,GAC9C9G,GAAG,CAAC+G,aAAa,CAACC,UAAU,CAAC;MACzBC,MAAM,EAAEP,OAAO,CAACO,MAAM,IAAI;IAC9B,CAAC,CAAC;IACN,IAAI,CAACjC,UAAU,CAAC,CAAC;IACjB,OAAO,IAAI,CAACF,aAAa,CAACoC,cAAc,CAACR,OAAO,EAAEE,OAAO,EAAEJ,QAAQ,CAAC;EACxE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIW,qBAAqBA,CAACT,OAAO,EAAEC,iBAAiB,EAAEH,QAAQ,EAAE;IACxDE,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,IAAIE,OAAO;IACX,IAAI,OAAOD,iBAAiB,KAAK,UAAU,IAAIH,QAAQ,KAAK9C,SAAS,EAAE;MACnE8C,QAAQ,GAAGG,iBAAiB;MAC5BC,OAAO,GAAG,CAAC,CAAC;IAChB,CAAC,MACI;MACDA,OAAO,GAAGD,iBAAiB;IAC/B;IACAC,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvBA,OAAO,CAACC,SAAS,GAAGD,OAAO,CAACC,SAAS,IAAI,CAAC,CAAC;IAC3CD,OAAO,CAACC,SAAS,CAACC,OAAO,GAAGF,OAAO,CAACC,SAAS,CAACC,OAAO,IAAI,CAAC,CAAC;IAC3DF,OAAO,CAACC,SAAS,CAACC,OAAO,CAAC,uBAAuB,CAAC,GAC9C9G,GAAG,CAAC+G,aAAa,CAACC,UAAU,CAAC;MACzBC,MAAM,EAAEP,OAAO,CAACO,MAAM,IAAI;IAC9B,CAAC,CAAC;IACN,IAAI,CAACjC,UAAU,CAAC,CAAC;IACjB,OAAO,IAAI,CAACF,aAAa,CAACqC,qBAAqB,CAACT,OAAO,EAAEE,OAAO,EAAEJ,QAAQ,CAAC;EAC/E;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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O,CAACC,SAAS,CAACC,OAAO,GAAGF,OAAO,CAACC,SAAS,CAACC,OAAO,IAAI,CAAC,CAAC;IAC3DF,OAAO,CAACC,SAAS,CAACC,OAAO,CAAC,uBAAuB,CAAC,GAC9C9G,GAAG,CAAC+G,aAAa,CAACC,UAAU,CAAC;MACzBC,MAAM,EAAEP,OAAO,CAACO,MAAM,IAAI;IAC9B,CAAC,CAAC;IACN,IAAI,CAACjC,UAAU,CAAC,CAAC;IACjB,OAAO,IAAI,CAACF,aAAa,CAACV,kBAAkB,CAACsC,OAAO,EAAEE,OAAO,EAAEJ,QAAQ,CAAC;EAC5E;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMe,+BAA+BA,CAACD,IAAI,EAAE;IACxC,MAAMZ,OAAO,GAAG,IAAItG,YAAY,CAACoH,gBAAgB,CAACpC,MAAM,CAACtE,WAAW,CAAC2G,mBAAmB,CAAC;MAAEH;IAAK,CAAC,CAAC;IAClG,MAAM,CAACI,SAAS,CAAC,GAAG,MAAM,IAAI,CAACnE,gBAAgB,CAACoE,YAAY,CAACjB,OAAO,CAAC;IACrE,MAAMkB,eAAe,GAAG,IAAI5H,GAAG,CAAC6H,SAAS,CAACH,SAAS,EAAE,IAAI,CAAC/G,WAAW,CAACG,WAAW,CAACsD,kBAAkB,EAAEpE,GAAG,CAAC8H,4BAA4B,CAAC,CAAC,CAAC;IACzI,OAAOF,eAAe;EAC1B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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"},"metadata":{},"sourceType":"script","externalDependencies":[]}