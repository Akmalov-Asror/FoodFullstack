{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IdTokenClient = void 0;\nconst oauth2client_1 = require(\"./oauth2client\");\nclass IdTokenClient extends oauth2client_1.OAuth2Client {\n  /**\n   * Google ID Token client\n   *\n   * Retrieve access token from the metadata server.\n   * See: https://developers.google.com/compute/docs/authentication\n   */\n  constructor(options) {\n    super();\n    this.targetAudience = options.targetAudience;\n    this.idTokenProvider = options.idTokenProvider;\n  }\n  async getRequestMetadataAsync(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  url) {\n    if (!this.credentials.id_token || (this.credentials.expiry_date || 0) < Date.now()) {\n      const idToken = await this.idTokenProvider.fetchIdToken(this.targetAudience);\n      this.credentials = {\n        id_token: idToken,\n        expiry_date: this.getIdTokenExpiryDate(idToken)\n      };\n    }\n    const headers = {\n      Authorization: 'Bearer ' + this.credentials.id_token\n    };\n    return {\n      headers\n    };\n  }\n  getIdTokenExpiryDate(idToken) {\n    const payloadB64 = idToken.split('.')[1];\n    if (payloadB64) {\n      const payload = JSON.parse(Buffer.from(payloadB64, 'base64').toString('ascii'));\n      return payload.exp * 1000;\n    }\n  }\n}\nexports.IdTokenClient = IdTokenClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","IdTokenClient","oauth2client_1","require","OAuth2Client","constructor","options","targetAudience","idTokenProvider","getRequestMetadataAsync","url","credentials","id_token","expiry_date","Date","now","idToken","fetchIdToken","getIdTokenExpiryDate","headers","Authorization","payloadB64","split","payload","JSON","parse","Buffer","from","toString","exp"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/google-auth-library/build/src/auth/idtokenclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IdTokenClient = void 0;\nconst oauth2client_1 = require(\"./oauth2client\");\nclass IdTokenClient extends oauth2client_1.OAuth2Client {\n    /**\n     * Google ID Token client\n     *\n     * Retrieve access token from the metadata server.\n     * See: https://developers.google.com/compute/docs/authentication\n     */\n    constructor(options) {\n        super();\n        this.targetAudience = options.targetAudience;\n        this.idTokenProvider = options.idTokenProvider;\n    }\n    async getRequestMetadataAsync(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    url) {\n        if (!this.credentials.id_token ||\n            (this.credentials.expiry_date || 0) < Date.now()) {\n            const idToken = await this.idTokenProvider.fetchIdToken(this.targetAudience);\n            this.credentials = {\n                id_token: idToken,\n                expiry_date: this.getIdTokenExpiryDate(idToken),\n            };\n        }\n        const headers = {\n            Authorization: 'Bearer ' + this.credentials.id_token,\n        };\n        return { headers };\n    }\n    getIdTokenExpiryDate(idToken) {\n        const payloadB64 = idToken.split('.')[1];\n        if (payloadB64) {\n            const payload = JSON.parse(Buffer.from(payloadB64, 'base64').toString('ascii'));\n            return payload.exp * 1000;\n        }\n    }\n}\nexports.IdTokenClient = IdTokenClient;\n//# sourceMappingURL=idtokenclient.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAG,KAAK,CAAC;AAC9B,MAAMC,cAAc,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAChD,MAAMF,aAAa,SAASC,cAAc,CAACE,YAAY,CAAC;EACpD;AACJ;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACC,OAAO,EAAE;IACjB,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,cAAc,GAAGD,OAAO,CAACC,cAAc;IAC5C,IAAI,CAACC,eAAe,GAAGF,OAAO,CAACE,eAAe;EAClD;EACA,MAAMC,uBAAuBA;EAC7B;EACAC,GAAG,EAAE;IACD,IAAI,CAAC,IAAI,CAACC,WAAW,CAACC,QAAQ,IAC1B,CAAC,IAAI,CAACD,WAAW,CAACE,WAAW,IAAI,CAAC,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;MAClD,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACR,eAAe,CAACS,YAAY,CAAC,IAAI,CAACV,cAAc,CAAC;MAC5E,IAAI,CAACI,WAAW,GAAG;QACfC,QAAQ,EAAEI,OAAO;QACjBH,WAAW,EAAE,IAAI,CAACK,oBAAoB,CAACF,OAAO;MAClD,CAAC;IACL;IACA,MAAMG,OAAO,GAAG;MACZC,aAAa,EAAE,SAAS,GAAG,IAAI,CAACT,WAAW,CAACC;IAChD,CAAC;IACD,OAAO;MAAEO;IAAQ,CAAC;EACtB;EACAD,oBAAoBA,CAACF,OAAO,EAAE;IAC1B,MAAMK,UAAU,GAAGL,OAAO,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACxC,IAAID,UAAU,EAAE;MACZ,MAAME,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,MAAM,CAACC,IAAI,CAACN,UAAU,EAAE,QAAQ,CAAC,CAACO,QAAQ,CAAC,OAAO,CAAC,CAAC;MAC/E,OAAOL,OAAO,CAACM,GAAG,GAAG,IAAI;IAC7B;EACJ;AACJ;AACA9B,OAAO,CAACE,aAAa,GAAGA,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}