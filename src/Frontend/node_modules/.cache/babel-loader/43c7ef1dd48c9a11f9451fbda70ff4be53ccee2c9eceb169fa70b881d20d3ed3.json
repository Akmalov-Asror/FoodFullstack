{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AwsClient = void 0;\nconst awsrequestsigner_1 = require(\"./awsrequestsigner\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n/**\n * AWS external account client. This is used for AWS workloads, where\n * AWS STS GetCallerIdentity serialized signed requests are exchanged for\n * GCP access token.\n */\nclass AwsClient extends baseexternalclient_1.BaseExternalAccountClient {\n  /**\n   * Instantiates an AwsClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * An error is thrown if the credential is not a valid AWS credential.\n   * @param options The external account options object typically loaded\n   *   from the external account JSON credential file.\n   * @param additionalOptions Optional additional behavior customization\n   *   options. These currently customize expiration threshold time and\n   *   whether to retry on 401/403 API request errors.\n   */\n  constructor(options, additionalOptions) {\n    var _a;\n    super(options, additionalOptions);\n    this.environmentId = options.credential_source.environment_id;\n    // This is only required if the AWS region is not available in the\n    // AWS_REGION or AWS_DEFAULT_REGION environment variables.\n    this.regionUrl = options.credential_source.region_url;\n    // This is only required if AWS security credentials are not available in\n    // environment variables.\n    this.securityCredentialsUrl = options.credential_source.url;\n    this.regionalCredVerificationUrl = options.credential_source.regional_cred_verification_url;\n    this.imdsV2SessionTokenUrl = options.credential_source.imdsv2_session_token_url;\n    const match = (_a = this.environmentId) === null || _a === void 0 ? void 0 : _a.match(/^(aws)(\\d+)$/);\n    if (!match || !this.regionalCredVerificationUrl) {\n      throw new Error('No valid AWS \"credential_source\" provided');\n    } else if (parseInt(match[2], 10) !== 1) {\n      throw new Error(`aws version \"${match[2]}\" is not supported in the current build.`);\n    }\n    this.awsRequestSigner = null;\n    this.region = '';\n  }\n  /**\n   * Triggered when an external subject token is needed to be exchanged for a\n   * GCP access token via GCP STS endpoint.\n   * This uses the `options.credential_source` object to figure out how\n   * to retrieve the token using the current environment. In this case,\n   * this uses a serialized AWS signed request to the STS GetCallerIdentity\n   * endpoint.\n   * The logic is summarized as:\n   * 1. If imdsv2_session_token_url is provided in the credential source, then\n   *    fetch the aws session token and include it in the headers of the\n   *    metadata requests. This is a requirement for IDMSv2 but optional\n   *    for IDMSv1.\n   * 2. Retrieve AWS region from availability-zone.\n   * 3a. Check AWS credentials in environment variables. If not found, get\n   *     from security-credentials endpoint.\n   * 3b. Get AWS credentials from security-credentials endpoint. In order\n   *     to retrieve this, the AWS role needs to be determined by calling\n   *     security-credentials endpoint without any argument. Then the\n   *     credentials can be retrieved via: security-credentials/role_name\n   * 4. Generate the signed request to AWS STS GetCallerIdentity action.\n   * 5. Inject x-goog-cloud-target-resource into header and serialize the\n   *    signed request. This will be the subject-token to pass to GCP STS.\n   * @return A promise that resolves with the external subject token.\n   */\n  async retrieveSubjectToken() {\n    // Initialize AWS request signer if not already initialized.\n    if (!this.awsRequestSigner) {\n      const metadataHeaders = {};\n      if (this.imdsV2SessionTokenUrl) {\n        metadataHeaders['x-aws-ec2-metadata-token'] = await this.getImdsV2SessionToken();\n      }\n      this.region = await this.getAwsRegion(metadataHeaders);\n      this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner(async () => {\n        // Check environment variables for permanent credentials first.\n        // https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html\n        if (process.env['AWS_ACCESS_KEY_ID'] && process.env['AWS_SECRET_ACCESS_KEY']) {\n          return {\n            accessKeyId: process.env['AWS_ACCESS_KEY_ID'],\n            secretAccessKey: process.env['AWS_SECRET_ACCESS_KEY'],\n            // This is normally not available for permanent credentials.\n            token: process.env['AWS_SESSION_TOKEN']\n          };\n        }\n        // Since the role on a VM can change, we don't need to cache it.\n        const roleName = await this.getAwsRoleName(metadataHeaders);\n        // Temporary credentials typically last for several hours.\n        // Expiration is returned in response.\n        // Consider future optimization of this logic to cache AWS tokens\n        // until their natural expiration.\n        const awsCreds = await this.getAwsSecurityCredentials(roleName, metadataHeaders);\n        return {\n          accessKeyId: awsCreds.AccessKeyId,\n          secretAccessKey: awsCreds.SecretAccessKey,\n          token: awsCreds.Token\n        };\n      }, this.region);\n    }\n    // Generate signed request to AWS STS GetCallerIdentity API.\n    // Use the required regional endpoint. Otherwise, the request will fail.\n    const options = await this.awsRequestSigner.getRequestOptions({\n      url: this.regionalCredVerificationUrl.replace('{region}', this.region),\n      method: 'POST'\n    });\n    // The GCP STS endpoint expects the headers to be formatted as:\n    // [\n    //   {key: 'x-amz-date', value: '...'},\n    //   {key: 'Authorization', value: '...'},\n    //   ...\n    // ]\n    // And then serialized as:\n    // encodeURIComponent(JSON.stringify({\n    //   url: '...',\n    //   method: 'POST',\n    //   headers: [{key: 'x-amz-date', value: '...'}, ...]\n    // }))\n    const reformattedHeader = [];\n    const extendedHeaders = Object.assign({\n      // The full, canonical resource name of the workload identity pool\n      // provider, with or without the HTTPS prefix.\n      // Including this header as part of the signature is recommended to\n      // ensure data integrity.\n      'x-goog-cloud-target-resource': this.audience\n    }, options.headers);\n    // Reformat header to GCP STS expected format.\n    for (const key in extendedHeaders) {\n      reformattedHeader.push({\n        key,\n        value: extendedHeaders[key]\n      });\n    }\n    // Serialize the reformatted signed request.\n    return encodeURIComponent(JSON.stringify({\n      url: options.url,\n      method: options.method,\n      headers: reformattedHeader\n    }));\n  }\n  /**\n   * @return A promise that resolves with the IMDSv2 Session Token.\n   */\n  async getImdsV2SessionToken() {\n    const opts = {\n      url: this.imdsV2SessionTokenUrl,\n      method: 'PUT',\n      responseType: 'text',\n      headers: {\n        'x-aws-ec2-metadata-token-ttl-seconds': '300'\n      }\n    };\n    const response = await this.transporter.request(opts);\n    return response.data;\n  }\n  /**\n   * @param headers The headers to be used in the metadata request.\n   * @return A promise that resolves with the current AWS region.\n   */\n  async getAwsRegion(headers) {\n    // Priority order for region determination:\n    // AWS_REGION > AWS_DEFAULT_REGION > metadata server.\n    if (process.env['AWS_REGION'] || process.env['AWS_DEFAULT_REGION']) {\n      return process.env['AWS_REGION'] || process.env['AWS_DEFAULT_REGION'];\n    }\n    if (!this.regionUrl) {\n      throw new Error('Unable to determine AWS region due to missing ' + '\"options.credential_source.region_url\"');\n    }\n    const opts = {\n      url: this.regionUrl,\n      method: 'GET',\n      responseType: 'text',\n      headers: headers\n    };\n    const response = await this.transporter.request(opts);\n    // Remove last character. For example, if us-east-2b is returned,\n    // the region would be us-east-2.\n    return response.data.substr(0, response.data.length - 1);\n  }\n  /**\n   * @param headers The headers to be used in the metadata request.\n   * @return A promise that resolves with the assigned role to the current\n   *   AWS VM. This is needed for calling the security-credentials endpoint.\n   */\n  async getAwsRoleName(headers) {\n    if (!this.securityCredentialsUrl) {\n      throw new Error('Unable to determine AWS role name due to missing ' + '\"options.credential_source.url\"');\n    }\n    const opts = {\n      url: this.securityCredentialsUrl,\n      method: 'GET',\n      responseType: 'text',\n      headers: headers\n    };\n    const response = await this.transporter.request(opts);\n    return response.data;\n  }\n  /**\n   * Retrieves the temporary AWS credentials by calling the security-credentials\n   * endpoint as specified in the `credential_source` object.\n   * @param roleName The role attached to the current VM.\n   * @param headers The headers to be used in the metadata request.\n   * @return A promise that resolves with the temporary AWS credentials\n   *   needed for creating the GetCallerIdentity signed request.\n   */\n  async getAwsSecurityCredentials(roleName, headers) {\n    const response = await this.transporter.request({\n      url: `${this.securityCredentialsUrl}/${roleName}`,\n      responseType: 'json',\n      headers: headers\n    });\n    return response.data;\n  }\n}\nexports.AwsClient = AwsClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","AwsClient","awsrequestsigner_1","require","baseexternalclient_1","BaseExternalAccountClient","constructor","options","additionalOptions","_a","environmentId","credential_source","environment_id","regionUrl","region_url","securityCredentialsUrl","url","regionalCredVerificationUrl","regional_cred_verification_url","imdsV2SessionTokenUrl","imdsv2_session_token_url","match","Error","parseInt","awsRequestSigner","region","retrieveSubjectToken","metadataHeaders","getImdsV2SessionToken","getAwsRegion","AwsRequestSigner","process","env","accessKeyId","secretAccessKey","token","roleName","getAwsRoleName","awsCreds","getAwsSecurityCredentials","AccessKeyId","SecretAccessKey","Token","getRequestOptions","replace","method","reformattedHeader","extendedHeaders","assign","audience","headers","key","push","encodeURIComponent","JSON","stringify","opts","responseType","response","transporter","request","data","substr","length"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/google-auth-library/build/src/auth/awsclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AwsClient = void 0;\nconst awsrequestsigner_1 = require(\"./awsrequestsigner\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n/**\n * AWS external account client. This is used for AWS workloads, where\n * AWS STS GetCallerIdentity serialized signed requests are exchanged for\n * GCP access token.\n */\nclass AwsClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiates an AwsClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid AWS credential.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file.\n     * @param additionalOptions Optional additional behavior customization\n     *   options. These currently customize expiration threshold time and\n     *   whether to retry on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        var _a;\n        super(options, additionalOptions);\n        this.environmentId = options.credential_source.environment_id;\n        // This is only required if the AWS region is not available in the\n        // AWS_REGION or AWS_DEFAULT_REGION environment variables.\n        this.regionUrl = options.credential_source.region_url;\n        // This is only required if AWS security credentials are not available in\n        // environment variables.\n        this.securityCredentialsUrl = options.credential_source.url;\n        this.regionalCredVerificationUrl =\n            options.credential_source.regional_cred_verification_url;\n        this.imdsV2SessionTokenUrl =\n            options.credential_source.imdsv2_session_token_url;\n        const match = (_a = this.environmentId) === null || _a === void 0 ? void 0 : _a.match(/^(aws)(\\d+)$/);\n        if (!match || !this.regionalCredVerificationUrl) {\n            throw new Error('No valid AWS \"credential_source\" provided');\n        }\n        else if (parseInt(match[2], 10) !== 1) {\n            throw new Error(`aws version \"${match[2]}\" is not supported in the current build.`);\n        }\n        this.awsRequestSigner = null;\n        this.region = '';\n    }\n    /**\n     * Triggered when an external subject token is needed to be exchanged for a\n     * GCP access token via GCP STS endpoint.\n     * This uses the `options.credential_source` object to figure out how\n     * to retrieve the token using the current environment. In this case,\n     * this uses a serialized AWS signed request to the STS GetCallerIdentity\n     * endpoint.\n     * The logic is summarized as:\n     * 1. If imdsv2_session_token_url is provided in the credential source, then\n     *    fetch the aws session token and include it in the headers of the\n     *    metadata requests. This is a requirement for IDMSv2 but optional\n     *    for IDMSv1.\n     * 2. Retrieve AWS region from availability-zone.\n     * 3a. Check AWS credentials in environment variables. If not found, get\n     *     from security-credentials endpoint.\n     * 3b. Get AWS credentials from security-credentials endpoint. In order\n     *     to retrieve this, the AWS role needs to be determined by calling\n     *     security-credentials endpoint without any argument. Then the\n     *     credentials can be retrieved via: security-credentials/role_name\n     * 4. Generate the signed request to AWS STS GetCallerIdentity action.\n     * 5. Inject x-goog-cloud-target-resource into header and serialize the\n     *    signed request. This will be the subject-token to pass to GCP STS.\n     * @return A promise that resolves with the external subject token.\n     */\n    async retrieveSubjectToken() {\n        // Initialize AWS request signer if not already initialized.\n        if (!this.awsRequestSigner) {\n            const metadataHeaders = {};\n            if (this.imdsV2SessionTokenUrl) {\n                metadataHeaders['x-aws-ec2-metadata-token'] =\n                    await this.getImdsV2SessionToken();\n            }\n            this.region = await this.getAwsRegion(metadataHeaders);\n            this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner(async () => {\n                // Check environment variables for permanent credentials first.\n                // https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html\n                if (process.env['AWS_ACCESS_KEY_ID'] &&\n                    process.env['AWS_SECRET_ACCESS_KEY']) {\n                    return {\n                        accessKeyId: process.env['AWS_ACCESS_KEY_ID'],\n                        secretAccessKey: process.env['AWS_SECRET_ACCESS_KEY'],\n                        // This is normally not available for permanent credentials.\n                        token: process.env['AWS_SESSION_TOKEN'],\n                    };\n                }\n                // Since the role on a VM can change, we don't need to cache it.\n                const roleName = await this.getAwsRoleName(metadataHeaders);\n                // Temporary credentials typically last for several hours.\n                // Expiration is returned in response.\n                // Consider future optimization of this logic to cache AWS tokens\n                // until their natural expiration.\n                const awsCreds = await this.getAwsSecurityCredentials(roleName, metadataHeaders);\n                return {\n                    accessKeyId: awsCreds.AccessKeyId,\n                    secretAccessKey: awsCreds.SecretAccessKey,\n                    token: awsCreds.Token,\n                };\n            }, this.region);\n        }\n        // Generate signed request to AWS STS GetCallerIdentity API.\n        // Use the required regional endpoint. Otherwise, the request will fail.\n        const options = await this.awsRequestSigner.getRequestOptions({\n            url: this.regionalCredVerificationUrl.replace('{region}', this.region),\n            method: 'POST',\n        });\n        // The GCP STS endpoint expects the headers to be formatted as:\n        // [\n        //   {key: 'x-amz-date', value: '...'},\n        //   {key: 'Authorization', value: '...'},\n        //   ...\n        // ]\n        // And then serialized as:\n        // encodeURIComponent(JSON.stringify({\n        //   url: '...',\n        //   method: 'POST',\n        //   headers: [{key: 'x-amz-date', value: '...'}, ...]\n        // }))\n        const reformattedHeader = [];\n        const extendedHeaders = Object.assign({\n            // The full, canonical resource name of the workload identity pool\n            // provider, with or without the HTTPS prefix.\n            // Including this header as part of the signature is recommended to\n            // ensure data integrity.\n            'x-goog-cloud-target-resource': this.audience,\n        }, options.headers);\n        // Reformat header to GCP STS expected format.\n        for (const key in extendedHeaders) {\n            reformattedHeader.push({\n                key,\n                value: extendedHeaders[key],\n            });\n        }\n        // Serialize the reformatted signed request.\n        return encodeURIComponent(JSON.stringify({\n            url: options.url,\n            method: options.method,\n            headers: reformattedHeader,\n        }));\n    }\n    /**\n     * @return A promise that resolves with the IMDSv2 Session Token.\n     */\n    async getImdsV2SessionToken() {\n        const opts = {\n            url: this.imdsV2SessionTokenUrl,\n            method: 'PUT',\n            responseType: 'text',\n            headers: { 'x-aws-ec2-metadata-token-ttl-seconds': '300' },\n        };\n        const response = await this.transporter.request(opts);\n        return response.data;\n    }\n    /**\n     * @param headers The headers to be used in the metadata request.\n     * @return A promise that resolves with the current AWS region.\n     */\n    async getAwsRegion(headers) {\n        // Priority order for region determination:\n        // AWS_REGION > AWS_DEFAULT_REGION > metadata server.\n        if (process.env['AWS_REGION'] || process.env['AWS_DEFAULT_REGION']) {\n            return (process.env['AWS_REGION'] || process.env['AWS_DEFAULT_REGION']);\n        }\n        if (!this.regionUrl) {\n            throw new Error('Unable to determine AWS region due to missing ' +\n                '\"options.credential_source.region_url\"');\n        }\n        const opts = {\n            url: this.regionUrl,\n            method: 'GET',\n            responseType: 'text',\n            headers: headers,\n        };\n        const response = await this.transporter.request(opts);\n        // Remove last character. For example, if us-east-2b is returned,\n        // the region would be us-east-2.\n        return response.data.substr(0, response.data.length - 1);\n    }\n    /**\n     * @param headers The headers to be used in the metadata request.\n     * @return A promise that resolves with the assigned role to the current\n     *   AWS VM. This is needed for calling the security-credentials endpoint.\n     */\n    async getAwsRoleName(headers) {\n        if (!this.securityCredentialsUrl) {\n            throw new Error('Unable to determine AWS role name due to missing ' +\n                '\"options.credential_source.url\"');\n        }\n        const opts = {\n            url: this.securityCredentialsUrl,\n            method: 'GET',\n            responseType: 'text',\n            headers: headers,\n        };\n        const response = await this.transporter.request(opts);\n        return response.data;\n    }\n    /**\n     * Retrieves the temporary AWS credentials by calling the security-credentials\n     * endpoint as specified in the `credential_source` object.\n     * @param roleName The role attached to the current VM.\n     * @param headers The headers to be used in the metadata request.\n     * @return A promise that resolves with the temporary AWS credentials\n     *   needed for creating the GetCallerIdentity signed request.\n     */\n    async getAwsSecurityCredentials(roleName, headers) {\n        const response = await this.transporter.request({\n            url: `${this.securityCredentialsUrl}/${roleName}`,\n            responseType: 'json',\n            headers: headers,\n        });\n        return response.data;\n    }\n}\nexports.AwsClient = AwsClient;\n//# sourceMappingURL=awsclient.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}