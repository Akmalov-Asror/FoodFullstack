{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toProto3JSON = void 0;\nconst any_1 = require(\"./any\");\nconst bytes_1 = require(\"./bytes\");\nconst util_1 = require(\"./util\");\nconst enum_1 = require(\"./enum\");\nconst value_1 = require(\"./value\");\nconst duration_1 = require(\"./duration\");\nconst timestamp_1 = require(\"./timestamp\");\nconst wrappers_1 = require(\"./wrappers\");\nconst fieldmask_1 = require(\"./fieldmask\");\nconst id = x => {\n  return x;\n};\nfunction toProto3JSON(obj) {\n  const objType = obj.$type;\n  if (!objType) {\n    throw new Error('Cannot serialize object to proto3 JSON since its .$type is unknown. Use Type.fromObject(obj) before calling toProto3JSON.');\n  }\n  objType.resolveAll();\n  const typeName = (0, util_1.getFullyQualifiedTypeName)(objType);\n  // Types that require special handling according to\n  // https://developers.google.com/protocol-buffers/docs/proto3#json\n  if (typeName === '.google.protobuf.Any') {\n    return (0, any_1.googleProtobufAnyToProto3JSON)(obj);\n  }\n  if (typeName === '.google.protobuf.Value') {\n    return (0, value_1.googleProtobufValueToProto3JSON)(obj);\n  }\n  if (typeName === '.google.protobuf.Struct') {\n    return (0, value_1.googleProtobufStructToProto3JSON)(obj);\n  }\n  if (typeName === '.google.protobuf.ListValue') {\n    return (0, value_1.googleProtobufListValueToProto3JSON)(obj);\n  }\n  if (typeName === '.google.protobuf.Duration') {\n    return (0, duration_1.googleProtobufDurationToProto3JSON)(obj);\n  }\n  if (typeName === '.google.protobuf.Timestamp') {\n    return (0, timestamp_1.googleProtobufTimestampToProto3JSON)(obj);\n  }\n  if (typeName === '.google.protobuf.FieldMask') {\n    return (0, fieldmask_1.googleProtobufFieldMaskToProto3JSON)(obj);\n  }\n  if (util_1.wrapperTypes.has(typeName)) {\n    return (0, wrappers_1.wrapperToProto3JSON)(obj);\n  }\n  const result = {};\n  for (const [key, value] of Object.entries(obj)) {\n    const field = objType.fields[key];\n    const fieldResolvedType = field.resolvedType;\n    const fieldFullyQualifiedTypeName = fieldResolvedType ? (0, util_1.getFullyQualifiedTypeName)(fieldResolvedType) : null;\n    if (value === null) {\n      result[key] = null;\n      continue;\n    }\n    if (Array.isArray(value)) {\n      if (value.length === 0) {\n        // ignore repeated fields with no values\n        continue;\n      }\n      // if the repeated value has a complex type, convert it to proto3 JSON, otherwise use as is\n      result[key] = value.map(fieldResolvedType ? element => {\n        return toProto3JSON(element);\n      } : id);\n      continue;\n    }\n    if (field.map) {\n      const map = {};\n      for (const [mapKey, mapValue] of Object.entries(value)) {\n        // if the map value has a complex type, convert it to proto3 JSON, otherwise use as is\n        map[mapKey] = fieldResolvedType ? toProto3JSON(mapValue) : mapValue;\n      }\n      result[key] = map;\n      continue;\n    }\n    if (fieldFullyQualifiedTypeName === '.google.protobuf.NullValue') {\n      result[key] = null;\n      continue;\n    }\n    if (fieldResolvedType && 'values' in fieldResolvedType && value !== null) {\n      result[key] = (0, enum_1.resolveEnumValueToString)(fieldResolvedType, value);\n      continue;\n    }\n    if (fieldResolvedType) {\n      result[key] = toProto3JSON(value);\n      continue;\n    }\n    if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean' || value === null) {\n      if (typeof value === 'number' && !Number.isFinite(value)) {\n        result[key] = value.toString();\n        continue;\n      }\n      result[key] = value;\n      continue;\n    }\n    if (Buffer.isBuffer(value) || value instanceof Uint8Array) {\n      result[key] = (0, bytes_1.bytesToProto3JSON)(value);\n      continue;\n    }\n    // The remaining case is Long, everything else is an internal error\n    (0, util_1.assert)(value.constructor.name === 'Long', `toProto3JSON: don't know how to convert field ${key} with value ${value}`);\n    result[key] = value.toString();\n    continue;\n  }\n  return result;\n}\nexports.toProto3JSON = toProto3JSON;","map":{"version":3,"names":["any_1","require","bytes_1","util_1","enum_1","value_1","duration_1","timestamp_1","wrappers_1","fieldmask_1","id","x","toProto3JSON","obj","objType","$type","Error","resolveAll","typeName","getFullyQualifiedTypeName","googleProtobufAnyToProto3JSON","googleProtobufValueToProto3JSON","googleProtobufStructToProto3JSON","googleProtobufListValueToProto3JSON","googleProtobufDurationToProto3JSON","googleProtobufTimestampToProto3JSON","googleProtobufFieldMaskToProto3JSON","wrapperTypes","has","wrapperToProto3JSON","result","key","value","Object","entries","field","fields","fieldResolvedType","resolvedType","fieldFullyQualifiedTypeName","Array","isArray","length","map","element","mapKey","mapValue","resolveEnumValueToString","Number","isFinite","toString","Buffer","isBuffer","Uint8Array","bytesToProto3JSON","assert","constructor","name","exports"],"sources":["../../typescript/src/toproto3json.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}