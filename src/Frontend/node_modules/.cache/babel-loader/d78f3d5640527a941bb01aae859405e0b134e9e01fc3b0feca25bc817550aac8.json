{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TeenyStatistics = exports.TeenyStatisticsWarning = void 0;\n/**\n * @class TeenyStatisticsWarning\n * @extends Error\n * @description While an error, is used for emitting warnings when\n *   meeting certain configured thresholds.\n * @see process.emitWarning\n */\nclass TeenyStatisticsWarning extends Error {\n  /**\n   * @param {string} message\n   */\n  constructor(message) {\n    super(message);\n    this.threshold = 0;\n    this.type = '';\n    this.value = 0;\n    this.name = this.constructor.name;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nexports.TeenyStatisticsWarning = TeenyStatisticsWarning;\nTeenyStatisticsWarning.CONCURRENT_REQUESTS = 'ConcurrentRequestsExceededWarning';\n/**\n * @class TeenyStatistics\n * @description Maintain various statistics internal to teeny-request. Tracking\n *   is not automatic and must be instrumented within teeny-request.\n */\nclass TeenyStatistics {\n  /**\n   * @param {TeenyStatisticsOptions} [opts]\n   */\n  constructor(opts) {\n    /**\n     * @type {number}\n     * @private\n     * @default 0\n     */\n    this._concurrentRequests = 0;\n    /**\n     * @type {boolean}\n     * @private\n     * @default false\n     */\n    this._didConcurrentRequestWarn = false;\n    this._options = TeenyStatistics._prepareOptions(opts);\n  }\n  /**\n   * Returns a copy of the current options.\n   * @return {TeenyStatisticsOptions}\n   */\n  getOptions() {\n    return Object.assign({}, this._options);\n  }\n  /**\n   * Change configured statistics options. This will not preserve unspecified\n   *   options that were previously specified, i.e. this is a reset of options.\n   * @param {TeenyStatisticsOptions} [opts]\n   * @returns {TeenyStatisticsConfig} The previous options.\n   * @see _prepareOptions\n   */\n  setOptions(opts) {\n    const oldOpts = this._options;\n    this._options = TeenyStatistics._prepareOptions(opts);\n    return oldOpts;\n  }\n  /**\n   * @readonly\n   * @return {TeenyStatisticsCounters}\n   */\n  get counters() {\n    return {\n      concurrentRequests: this._concurrentRequests\n    };\n  }\n  /**\n   * @description Should call this right before making a request.\n   */\n  requestStarting() {\n    this._concurrentRequests++;\n    if (this._options.concurrentRequests > 0 && this._concurrentRequests >= this._options.concurrentRequests && !this._didConcurrentRequestWarn) {\n      this._didConcurrentRequestWarn = true;\n      const warning = new TeenyStatisticsWarning('Possible excessive concurrent requests detected. ' + this._concurrentRequests + ' requests in-flight, which exceeds the configured threshold of ' + this._options.concurrentRequests + '. Use the TEENY_REQUEST_WARN_CONCURRENT_REQUESTS environment ' + 'variable or the concurrentRequests option of teeny-request to ' + 'increase or disable (0) this warning.');\n      warning.type = TeenyStatisticsWarning.CONCURRENT_REQUESTS;\n      warning.value = this._concurrentRequests;\n      warning.threshold = this._options.concurrentRequests;\n      process.emitWarning(warning);\n    }\n  }\n  /**\n   * @description When using `requestStarting`, call this after the request\n   *   has finished.\n   */\n  requestFinished() {\n    // TODO negative?\n    this._concurrentRequests--;\n  }\n  /**\n   * Configuration Precedence:\n   *   1. Dependency inversion via defined option.\n   *   2. Global numeric environment variable.\n   *   3. Built-in default.\n   * This will not preserve unspecified options previously specified.\n   * @param {TeenyStatisticsOptions} [opts]\n   * @returns {TeenyStatisticsOptions}\n   * @private\n   */\n  static _prepareOptions({\n    concurrentRequests: diConcurrentRequests\n  } = {}) {\n    let concurrentRequests = this.DEFAULT_WARN_CONCURRENT_REQUESTS;\n    const envConcurrentRequests = Number(process.env.TEENY_REQUEST_WARN_CONCURRENT_REQUESTS);\n    if (diConcurrentRequests !== undefined) {\n      concurrentRequests = diConcurrentRequests;\n    } else if (!Number.isNaN(envConcurrentRequests)) {\n      concurrentRequests = envConcurrentRequests;\n    }\n    return {\n      concurrentRequests\n    };\n  }\n}\nexports.TeenyStatistics = TeenyStatistics;\n/**\n * @description A default threshold representing when to warn about excessive\n *   in-flight/concurrent requests.\n * @type {number}\n * @static\n * @readonly\n * @default 5000\n */\nTeenyStatistics.DEFAULT_WARN_CONCURRENT_REQUESTS = 5000;","map":{"version":3,"names":["TeenyStatisticsWarning","Error","constructor","message","threshold","type","value","name","captureStackTrace","exports","CONCURRENT_REQUESTS","TeenyStatistics","opts","_concurrentRequests","_didConcurrentRequestWarn","_options","_prepareOptions","getOptions","Object","assign","setOptions","oldOpts","counters","concurrentRequests","requestStarting","warning","process","emitWarning","requestFinished","diConcurrentRequests","DEFAULT_WARN_CONCURRENT_REQUESTS","envConcurrentRequests","Number","env","TEENY_REQUEST_WARN_CONCURRENT_REQUESTS","undefined","isNaN"],"sources":["../../src/TeenyStatistics.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}