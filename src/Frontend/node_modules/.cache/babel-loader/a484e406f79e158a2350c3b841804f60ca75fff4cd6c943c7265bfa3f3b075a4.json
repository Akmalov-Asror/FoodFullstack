{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Namespace;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\nvar Field = require(\"./field\"),\n  OneOf = require(\"./oneof\"),\n  util = require(\"./util\");\nvar Type,\n  // cyclic\n  Service, Enum;\n\n/**\n * Constructs a new namespace instance.\n * @name Namespace\n * @classdesc Reflected namespace.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a namespace from JSON.\n * @memberof Namespace\n * @function\n * @param {string} name Namespace name\n * @param {Object.<string,*>} json JSON object\n * @returns {Namespace} Created namespace\n * @throws {TypeError} If arguments are invalid\n */\nNamespace.fromJSON = function fromJSON(name, json) {\n  return new Namespace(name, json.options).addJSON(json.nested);\n};\n\n/**\n * Converts an array of reflection objects to JSON.\n * @memberof Namespace\n * @param {ReflectionObject[]} array Object array\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\n */\nfunction arrayToJSON(array, toJSONOptions) {\n  if (!(array && array.length)) return undefined;\n  var obj = {};\n  for (var i = 0; i < array.length; ++i) obj[array[i].name] = array[i].toJSON(toJSONOptions);\n  return obj;\n}\nNamespace.arrayToJSON = arrayToJSON;\n\n/**\n * Tests if the specified id is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedId = function isReservedId(reserved, id) {\n  if (reserved) for (var i = 0; i < reserved.length; ++i) if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] > id) return true;\n  return false;\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedName = function isReservedName(reserved, name) {\n  if (reserved) for (var i = 0; i < reserved.length; ++i) if (reserved[i] === name) return true;\n  return false;\n};\n\n/**\n * Not an actual constructor. Use {@link Namespace} instead.\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports NamespaceBase\n * @extends ReflectionObject\n * @abstract\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n * @see {@link Namespace}\n */\nfunction Namespace(name, options) {\n  ReflectionObject.call(this, name, options);\n\n  /**\n   * Nested objects by name.\n   * @type {Object.<string,ReflectionObject>|undefined}\n   */\n  this.nested = undefined; // toJSON\n\n  /**\n   * Cached nested objects as an array.\n   * @type {ReflectionObject[]|null}\n   * @private\n   */\n  this._nestedArray = null;\n}\nfunction clearCache(namespace) {\n  namespace._nestedArray = null;\n  return namespace;\n}\n\n/**\n * Nested objects of this namespace as an array for iteration.\n * @name NamespaceBase#nestedArray\n * @type {ReflectionObject[]}\n * @readonly\n */\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\n  get: function () {\n    return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\n  }\n});\n\n/**\n * Namespace descriptor.\n * @interface INamespace\n * @property {Object.<string,*>} [options] Namespace options\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\n */\n\n/**\n * Any extension field descriptor.\n * @typedef AnyExtensionField\n * @type {IExtensionField|IExtensionMapField}\n */\n\n/**\n * Any nested object descriptor.\n * @typedef AnyNestedObject\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace}\n */\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\n\n/**\n * Converts this namespace to a namespace descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {INamespace} Namespace descriptor\n */\nNamespace.prototype.toJSON = function toJSON(toJSONOptions) {\n  return util.toObject([\"options\", this.options, \"nested\", arrayToJSON(this.nestedArray, toJSONOptions)]);\n};\n\n/**\n * Adds nested objects to this namespace from nested object descriptors.\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\n * @returns {Namespace} `this`\n */\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\n  var ns = this;\n  /* istanbul ignore else */\n  if (nestedJson) {\n    for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\n      nested = nestedJson[names[i]];\n      ns.add(\n      // most to least likely\n      (nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : nested.id !== undefined ? Field.fromJSON : Namespace.fromJSON)(names[i], nested));\n    }\n  }\n  return this;\n};\n\n/**\n * Gets the nested object of the specified name.\n * @param {string} name Nested object name\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\n */\nNamespace.prototype.get = function get(name) {\n  return this.nested && this.nested[name] || null;\n};\n\n/**\n * Gets the values of the nested {@link Enum|enum} of the specified name.\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\n * @param {string} name Nested enum name\n * @returns {Object.<string,number>} Enum values\n * @throws {Error} If there is no such enum\n */\nNamespace.prototype.getEnum = function getEnum(name) {\n  if (this.nested && this.nested[name] instanceof Enum) return this.nested[name].values;\n  throw Error(\"no such enum: \" + name);\n};\n\n/**\n * Adds a nested object to this namespace.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name\n */\nNamespace.prototype.add = function add(object) {\n  if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace || object instanceof OneOf)) throw TypeError(\"object must be a valid nested object\");\n  if (!this.nested) this.nested = {};else {\n    var prev = this.get(object.name);\n    if (prev) {\n      if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\n        // replace plain namespace but keep existing nested elements and options\n        var nested = prev.nestedArray;\n        for (var i = 0; i < nested.length; ++i) object.add(nested[i]);\n        this.remove(prev);\n        if (!this.nested) this.nested = {};\n        object.setOptions(prev.options, true);\n      } else throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n    }\n  }\n  this.nested[object.name] = object;\n  object.onAdd(this);\n  return clearCache(this);\n};\n\n/**\n * Removes a nested object from this namespace.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this namespace\n */\nNamespace.prototype.remove = function remove(object) {\n  if (!(object instanceof ReflectionObject)) throw TypeError(\"object must be a ReflectionObject\");\n  if (object.parent !== this) throw Error(object + \" is not a member of \" + this);\n  delete this.nested[object.name];\n  if (!Object.keys(this.nested).length) this.nested = undefined;\n  object.onRemove(this);\n  return clearCache(this);\n};\n\n/**\n * Defines additial namespaces within this one if not yet existing.\n * @param {string|string[]} path Path to create\n * @param {*} [json] Nested types to create from JSON\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\n */\nNamespace.prototype.define = function define(path, json) {\n  if (util.isString(path)) path = path.split(\".\");else if (!Array.isArray(path)) throw TypeError(\"illegal path\");\n  if (path && path.length && path[0] === \"\") throw Error(\"path must be relative\");\n  var ptr = this;\n  while (path.length > 0) {\n    var part = path.shift();\n    if (ptr.nested && ptr.nested[part]) {\n      ptr = ptr.nested[part];\n      if (!(ptr instanceof Namespace)) throw Error(\"path conflicts with non-namespace objects\");\n    } else ptr.add(ptr = new Namespace(part));\n  }\n  if (json) ptr.addJSON(json);\n  return ptr;\n};\n\n/**\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\n * @returns {Namespace} `this`\n */\nNamespace.prototype.resolveAll = function resolveAll() {\n  var nested = this.nestedArray,\n    i = 0;\n  while (i < nested.length) if (nested[i] instanceof Namespace) nested[i++].resolveAll();else nested[i++].resolve();\n  return this.resolve();\n};\n\n/**\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\n * @param {string|string[]} path Path to look up\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n */\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\n  /* istanbul ignore next */\n  if (typeof filterTypes === \"boolean\") {\n    parentAlreadyChecked = filterTypes;\n    filterTypes = undefined;\n  } else if (filterTypes && !Array.isArray(filterTypes)) filterTypes = [filterTypes];\n  if (util.isString(path) && path.length) {\n    if (path === \".\") return this.root;\n    path = path.split(\".\");\n  } else if (!path.length) return this;\n\n  // Start at root if path is absolute\n  if (path[0] === \"\") return this.root.lookup(path.slice(1), filterTypes);\n\n  // Test if the first part matches any nested object, and if so, traverse if path contains more\n  var found = this.get(path[0]);\n  if (found) {\n    if (path.length === 1) {\n      if (!filterTypes || filterTypes.indexOf(found.constructor) > -1) return found;\n    } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true))) return found;\n\n    // Otherwise try each nested namespace\n  } else for (var i = 0; i < this.nestedArray.length; ++i) if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true))) return found;\n\n  // If there hasn't been a match, try again at the parent\n  if (this.parent === null || parentAlreadyChecked) return null;\n  return this.parent.lookup(path, filterTypes);\n};\n\n/**\n * Looks up the reflection object at the specified path, relative to this namespace.\n * @name NamespaceBase#lookup\n * @function\n * @param {string|string[]} path Path to look up\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n * @variation 2\n */\n// lookup(path: string, [parentAlreadyChecked: boolean])\n\n/**\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type\n * @throws {Error} If `path` does not point to a type\n */\nNamespace.prototype.lookupType = function lookupType(path) {\n  var found = this.lookup(path, [Type]);\n  if (!found) throw Error(\"no such type: \" + path);\n  return found;\n};\n\n/**\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Enum} Looked up enum\n * @throws {Error} If `path` does not point to an enum\n */\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\n  var found = this.lookup(path, [Enum]);\n  if (!found) throw Error(\"no such Enum '\" + path + \"' in \" + this);\n  return found;\n};\n\n/**\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type or enum\n * @throws {Error} If `path` does not point to a type or enum\n */\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\n  var found = this.lookup(path, [Type, Enum]);\n  if (!found) throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\n  return found;\n};\n\n/**\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Service} Looked up service\n * @throws {Error} If `path` does not point to a service\n */\nNamespace.prototype.lookupService = function lookupService(path) {\n  var found = this.lookup(path, [Service]);\n  if (!found) throw Error(\"no such Service '\" + path + \"' in \" + this);\n  return found;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nNamespace._configure = function (Type_, Service_, Enum_) {\n  Type = Type_;\n  Service = Service_;\n  Enum = Enum_;\n};","map":{"version":3,"names":["module","exports","Namespace","ReflectionObject","require","prototype","Object","create","constructor","className","Field","OneOf","util","Type","Service","Enum","fromJSON","name","json","options","addJSON","nested","arrayToJSON","array","toJSONOptions","length","undefined","obj","i","toJSON","isReservedId","reserved","id","isReservedName","call","_nestedArray","clearCache","namespace","defineProperty","get","toArray","toObject","nestedArray","nestedJson","ns","names","keys","add","fields","values","methods","getEnum","Error","object","extend","TypeError","prev","remove","setOptions","onAdd","parent","onRemove","define","path","isString","split","Array","isArray","ptr","part","shift","resolveAll","resolve","lookup","filterTypes","parentAlreadyChecked","root","slice","found","indexOf","lookupType","lookupEnum","lookupTypeOrEnum","lookupService","_configure","Type_","Service_","Enum_"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/google-gax/node_modules/protobufjs/src/namespace.js"],"sourcesContent":["\"use strict\";\nmodule.exports = Namespace;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\n\nvar Field    = require(\"./field\"),\n    OneOf    = require(\"./oneof\"),\n    util     = require(\"./util\");\n\nvar Type,    // cyclic\n    Service,\n    Enum;\n\n/**\n * Constructs a new namespace instance.\n * @name Namespace\n * @classdesc Reflected namespace.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a namespace from JSON.\n * @memberof Namespace\n * @function\n * @param {string} name Namespace name\n * @param {Object.<string,*>} json JSON object\n * @returns {Namespace} Created namespace\n * @throws {TypeError} If arguments are invalid\n */\nNamespace.fromJSON = function fromJSON(name, json) {\n    return new Namespace(name, json.options).addJSON(json.nested);\n};\n\n/**\n * Converts an array of reflection objects to JSON.\n * @memberof Namespace\n * @param {ReflectionObject[]} array Object array\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\n */\nfunction arrayToJSON(array, toJSONOptions) {\n    if (!(array && array.length))\n        return undefined;\n    var obj = {};\n    for (var i = 0; i < array.length; ++i)\n        obj[array[i].name] = array[i].toJSON(toJSONOptions);\n    return obj;\n}\n\nNamespace.arrayToJSON = arrayToJSON;\n\n/**\n * Tests if the specified id is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedId = function isReservedId(reserved, id) {\n    if (reserved)\n        for (var i = 0; i < reserved.length; ++i)\n            if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] > id)\n                return true;\n    return false;\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedName = function isReservedName(reserved, name) {\n    if (reserved)\n        for (var i = 0; i < reserved.length; ++i)\n            if (reserved[i] === name)\n                return true;\n    return false;\n};\n\n/**\n * Not an actual constructor. Use {@link Namespace} instead.\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports NamespaceBase\n * @extends ReflectionObject\n * @abstract\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n * @see {@link Namespace}\n */\nfunction Namespace(name, options) {\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Nested objects by name.\n     * @type {Object.<string,ReflectionObject>|undefined}\n     */\n    this.nested = undefined; // toJSON\n\n    /**\n     * Cached nested objects as an array.\n     * @type {ReflectionObject[]|null}\n     * @private\n     */\n    this._nestedArray = null;\n}\n\nfunction clearCache(namespace) {\n    namespace._nestedArray = null;\n    return namespace;\n}\n\n/**\n * Nested objects of this namespace as an array for iteration.\n * @name NamespaceBase#nestedArray\n * @type {ReflectionObject[]}\n * @readonly\n */\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\n    get: function() {\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\n    }\n});\n\n/**\n * Namespace descriptor.\n * @interface INamespace\n * @property {Object.<string,*>} [options] Namespace options\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\n */\n\n/**\n * Any extension field descriptor.\n * @typedef AnyExtensionField\n * @type {IExtensionField|IExtensionMapField}\n */\n\n/**\n * Any nested object descriptor.\n * @typedef AnyNestedObject\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace}\n */\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\n\n/**\n * Converts this namespace to a namespace descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {INamespace} Namespace descriptor\n */\nNamespace.prototype.toJSON = function toJSON(toJSONOptions) {\n    return util.toObject([\n        \"options\" , this.options,\n        \"nested\"  , arrayToJSON(this.nestedArray, toJSONOptions)\n    ]);\n};\n\n/**\n * Adds nested objects to this namespace from nested object descriptors.\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\n * @returns {Namespace} `this`\n */\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\n    var ns = this;\n    /* istanbul ignore else */\n    if (nestedJson) {\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\n            nested = nestedJson[names[i]];\n            ns.add( // most to least likely\n                ( nested.fields !== undefined\n                ? Type.fromJSON\n                : nested.values !== undefined\n                ? Enum.fromJSON\n                : nested.methods !== undefined\n                ? Service.fromJSON\n                : nested.id !== undefined\n                ? Field.fromJSON\n                : Namespace.fromJSON )(names[i], nested)\n            );\n        }\n    }\n    return this;\n};\n\n/**\n * Gets the nested object of the specified name.\n * @param {string} name Nested object name\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\n */\nNamespace.prototype.get = function get(name) {\n    return this.nested && this.nested[name]\n        || null;\n};\n\n/**\n * Gets the values of the nested {@link Enum|enum} of the specified name.\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\n * @param {string} name Nested enum name\n * @returns {Object.<string,number>} Enum values\n * @throws {Error} If there is no such enum\n */\nNamespace.prototype.getEnum = function getEnum(name) {\n    if (this.nested && this.nested[name] instanceof Enum)\n        return this.nested[name].values;\n    throw Error(\"no such enum: \" + name);\n};\n\n/**\n * Adds a nested object to this namespace.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name\n */\nNamespace.prototype.add = function add(object) {\n\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace || object instanceof OneOf))\n        throw TypeError(\"object must be a valid nested object\");\n\n    if (!this.nested)\n        this.nested = {};\n    else {\n        var prev = this.get(object.name);\n        if (prev) {\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\n                // replace plain namespace but keep existing nested elements and options\n                var nested = prev.nestedArray;\n                for (var i = 0; i < nested.length; ++i)\n                    object.add(nested[i]);\n                this.remove(prev);\n                if (!this.nested)\n                    this.nested = {};\n                object.setOptions(prev.options, true);\n\n            } else\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n        }\n    }\n    this.nested[object.name] = object;\n    object.onAdd(this);\n    return clearCache(this);\n};\n\n/**\n * Removes a nested object from this namespace.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this namespace\n */\nNamespace.prototype.remove = function remove(object) {\n\n    if (!(object instanceof ReflectionObject))\n        throw TypeError(\"object must be a ReflectionObject\");\n    if (object.parent !== this)\n        throw Error(object + \" is not a member of \" + this);\n\n    delete this.nested[object.name];\n    if (!Object.keys(this.nested).length)\n        this.nested = undefined;\n\n    object.onRemove(this);\n    return clearCache(this);\n};\n\n/**\n * Defines additial namespaces within this one if not yet existing.\n * @param {string|string[]} path Path to create\n * @param {*} [json] Nested types to create from JSON\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\n */\nNamespace.prototype.define = function define(path, json) {\n\n    if (util.isString(path))\n        path = path.split(\".\");\n    else if (!Array.isArray(path))\n        throw TypeError(\"illegal path\");\n    if (path && path.length && path[0] === \"\")\n        throw Error(\"path must be relative\");\n\n    var ptr = this;\n    while (path.length > 0) {\n        var part = path.shift();\n        if (ptr.nested && ptr.nested[part]) {\n            ptr = ptr.nested[part];\n            if (!(ptr instanceof Namespace))\n                throw Error(\"path conflicts with non-namespace objects\");\n        } else\n            ptr.add(ptr = new Namespace(part));\n    }\n    if (json)\n        ptr.addJSON(json);\n    return ptr;\n};\n\n/**\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\n * @returns {Namespace} `this`\n */\nNamespace.prototype.resolveAll = function resolveAll() {\n    var nested = this.nestedArray, i = 0;\n    while (i < nested.length)\n        if (nested[i] instanceof Namespace)\n            nested[i++].resolveAll();\n        else\n            nested[i++].resolve();\n    return this.resolve();\n};\n\n/**\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\n * @param {string|string[]} path Path to look up\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n */\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\n\n    /* istanbul ignore next */\n    if (typeof filterTypes === \"boolean\") {\n        parentAlreadyChecked = filterTypes;\n        filterTypes = undefined;\n    } else if (filterTypes && !Array.isArray(filterTypes))\n        filterTypes = [ filterTypes ];\n\n    if (util.isString(path) && path.length) {\n        if (path === \".\")\n            return this.root;\n        path = path.split(\".\");\n    } else if (!path.length)\n        return this;\n\n    // Start at root if path is absolute\n    if (path[0] === \"\")\n        return this.root.lookup(path.slice(1), filterTypes);\n\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\n    var found = this.get(path[0]);\n    if (found) {\n        if (path.length === 1) {\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\n                return found;\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\n            return found;\n\n    // Otherwise try each nested namespace\n    } else\n        for (var i = 0; i < this.nestedArray.length; ++i)\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\n                return found;\n\n    // If there hasn't been a match, try again at the parent\n    if (this.parent === null || parentAlreadyChecked)\n        return null;\n    return this.parent.lookup(path, filterTypes);\n};\n\n/**\n * Looks up the reflection object at the specified path, relative to this namespace.\n * @name NamespaceBase#lookup\n * @function\n * @param {string|string[]} path Path to look up\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n * @variation 2\n */\n// lookup(path: string, [parentAlreadyChecked: boolean])\n\n/**\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type\n * @throws {Error} If `path` does not point to a type\n */\nNamespace.prototype.lookupType = function lookupType(path) {\n    var found = this.lookup(path, [ Type ]);\n    if (!found)\n        throw Error(\"no such type: \" + path);\n    return found;\n};\n\n/**\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Enum} Looked up enum\n * @throws {Error} If `path` does not point to an enum\n */\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\n    var found = this.lookup(path, [ Enum ]);\n    if (!found)\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\n    return found;\n};\n\n/**\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type or enum\n * @throws {Error} If `path` does not point to a type or enum\n */\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\n    var found = this.lookup(path, [ Type, Enum ]);\n    if (!found)\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\n    return found;\n};\n\n/**\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Service} Looked up service\n * @throws {Error} If `path` does not point to a service\n */\nNamespace.prototype.lookupService = function lookupService(path) {\n    var found = this.lookup(path, [ Service ]);\n    if (!found)\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\n    return found;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nNamespace._configure = function(Type_, Service_, Enum_) {\n    Type    = Type_;\n    Service = Service_;\n    Enum    = Enum_;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}