{"ast":null,"code":"\"use strict\";\n\nmodule.exports = verifier;\nvar Enum = require(\"./enum\"),\n  util = require(\"./util\");\nfunction invalid(field, expected) {\n  return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\" + field.keyType + \"}\" : \"\") + \" expected\";\n}\n\n/**\n * Generates a partial value verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\n  /* eslint-disable no-unexpected-multiline */\n  if (field.resolvedType) {\n    if (field.resolvedType instanceof Enum) {\n      gen(\"switch(%s){\", ref)(\"default:\")(\"return%j\", invalid(field, \"enum value\"));\n      for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen(\"case %i:\", field.resolvedType.values[keys[j]]);\n      gen(\"break\")(\"}\");\n    } else {\n      gen(\"{\")(\"var e=types[%i].verify(%s);\", fieldIndex, ref)(\"if(e)\")(\"return%j+e\", field.name + \".\")(\"}\");\n    }\n  } else {\n    switch (field.type) {\n      case \"int32\":\n      case \"uint32\":\n      case \"sint32\":\n      case \"fixed32\":\n      case \"sfixed32\":\n        gen(\"if(!util.isInteger(%s))\", ref)(\"return%j\", invalid(field, \"integer\"));\n        break;\n      case \"int64\":\n      case \"uint64\":\n      case \"sint64\":\n      case \"fixed64\":\n      case \"sfixed64\":\n        gen(\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)(\"return%j\", invalid(field, \"integer|Long\"));\n        break;\n      case \"float\":\n      case \"double\":\n        gen(\"if(typeof %s!==\\\"number\\\")\", ref)(\"return%j\", invalid(field, \"number\"));\n        break;\n      case \"bool\":\n        gen(\"if(typeof %s!==\\\"boolean\\\")\", ref)(\"return%j\", invalid(field, \"boolean\"));\n        break;\n      case \"string\":\n        gen(\"if(!util.isString(%s))\", ref)(\"return%j\", invalid(field, \"string\"));\n        break;\n      case \"bytes\":\n        gen(\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)(\"return%j\", invalid(field, \"buffer\"));\n        break;\n    }\n  }\n  return gen;\n  /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a partial key verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyKey(gen, field, ref) {\n  /* eslint-disable no-unexpected-multiline */\n  switch (field.keyType) {\n    case \"int32\":\n    case \"uint32\":\n    case \"sint32\":\n    case \"fixed32\":\n    case \"sfixed32\":\n      gen(\"if(!util.key32Re.test(%s))\", ref)(\"return%j\", invalid(field, \"integer key\"));\n      break;\n    case \"int64\":\n    case \"uint64\":\n    case \"sint64\":\n    case \"fixed64\":\n    case \"sfixed64\":\n      gen(\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n      (\"return%j\", invalid(field, \"integer|Long key\"));\n      break;\n    case \"bool\":\n      gen(\"if(!util.key2Re.test(%s))\", ref)(\"return%j\", invalid(field, \"boolean key\"));\n      break;\n  }\n  return gen;\n  /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a verifier specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction verifier(mtype) {\n  /* eslint-disable no-unexpected-multiline */\n\n  var gen = util.codegen([\"m\"], mtype.name + \"$verify\")(\"if(typeof m!==\\\"object\\\"||m===null)\")(\"return%j\", \"object expected\");\n  var oneofs = mtype.oneofsArray,\n    seenFirstField = {};\n  if (oneofs.length) gen(\"var p={}\");\n  for (var i = 0; i < /* initializes */mtype.fieldsArray.length; ++i) {\n    var field = mtype._fieldsArray[i].resolve(),\n      ref = \"m\" + util.safeProp(field.name);\n    if (field.optional) gen(\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n\n    // map fields\n    if (field.map) {\n      gen(\"if(!util.isObject(%s))\", ref)(\"return%j\", invalid(field, \"object\"))(\"var k=Object.keys(%s)\", ref)(\"for(var i=0;i<k.length;++i){\");\n      genVerifyKey(gen, field, \"k[i]\");\n      genVerifyValue(gen, field, i, ref + \"[k[i]]\")(\"}\");\n\n      // repeated fields\n    } else if (field.repeated) {\n      gen(\"if(!Array.isArray(%s))\", ref)(\"return%j\", invalid(field, \"array\"))(\"for(var i=0;i<%s.length;++i){\", ref);\n      genVerifyValue(gen, field, i, ref + \"[i]\")(\"}\");\n\n      // required or present fields\n    } else {\n      if (field.partOf) {\n        var oneofProp = util.safeProp(field.partOf.name);\n        if (seenFirstField[field.partOf.name] === 1) gen(\"if(p%s===1)\", oneofProp)(\"return%j\", field.partOf.name + \": multiple values\");\n        seenFirstField[field.partOf.name] = 1;\n        gen(\"p%s=1\", oneofProp);\n      }\n      genVerifyValue(gen, field, i, ref);\n    }\n    if (field.optional) gen(\"}\");\n  }\n  return gen(\"return null\");\n  /* eslint-enable no-unexpected-multiline */\n}","map":{"version":3,"names":["module","exports","verifier","Enum","require","util","invalid","field","expected","name","repeated","map","keyType","genVerifyValue","gen","fieldIndex","ref","resolvedType","keys","Object","values","j","length","type","genVerifyKey","mtype","codegen","oneofs","oneofsArray","seenFirstField","i","fieldsArray","_fieldsArray","resolve","safeProp","optional","partOf","oneofProp"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/google-gax/node_modules/protobufjs/src/verifier.js"],"sourcesContent":["\"use strict\";\nmodule.exports = verifier;\n\nvar Enum      = require(\"./enum\"),\n    util      = require(\"./util\");\n\nfunction invalid(field, expected) {\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\n}\n\n/**\n * Generates a partial value verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) { gen\n            (\"switch(%s){\", ref)\n                (\"default:\")\n                    (\"return%j\", invalid(field, \"enum value\"));\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\n            gen\n                    (\"break\")\n            (\"}\");\n        } else {\n            gen\n            (\"{\")\n                (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\n                (\"if(e)\")\n                    (\"return%j+e\", field.name + \".\")\n            (\"}\");\n        }\n    } else {\n        switch (field.type) {\n            case \"int32\":\n            case \"uint32\":\n            case \"sint32\":\n            case \"fixed32\":\n            case \"sfixed32\": gen\n                (\"if(!util.isInteger(%s))\", ref)\n                    (\"return%j\", invalid(field, \"integer\"));\n                break;\n            case \"int64\":\n            case \"uint64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\n                    (\"return%j\", invalid(field, \"integer|Long\"));\n                break;\n            case \"float\":\n            case \"double\": gen\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\n                    (\"return%j\", invalid(field, \"number\"));\n                break;\n            case \"bool\": gen\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\n                    (\"return%j\", invalid(field, \"boolean\"));\n                break;\n            case \"string\": gen\n                (\"if(!util.isString(%s))\", ref)\n                    (\"return%j\", invalid(field, \"string\"));\n                break;\n            case \"bytes\": gen\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\n                    (\"return%j\", invalid(field, \"buffer\"));\n                break;\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a partial key verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyKey(gen, field, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    switch (field.keyType) {\n        case \"int32\":\n        case \"uint32\":\n        case \"sint32\":\n        case \"fixed32\":\n        case \"sfixed32\": gen\n            (\"if(!util.key32Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"integer key\"));\n            break;\n        case \"int64\":\n        case \"uint64\":\n        case \"sint64\":\n        case \"fixed64\":\n        case \"sfixed64\": gen\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n                (\"return%j\", invalid(field, \"integer|Long key\"));\n            break;\n        case \"bool\": gen\n            (\"if(!util.key2Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"boolean key\"));\n            break;\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a verifier specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction verifier(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\n        (\"return%j\", \"object expected\");\n    var oneofs = mtype.oneofsArray,\n        seenFirstField = {};\n    if (oneofs.length) gen\n    (\"var p={}\");\n\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n        var field = mtype._fieldsArray[i].resolve(),\n            ref   = \"m\" + util.safeProp(field.name);\n\n        if (field.optional) gen\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n\n        // map fields\n        if (field.map) { gen\n            (\"if(!util.isObject(%s))\", ref)\n                (\"return%j\", invalid(field, \"object\"))\n            (\"var k=Object.keys(%s)\", ref)\n            (\"for(var i=0;i<k.length;++i){\");\n                genVerifyKey(gen, field, \"k[i]\");\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\n            (\"}\");\n\n        // repeated fields\n        } else if (field.repeated) { gen\n            (\"if(!Array.isArray(%s))\", ref)\n                (\"return%j\", invalid(field, \"array\"))\n            (\"for(var i=0;i<%s.length;++i){\", ref);\n                genVerifyValue(gen, field, i, ref + \"[i]\")\n            (\"}\");\n\n        // required or present fields\n        } else {\n            if (field.partOf) {\n                var oneofProp = util.safeProp(field.partOf.name);\n                if (seenFirstField[field.partOf.name] === 1) gen\n            (\"if(p%s===1)\", oneofProp)\n                (\"return%j\", field.partOf.name + \": multiple values\");\n                seenFirstField[field.partOf.name] = 1;\n                gen\n            (\"p%s=1\", oneofProp);\n            }\n            genVerifyValue(gen, field, i, ref);\n        }\n        if (field.optional) gen\n        (\"}\");\n    }\n    return gen\n    (\"return null\");\n    /* eslint-enable no-unexpected-multiline */\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}