{"ast":null,"code":"\"use strict\";\n\nmodule.exports = factory(factory);\n\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\n\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n// Factory function for the purpose of node-based testing in modified global environments\nfunction factory(exports) {\n  // float: typed array\n  if (typeof Float32Array !== \"undefined\") (function () {\n    var f32 = new Float32Array([-0]),\n      f8b = new Uint8Array(f32.buffer),\n      le = f8b[3] === 128;\n    function writeFloat_f32_cpy(val, buf, pos) {\n      f32[0] = val;\n      buf[pos] = f8b[0];\n      buf[pos + 1] = f8b[1];\n      buf[pos + 2] = f8b[2];\n      buf[pos + 3] = f8b[3];\n    }\n    function writeFloat_f32_rev(val, buf, pos) {\n      f32[0] = val;\n      buf[pos] = f8b[3];\n      buf[pos + 1] = f8b[2];\n      buf[pos + 2] = f8b[1];\n      buf[pos + 3] = f8b[0];\n    }\n\n    /* istanbul ignore next */\n    exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\n    /* istanbul ignore next */\n    exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\n    function readFloat_f32_cpy(buf, pos) {\n      f8b[0] = buf[pos];\n      f8b[1] = buf[pos + 1];\n      f8b[2] = buf[pos + 2];\n      f8b[3] = buf[pos + 3];\n      return f32[0];\n    }\n    function readFloat_f32_rev(buf, pos) {\n      f8b[3] = buf[pos];\n      f8b[2] = buf[pos + 1];\n      f8b[1] = buf[pos + 2];\n      f8b[0] = buf[pos + 3];\n      return f32[0];\n    }\n\n    /* istanbul ignore next */\n    exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\n    /* istanbul ignore next */\n    exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\n\n    // float: ieee754\n  })();else (function () {\n    function writeFloat_ieee754(writeUint, val, buf, pos) {\n      var sign = val < 0 ? 1 : 0;\n      if (sign) val = -val;\n      if (val === 0) writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos);else if (isNaN(val)) writeUint(2143289344, buf, pos);else if (val > 3.4028234663852886e+38)\n        // +-Infinity\n        writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);else if (val < 1.1754943508222875e-38)\n        // denormal\n        writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);else {\n        var exponent = Math.floor(Math.log(val) / Math.LN2),\n          mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\n        writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\n      }\n    }\n    exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\n    exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\n    function readFloat_ieee754(readUint, buf, pos) {\n      var uint = readUint(buf, pos),\n        sign = (uint >> 31) * 2 + 1,\n        exponent = uint >>> 23 & 255,\n        mantissa = uint & 8388607;\n      return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal\n      ? sign * 1.401298464324817e-45 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\n    }\n    exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\n    exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\n  })();\n\n  // double: typed array\n  if (typeof Float64Array !== \"undefined\") (function () {\n    var f64 = new Float64Array([-0]),\n      f8b = new Uint8Array(f64.buffer),\n      le = f8b[7] === 128;\n    function writeDouble_f64_cpy(val, buf, pos) {\n      f64[0] = val;\n      buf[pos] = f8b[0];\n      buf[pos + 1] = f8b[1];\n      buf[pos + 2] = f8b[2];\n      buf[pos + 3] = f8b[3];\n      buf[pos + 4] = f8b[4];\n      buf[pos + 5] = f8b[5];\n      buf[pos + 6] = f8b[6];\n      buf[pos + 7] = f8b[7];\n    }\n    function writeDouble_f64_rev(val, buf, pos) {\n      f64[0] = val;\n      buf[pos] = f8b[7];\n      buf[pos + 1] = f8b[6];\n      buf[pos + 2] = f8b[5];\n      buf[pos + 3] = f8b[4];\n      buf[pos + 4] = f8b[3];\n      buf[pos + 5] = f8b[2];\n      buf[pos + 6] = f8b[1];\n      buf[pos + 7] = f8b[0];\n    }\n\n    /* istanbul ignore next */\n    exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\n    /* istanbul ignore next */\n    exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\n    function readDouble_f64_cpy(buf, pos) {\n      f8b[0] = buf[pos];\n      f8b[1] = buf[pos + 1];\n      f8b[2] = buf[pos + 2];\n      f8b[3] = buf[pos + 3];\n      f8b[4] = buf[pos + 4];\n      f8b[5] = buf[pos + 5];\n      f8b[6] = buf[pos + 6];\n      f8b[7] = buf[pos + 7];\n      return f64[0];\n    }\n    function readDouble_f64_rev(buf, pos) {\n      f8b[7] = buf[pos];\n      f8b[6] = buf[pos + 1];\n      f8b[5] = buf[pos + 2];\n      f8b[4] = buf[pos + 3];\n      f8b[3] = buf[pos + 4];\n      f8b[2] = buf[pos + 5];\n      f8b[1] = buf[pos + 6];\n      f8b[0] = buf[pos + 7];\n      return f64[0];\n    }\n\n    /* istanbul ignore next */\n    exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\n    /* istanbul ignore next */\n    exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\n\n    // double: ieee754\n  })();else (function () {\n    function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\n      var sign = val < 0 ? 1 : 0;\n      if (sign) val = -val;\n      if (val === 0) {\n        writeUint(0, buf, pos + off0);\n        writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos + off1);\n      } else if (isNaN(val)) {\n        writeUint(0, buf, pos + off0);\n        writeUint(2146959360, buf, pos + off1);\n      } else if (val > 1.7976931348623157e+308) {\n        // +-Infinity\n        writeUint(0, buf, pos + off0);\n        writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\n      } else {\n        var mantissa;\n        if (val < 2.2250738585072014e-308) {\n          // denormal\n          mantissa = val / 5e-324;\n          writeUint(mantissa >>> 0, buf, pos + off0);\n          writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\n        } else {\n          var exponent = Math.floor(Math.log(val) / Math.LN2);\n          if (exponent === 1024) exponent = 1023;\n          mantissa = val * Math.pow(2, -exponent);\n          writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\n          writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\n        }\n      }\n    }\n    exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\n    exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\n    function readDouble_ieee754(readUint, off0, off1, buf, pos) {\n      var lo = readUint(buf, pos + off0),\n        hi = readUint(buf, pos + off1);\n      var sign = (hi >> 31) * 2 + 1,\n        exponent = hi >>> 20 & 2047,\n        mantissa = 4294967296 * (hi & 1048575) + lo;\n      return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal\n      ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\n    }\n    exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\n    exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\n  })();\n  return exports;\n}\n\n// uint helpers\n\nfunction writeUintLE(val, buf, pos) {\n  buf[pos] = val & 255;\n  buf[pos + 1] = val >>> 8 & 255;\n  buf[pos + 2] = val >>> 16 & 255;\n  buf[pos + 3] = val >>> 24;\n}\nfunction writeUintBE(val, buf, pos) {\n  buf[pos] = val >>> 24;\n  buf[pos + 1] = val >>> 16 & 255;\n  buf[pos + 2] = val >>> 8 & 255;\n  buf[pos + 3] = val & 255;\n}\nfunction readUintLE(buf, pos) {\n  return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;\n}\nfunction readUintBE(buf, pos) {\n  return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;\n}","map":{"version":3,"names":["module","exports","factory","Float32Array","f32","f8b","Uint8Array","buffer","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","writeFloatLE","writeFloatBE","readFloat_f32_cpy","readFloat_f32_rev","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","Math","round","exponent","floor","log","LN2","mantissa","pow","bind","writeUintLE","writeUintBE","readFloat_ieee754","readUint","uint","NaN","Infinity","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDouble_f64_cpy","readDouble_f64_rev","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/@protobufjs/float/index.js"],"sourcesContent":["\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}