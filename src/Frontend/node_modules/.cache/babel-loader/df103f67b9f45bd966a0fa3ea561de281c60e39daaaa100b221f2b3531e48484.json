{"ast":null,"code":"\"use strict\";\n\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n  Writer.call(this);\n}\nBufferWriter._configure = function () {\n  /**\n   * Allocates a buffer of the specified size.\n   * @function\n   * @param {number} size Buffer size\n   * @returns {Buffer} Buffer\n   */\n  BufferWriter.alloc = util._Buffer_allocUnsafe;\n  BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\" ? function writeBytesBuffer_set(val, buf, pos) {\n    buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n    // also works for plain array values\n  }\n  /* istanbul ignore next */ : function writeBytesBuffer_copy(val, buf, pos) {\n    if (val.copy)\n      // Buffer values\n      val.copy(buf, pos, 0, val.length);else for (var i = 0; i < val.length;)\n    // plain array values\n    buf[pos++] = val[i++];\n  };\n};\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n  if (util.isString(value)) value = util._Buffer_from(value, \"base64\");\n  var len = value.length >>> 0;\n  this.uint32(len);\n  if (len) this._push(BufferWriter.writeBytesBuffer, len, value);\n  return this;\n};\nfunction writeStringBuffer(val, buf, pos) {\n  if (val.length < 40)\n    // plain js is faster for short strings (probably due to redundant assertions)\n    util.utf8.write(val, buf, pos);else if (buf.utf8Write) buf.utf8Write(val, pos);else buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n  var len = util.Buffer.byteLength(value);\n  this.uint32(len);\n  if (len) this._push(writeStringBuffer, len, value);\n  return this;\n};\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();","map":{"version":3,"names":["module","exports","BufferWriter","Writer","require","prototype","Object","create","constructor","util","call","_configure","alloc","_Buffer_allocUnsafe","writeBytesBuffer","Buffer","Uint8Array","set","name","writeBytesBuffer_set","val","buf","pos","writeBytesBuffer_copy","copy","length","i","bytes","write_bytes_buffer","value","isString","_Buffer_from","len","uint32","_push","writeStringBuffer","utf8","write","utf8Write","string","write_string_buffer","byteLength"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/protobufjs/src/writer_buffer.js"],"sourcesContent":["\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,OAAO,GAAGC,YAAY;;AAE7B;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAChC,CAACF,YAAY,CAACG,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACJ,MAAM,CAACE,SAAS,CAAC,EAAEG,WAAW,GAAGN,YAAY;AAErF,IAAIO,IAAI,GAAGL,OAAO,CAAC,gBAAgB,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,YAAYA,CAAA,EAAG;EACpBC,MAAM,CAACO,IAAI,CAAC,IAAI,CAAC;AACrB;AAEAR,YAAY,CAACS,UAAU,GAAG,YAAY;EAClC;AACJ;AACA;AACA;AACA;AACA;EACIT,YAAY,CAACU,KAAK,GAAGH,IAAI,CAACI,mBAAmB;EAE7CX,YAAY,CAACY,gBAAgB,GAAGL,IAAI,CAACM,MAAM,IAAIN,IAAI,CAACM,MAAM,CAACV,SAAS,YAAYW,UAAU,IAAIP,IAAI,CAACM,MAAM,CAACV,SAAS,CAACY,GAAG,CAACC,IAAI,KAAK,KAAK,GAChI,SAASC,oBAAoBA,CAACC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAE;IAC7CD,GAAG,CAACJ,GAAG,CAACG,GAAG,EAAEE,GAAG,CAAC,CAAC,CAAC;IACnB;EACF;EACA,6BACE,SAASC,qBAAqBA,CAACH,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAE;IAC9C,IAAIF,GAAG,CAACI,IAAI;MAAE;MACZJ,GAAG,CAACI,IAAI,CAACH,GAAG,EAAEC,GAAG,EAAE,CAAC,EAAEF,GAAG,CAACK,MAAM,CAAC,CAAC,KAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,GAAG,CAACK,MAAM;IAAG;IACpCJ,GAAG,CAACC,GAAG,EAAE,CAAC,GAAGF,GAAG,CAACM,CAAC,EAAE,CAAC;EACzB,CAAC;AACT,CAAC;;AAGD;AACA;AACA;AACAxB,YAAY,CAACG,SAAS,CAACsB,KAAK,GAAG,SAASC,kBAAkBA,CAACC,KAAK,EAAE;EAC9D,IAAIpB,IAAI,CAACqB,QAAQ,CAACD,KAAK,CAAC,EACpBA,KAAK,GAAGpB,IAAI,CAACsB,YAAY,CAACF,KAAK,EAAE,QAAQ,CAAC;EAC9C,IAAIG,GAAG,GAAGH,KAAK,CAACJ,MAAM,KAAK,CAAC;EAC5B,IAAI,CAACQ,MAAM,CAACD,GAAG,CAAC;EAChB,IAAIA,GAAG,EACH,IAAI,CAACE,KAAK,CAAChC,YAAY,CAACY,gBAAgB,EAAEkB,GAAG,EAAEH,KAAK,CAAC;EACzD,OAAO,IAAI;AACf,CAAC;AAED,SAASM,iBAAiBA,CAACf,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAE;EACtC,IAAIF,GAAG,CAACK,MAAM,GAAG,EAAE;IAAE;IACjBhB,IAAI,CAAC2B,IAAI,CAACC,KAAK,CAACjB,GAAG,EAAEC,GAAG,EAAEC,GAAG,CAAC,CAAC,KAC9B,IAAID,GAAG,CAACiB,SAAS,EAClBjB,GAAG,CAACiB,SAAS,CAAClB,GAAG,EAAEE,GAAG,CAAC,CAAC,KAExBD,GAAG,CAACgB,KAAK,CAACjB,GAAG,EAAEE,GAAG,CAAC;AAC3B;;AAEA;AACA;AACA;AACApB,YAAY,CAACG,SAAS,CAACkC,MAAM,GAAG,SAASC,mBAAmBA,CAACX,KAAK,EAAE;EAChE,IAAIG,GAAG,GAAGvB,IAAI,CAACM,MAAM,CAAC0B,UAAU,CAACZ,KAAK,CAAC;EACvC,IAAI,CAACI,MAAM,CAACD,GAAG,CAAC;EAChB,IAAIA,GAAG,EACH,IAAI,CAACE,KAAK,CAACC,iBAAiB,EAAEH,GAAG,EAAEH,KAAK,CAAC;EAC7C,OAAO,IAAI;AACf,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;;AAEA3B,YAAY,CAACS,UAAU,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}