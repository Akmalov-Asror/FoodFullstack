{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPem = void 0;\nconst fs = require(\"fs\");\nconst forge = require(\"node-forge\");\nconst util_1 = require(\"util\");\nconst readFile = util_1.promisify(fs.readFile);\nfunction getPem(filename, callback) {\n  if (callback) {\n    getPemAsync(filename).then(pem => callback(null, pem)).catch(err => callback(err, null));\n  } else {\n    return getPemAsync(filename);\n  }\n}\nexports.getPem = getPem;\nfunction getPemAsync(filename) {\n  return readFile(filename, {\n    encoding: 'base64'\n  }).then(keyp12 => {\n    return convertToPem(keyp12);\n  });\n}\n/**\n * Converts a P12 in base64 encoding to a pem.\n * @param p12base64 String containing base64 encoded p12.\n * @returns a string containing the pem.\n */\nfunction convertToPem(p12base64) {\n  const p12Der = forge.util.decode64(p12base64);\n  const p12Asn1 = forge.asn1.fromDer(p12Der);\n  const p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, 'notasecret');\n  const bags = p12.getBags({\n    friendlyName: 'privatekey'\n  });\n  if (bags.friendlyName) {\n    const privateKey = bags.friendlyName[0].key;\n    const pem = forge.pki.privateKeyToPem(privateKey);\n    return pem.replace(/\\r\\n/g, '\\n');\n  } else {\n    throw new Error('Unable to get friendly name.');\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getPem","fs","require","forge","util_1","readFile","promisify","filename","callback","getPemAsync","then","pem","catch","err","encoding","keyp12","convertToPem","p12base64","p12Der","util","decode64","p12Asn1","asn1","fromDer","p12","pkcs12","pkcs12FromAsn1","bags","getBags","friendlyName","privateKey","key","pki","privateKeyToPem","replace","Error"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/google-p12-pem/build/src/index.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPem = void 0;\nconst fs = require(\"fs\");\nconst forge = require(\"node-forge\");\nconst util_1 = require(\"util\");\nconst readFile = util_1.promisify(fs.readFile);\nfunction getPem(filename, callback) {\n    if (callback) {\n        getPemAsync(filename)\n            .then(pem => callback(null, pem))\n            .catch(err => callback(err, null));\n    }\n    else {\n        return getPemAsync(filename);\n    }\n}\nexports.getPem = getPem;\nfunction getPemAsync(filename) {\n    return readFile(filename, { encoding: 'base64' }).then(keyp12 => {\n        return convertToPem(keyp12);\n    });\n}\n/**\n * Converts a P12 in base64 encoding to a pem.\n * @param p12base64 String containing base64 encoded p12.\n * @returns a string containing the pem.\n */\nfunction convertToPem(p12base64) {\n    const p12Der = forge.util.decode64(p12base64);\n    const p12Asn1 = forge.asn1.fromDer(p12Der);\n    const p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, 'notasecret');\n    const bags = p12.getBags({ friendlyName: 'privatekey' });\n    if (bags.friendlyName) {\n        const privateKey = bags.friendlyName[0].key;\n        const pem = forge.pki.privateKeyToPem(privateKey);\n        return pem.replace(/\\r\\n/g, '\\n');\n    }\n    else {\n        throw new Error('Unable to get friendly name.');\n    }\n}\n//# sourceMappingURL=index.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,MAAM,GAAG,KAAK,CAAC;AACvB,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAY,CAAC;AACnC,MAAME,MAAM,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC9B,MAAMG,QAAQ,GAAGD,MAAM,CAACE,SAAS,CAACL,EAAE,CAACI,QAAQ,CAAC;AAC9C,SAASL,MAAMA,CAACO,QAAQ,EAAEC,QAAQ,EAAE;EAChC,IAAIA,QAAQ,EAAE;IACVC,WAAW,CAACF,QAAQ,CAAC,CAChBG,IAAI,CAACC,GAAG,IAAIH,QAAQ,CAAC,IAAI,EAAEG,GAAG,CAAC,CAAC,CAChCC,KAAK,CAACC,GAAG,IAAIL,QAAQ,CAACK,GAAG,EAAE,IAAI,CAAC,CAAC;EAC1C,CAAC,MACI;IACD,OAAOJ,WAAW,CAACF,QAAQ,CAAC;EAChC;AACJ;AACAT,OAAO,CAACE,MAAM,GAAGA,MAAM;AACvB,SAASS,WAAWA,CAACF,QAAQ,EAAE;EAC3B,OAAOF,QAAQ,CAACE,QAAQ,EAAE;IAAEO,QAAQ,EAAE;EAAS,CAAC,CAAC,CAACJ,IAAI,CAACK,MAAM,IAAI;IAC7D,OAAOC,YAAY,CAACD,MAAM,CAAC;EAC/B,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAACC,SAAS,EAAE;EAC7B,MAAMC,MAAM,GAAGf,KAAK,CAACgB,IAAI,CAACC,QAAQ,CAACH,SAAS,CAAC;EAC7C,MAAMI,OAAO,GAAGlB,KAAK,CAACmB,IAAI,CAACC,OAAO,CAACL,MAAM,CAAC;EAC1C,MAAMM,GAAG,GAAGrB,KAAK,CAACsB,MAAM,CAACC,cAAc,CAACL,OAAO,EAAE,YAAY,CAAC;EAC9D,MAAMM,IAAI,GAAGH,GAAG,CAACI,OAAO,CAAC;IAAEC,YAAY,EAAE;EAAa,CAAC,CAAC;EACxD,IAAIF,IAAI,CAACE,YAAY,EAAE;IACnB,MAAMC,UAAU,GAAGH,IAAI,CAACE,YAAY,CAAC,CAAC,CAAC,CAACE,GAAG;IAC3C,MAAMpB,GAAG,GAAGR,KAAK,CAAC6B,GAAG,CAACC,eAAe,CAACH,UAAU,CAAC;IACjD,OAAOnB,GAAG,CAACuB,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC;EACrC,CAAC,MACI;IACD,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EACnD;AACJ"},"metadata":{},"sourceType":"script","externalDependencies":[]}