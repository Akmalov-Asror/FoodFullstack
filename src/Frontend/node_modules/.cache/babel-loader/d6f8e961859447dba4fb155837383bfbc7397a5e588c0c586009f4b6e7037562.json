{"ast":null,"code":"\"use strict\";\n\nvar protobuf = module.exports = require(\"./index-minimal\");\nprotobuf.build = \"light\";\n\n/**\n * A node-style callback as used by {@link load} and {@link Root#load}.\n * @typedef LoadCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Root} [root] Root, if there hasn't been an error\n * @returns {undefined}\n */\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n */\nfunction load(filename, root, callback) {\n  if (typeof root === \"function\") {\n    callback = root;\n    root = new protobuf.Root();\n  } else if (!root) root = new protobuf.Root();\n  return root.load(filename, callback);\n}\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Promise<Root>} Promise\n * @see {@link Root#load}\n * @variation 3\n */\n// function load(filename:string, [root:Root]):Promise<Root>\n\nprotobuf.load = load;\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n * @see {@link Root#loadSync}\n */\nfunction loadSync(filename, root) {\n  if (!root) root = new protobuf.Root();\n  return root.loadSync(filename);\n}\nprotobuf.loadSync = loadSync;\n\n// Serialization\nprotobuf.encoder = require(\"./encoder\");\nprotobuf.decoder = require(\"./decoder\");\nprotobuf.verifier = require(\"./verifier\");\nprotobuf.converter = require(\"./converter\");\n\n// Reflection\nprotobuf.ReflectionObject = require(\"./object\");\nprotobuf.Namespace = require(\"./namespace\");\nprotobuf.Root = require(\"./root\");\nprotobuf.Enum = require(\"./enum\");\nprotobuf.Type = require(\"./type\");\nprotobuf.Field = require(\"./field\");\nprotobuf.OneOf = require(\"./oneof\");\nprotobuf.MapField = require(\"./mapfield\");\nprotobuf.Service = require(\"./service\");\nprotobuf.Method = require(\"./method\");\n\n// Runtime\nprotobuf.Message = require(\"./message\");\nprotobuf.wrappers = require(\"./wrappers\");\n\n// Utility\nprotobuf.types = require(\"./types\");\nprotobuf.util = require(\"./util\");\n\n// Set up possibly cyclic reflection dependencies\nprotobuf.ReflectionObject._configure(protobuf.Root);\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\nprotobuf.Root._configure(protobuf.Type);\nprotobuf.Field._configure(protobuf.Type);","map":{"version":3,"names":["protobuf","module","exports","require","build","load","filename","root","callback","Root","loadSync","encoder","decoder","verifier","converter","ReflectionObject","Namespace","Enum","Type","Field","OneOf","MapField","Service","Method","Message","wrappers","types","util","_configure"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/google-gax/node_modules/protobufjs/src/index-light.js"],"sourcesContent":["\"use strict\";\nvar protobuf = module.exports = require(\"./index-minimal\");\n\nprotobuf.build = \"light\";\n\n/**\n * A node-style callback as used by {@link load} and {@link Root#load}.\n * @typedef LoadCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Root} [root] Root, if there hasn't been an error\n * @returns {undefined}\n */\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n */\nfunction load(filename, root, callback) {\n    if (typeof root === \"function\") {\n        callback = root;\n        root = new protobuf.Root();\n    } else if (!root)\n        root = new protobuf.Root();\n    return root.load(filename, callback);\n}\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Promise<Root>} Promise\n * @see {@link Root#load}\n * @variation 3\n */\n// function load(filename:string, [root:Root]):Promise<Root>\n\nprotobuf.load = load;\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n * @see {@link Root#loadSync}\n */\nfunction loadSync(filename, root) {\n    if (!root)\n        root = new protobuf.Root();\n    return root.loadSync(filename);\n}\n\nprotobuf.loadSync = loadSync;\n\n// Serialization\nprotobuf.encoder          = require(\"./encoder\");\nprotobuf.decoder          = require(\"./decoder\");\nprotobuf.verifier         = require(\"./verifier\");\nprotobuf.converter        = require(\"./converter\");\n\n// Reflection\nprotobuf.ReflectionObject = require(\"./object\");\nprotobuf.Namespace        = require(\"./namespace\");\nprotobuf.Root             = require(\"./root\");\nprotobuf.Enum             = require(\"./enum\");\nprotobuf.Type             = require(\"./type\");\nprotobuf.Field            = require(\"./field\");\nprotobuf.OneOf            = require(\"./oneof\");\nprotobuf.MapField         = require(\"./mapfield\");\nprotobuf.Service          = require(\"./service\");\nprotobuf.Method           = require(\"./method\");\n\n// Runtime\nprotobuf.Message          = require(\"./message\");\nprotobuf.wrappers         = require(\"./wrappers\");\n\n// Utility\nprotobuf.types            = require(\"./types\");\nprotobuf.util             = require(\"./util\");\n\n// Set up possibly cyclic reflection dependencies\nprotobuf.ReflectionObject._configure(protobuf.Root);\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\nprotobuf.Root._configure(protobuf.Type);\nprotobuf.Field._configure(protobuf.Type);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}