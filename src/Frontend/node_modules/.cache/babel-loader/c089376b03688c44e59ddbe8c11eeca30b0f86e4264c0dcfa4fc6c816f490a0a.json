{"ast":null,"code":"\"use strict\";\n\nmodule.exports = LongBits;\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n  // note that the casts below are theoretically unnecessary as of today, but older statically\n  // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n  /**\n   * Low bits.\n   * @type {number}\n   */\n  this.lo = lo >>> 0;\n\n  /**\n   * High bits.\n   * @type {number}\n   */\n  this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\nzero.toNumber = function () {\n  return 0;\n};\nzero.zzEncode = zero.zzDecode = function () {\n  return this;\n};\nzero.length = function () {\n  return 1;\n};\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n  if (value === 0) return zero;\n  var sign = value < 0;\n  if (sign) value = -value;\n  var lo = value >>> 0,\n    hi = (value - lo) / 4294967296 >>> 0;\n  if (sign) {\n    hi = ~hi >>> 0;\n    lo = ~lo >>> 0;\n    if (++lo > 4294967295) {\n      lo = 0;\n      if (++hi > 4294967295) hi = 0;\n    }\n  }\n  return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n  if (typeof value === \"number\") return LongBits.fromNumber(value);\n  if (util.isString(value)) {\n    /* istanbul ignore else */\n    if (util.Long) value = util.Long.fromString(value);else return LongBits.fromNumber(parseInt(value, 10));\n  }\n  return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n  if (!unsigned && this.hi >>> 31) {\n    var lo = ~this.lo + 1 >>> 0,\n      hi = ~this.hi >>> 0;\n    if (!lo) hi = hi + 1 >>> 0;\n    return -(lo + hi * 4294967296);\n  }\n  return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n  return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n  /* istanbul ignore next */ : {\n    low: this.lo | 0,\n    high: this.hi | 0,\n    unsigned: Boolean(unsigned)\n  };\n};\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n  if (hash === zeroHash) return zero;\n  return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n  return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n  var mask = this.hi >> 31;\n  this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n  this.lo = (this.lo << 1 ^ mask) >>> 0;\n  return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n  var mask = -(this.lo & 1);\n  this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n  this.hi = (this.hi >>> 1 ^ mask) >>> 0;\n  return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n  var part0 = this.lo,\n    part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n    part2 = this.hi >>> 24;\n  return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;\n};","map":{"version":3,"names":["module","exports","LongBits","util","require","lo","hi","zero","toNumber","zzEncode","zzDecode","length","zeroHash","fromNumber","value","sign","from","isString","Long","fromString","parseInt","low","high","prototype","unsigned","toLong","Boolean","charCodeAt","String","fromHash","hash","call","toHash","fromCharCode","mask","part0","part1","part2"],"sources":["C:/Users/ergas/OneDrive/Рабочий стол/inno/FoodFullstack/src/Frontend/node_modules/google-gax/node_modules/protobufjs/src/util/longbits.js"],"sourcesContent":["\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}