{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.snakeToCamelCase = exports.camelToSnakeCase = void 0;\n/**\n * Converts a given string from camelCase (used by protobuf.js and in JSON)\n * to snake_case (normally used in proto definitions).\n */\nfunction camelToSnakeCase(str) {\n  // Keep the first position capitalization, otherwise decapitalize with underscore.\n  return str.replace(/(?!^)[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n}\nexports.camelToSnakeCase = camelToSnakeCase;\n/**\n * Capitalizes the first character of the given string.\n */\nfunction capitalize(str) {\n  if (str.length === 0) {\n    return str;\n  }\n  return str[0].toUpperCase() + str.slice(1);\n}\n/**\n * Converts a given string from snake_case (normally used in proto definitions) to\n * camelCase (used by protobuf.js)\n */\nfunction snakeToCamelCase(str) {\n  // split on spaces, underscore, or capital letters\n  const splitted = str.split(/(?=[A-Z])|(?:(?!(_(\\W+)))[\\s_])+/).filter(w => w && w.length > 0)\n  // Keep the capitalization for the first split.\n  .map((word, index) => index === 0 ? word : word.toLowerCase());\n  if (splitted.length === 0) {\n    return str;\n  }\n  return [splitted[0], ...splitted.slice(1).map(capitalize)].join('');\n}\nexports.snakeToCamelCase = snakeToCamelCase;","map":{"version":3,"names":["camelToSnakeCase","str","replace","letter","toLowerCase","exports","capitalize","length","toUpperCase","slice","snakeToCamelCase","splitted","split","filter","w","map","word","index","join"],"sources":["../../src/util.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;AAgBA;;;;AAIA,SAAgBA,gBAAgBA,CAACC,GAAW;EAC1C;EACA,OAAOA,GAAG,CAACC,OAAO,CAAC,aAAa,EAAEC,MAAM,IAAI,IAAIA,MAAM,CAACC,WAAW,EAAE,EAAE,CAAC;AACzE;AAHAC,OAAA,CAAAL,gBAAA,GAAAA,gBAAA;AAKA;;;AAGA,SAASM,UAAUA,CAACL,GAAW;EAC7B,IAAIA,GAAG,CAACM,MAAM,KAAK,CAAC,EAAE;IACpB,OAAON,GAAG;;EAEZ,OAAOA,GAAG,CAAC,CAAC,CAAC,CAACO,WAAW,EAAE,GAAGP,GAAG,CAACQ,KAAK,CAAC,CAAC,CAAC;AAC5C;AAEA;;;;AAIA,SAAgBC,gBAAgBA,CAACT,GAAW;EAC1C;EACA,MAAMU,QAAQ,GAAGV,GAAG,CACjBW,KAAK,CAAC,kCAAkC,CAAC,CACzCC,MAAM,CAACC,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAACP,MAAM,GAAG,CAAC;EAC9B;EAAA,CACCQ,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAMA,KAAK,KAAK,CAAC,GAAGD,IAAI,GAAGA,IAAI,CAACZ,WAAW,EAAG,CAAC;EAClE,IAAIO,QAAQ,CAACJ,MAAM,KAAK,CAAC,EAAE;IACzB,OAAON,GAAG;;EAEZ,OAAO,CAACU,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAGA,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,CAACM,GAAG,CAACT,UAAU,CAAC,CAAC,CAACY,IAAI,CAAC,EAAE,CAAC;AACrE;AAXAb,OAAA,CAAAK,gBAAA,GAAAA,gBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}